<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darer &#39; Blog</title>
  
  <subtitle>记录Darer的职业生涯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://darerd.github.io/"/>
  <updated>2019-03-27T15:19:27.135Z</updated>
  <id>https://darerd.github.io/</id>
  
  <author>
    <name>Darer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随想-如果脱离现有的平台，你还剩下什么？</title>
    <link href="https://darerd.github.io/2019/03/27/%E9%9A%8F%E6%83%B3-%E5%A6%82%E6%9E%9C%E8%84%B1%E7%A6%BB%E7%8E%B0%E6%9C%89%E7%9A%84%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BD%A0%E8%BF%98%E5%89%A9%E4%B8%8B%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/27/随想-如果脱离现有的平台，你还剩下什么？/</id>
    <published>2019-03-27T15:18:05.000Z</published>
    <updated>2019-03-27T15:19:27.135Z</updated>
    
    <content type="html"><![CDATA[<center><b><font size="5">2019/1/8-如果有一天你脱离了现在的平台，<br>你还能剩下什么？</font></b></center><hr><blockquote><p>说在前面的话：</p><blockquote><p>脱离平台的“硬件”，你还有平台带给你的“软件”</p></blockquote></blockquote><hr><center>先介绍下自己：现就读于安徽一985高校，本科毕业于河南一211高校</center><hr><center>我会从以下两个方面阐述观点：</center><center>1. 平台带给我哪些“软件”</center><center>2. 我的看法</center><hr><ol><li>平台带给我哪些软件</li></ol><ul><li><p><u>开拓视野</u></p><p>在这里，我获得了与全国顶级高校的学生交流的机会(有幸去上海同济参加了一个两岸三地的创新创业比赛)；<br>这是我第一次接触创业比赛、接触路演、接触另一种社会形态培养出来的学生，真的是一种打开异世界的感觉；在心底埋下了一颗种子，从此看世界的角度和思维都在慢慢改变。<br><mark>平台越高、看得越远。</mark></p></li><li><p><u>自信心</u></p><p>在这里，我参加了学校和百度举办的创新创业活动，和来自全国高校的小伙伴同台竞技，并且取得了不错成绩；<br>这次让我认识到，自己并没有那么差和不堪，给一个机会，有信心做到更好；<br><mark>平台会给你自信心。</mark></p></li><li><p><u>人脉&amp;资源</u></p><p>在这里，我认识了各种各样优秀的人；他们各有所长，都对自己给予了帮助和启发；<br>在为院系运营公众号时，结识一位朋友A；通过A，加入了学校团委下属的一个部门，幸运的有一次机会去同济参加了活动，认识了港理工B；后来我们一起参加百度的活动，获得了不错的成绩。<br><mark>人脉&amp;资源就像一个雪球，它会越滚越大，为你带来更多的机会。</mark></p></li><li><p><u>机会</u></p><p>平台会提高你获得机会的几率，<br>还是那句老话：<mark>机会是给有准备的人的</mark><br>所以：<mark>积极进取、以终为始</mark></p></li></ul><ol start="2"><li>我的看法</li></ol><ul><li>人生就是一场赌局，平台越高，权限越高，筹码越多，赢得几率就越大；</li><li>如果你不进取，无法和平台的高度匹配，那就如同<em>风口上的猪，风没了，猪摔死了</em> ；</li><li>人生如梯子，当第N阶以下台阶撤掉的时候，你只要在N+1阶就可以了。</li></ul><hr><blockquote><p>别人传播焦虑，我传递积极</p><p>以上仅为我个人见解</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;b&gt;&lt;font size=&quot;5&quot;&gt;2019/1/8-如果有一天你脱离了现在的平台，&lt;br&gt;你还能剩下什么？&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;说在前面的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;脱离平台的“硬件
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>方法论-用户画像知识进阶</title>
    <link href="https://darerd.github.io/2019/03/27/%E6%96%B9%E6%B3%95%E8%AE%BA-%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E7%9F%A5%E8%AF%86%E8%BF%9B%E9%98%B6/"/>
    <id>https://darerd.github.io/2019/03/27/方法论-用户画像知识进阶/</id>
    <published>2019-03-27T15:10:43.000Z</published>
    <updated>2019-03-27T15:11:14.419Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="用户画像的架构"> <strong>用户画像的架构</strong></span></h1><blockquote><p>内容转载于：<code>https://www.iamue.com/34391</code><br>作者：<code>秦路</code></p></blockquote><p><code>原文很长，干货很多，为了便于理解，我把文章拆分为了三期</code></p><p><code>今天介绍第三期：用户画像的进阶</code></p><hr><p>不同业务的画像标签体系并不一致，这需要数据和运营目的性的提炼。</p><p>用户画像一般按业务属性划分多个类别模块。除了常见的人口统计，社会属性外。还有用户消费画像，用户行为画像，用户兴趣画像等。具体的画像得看产品形态，像金融领域，还会有风险画像，包括征信、违约、洗钱、还款能力、保险黑名单等。电商领域会有商品的类目偏好、品类偏好、品牌偏好，不一而足。</p><p><img src="https://i.loli.net/2019/03/12/5c8798fecc96e.jpg" alt=""></p><p>上图是随手画的的例子，画一个架构不难，难得是了解每个标签背后的业务逻辑和落地方式，至于算法，又能单独扯很多文章了。</p><p><strong>从数据流向和加工看，用户画像包含上下级递进关系。</strong></p><p>以上文的流失系数举例，它通过建模，其依赖于用户早期的历史行为。而用户早期的历史行为，即10天内的消费金额、消费次数、登录次数等，本身也是一个标签，它们是通过原始的明细数据获得。</p><p><img src="https://i.loli.net/2019/03/12/5c8799bc799c7.jpg" alt=""></p><p>上图列举了标签加工和计算的过程，很好理解。最上层的策略标签，是针对业务的落地，运营人员通过多个标签的组合形成一个用户群组，方便执行。</p><p>公司越大，用户画像越复杂。某家主打内容分发的公司进入了全新的视频领域，现在有两款APP，那么用户画像的结构也需要改变。既有内容相关的标签，也有视频相关的标签，两者是并行且关联的。</p><p>比如A用户在内容标签下是重度使用，而在视频标签下是轻度。比如B用户很久没打开内容APP有流失风险，但在视频APP的使用时长上看很忠诚。如此种种，看的是灵活应用。当然，姓名性别这类人口统计标签，是通用的。</p><p><strong>用户画像作为平台级的应用，很多运营策略及工具，都是在其基础上构建的。</strong></p><p><img src="https://i.loli.net/2019/03/12/5c8799a7220b2.jpg" alt=""></p><p>基于营销和消费相关的标签，新客、老客、用户的流失和忠诚、用户的消费水平和频率等，都是构成CRM（客户关系管理）的基础，可能大家更习惯叫它用户/会员管理运营平台。</p><p>它的作用在于，将数据化的标签，转换成产品运营策略。不同的标签对应不同的用户群体，也对应不同的营销手段。CRM的结构中会包含各类触达用户的常用渠道比如短信、邮件、推送等。也包含CMS（内容管理系统），执行人员通过其快速配置活动页、活动通道、优惠券等，靠营销活动拉动数据。</p><p>老王的沙拉业务要是做大，那么运营平台就会以图中的结构搭建。老王在CRM中组合标签，新客老客流失客的数据借助BI监控，然后通过CMS系统配置红包啊优惠券啊等等，再通过短或Push触达。</p><p>好的用户画像系统，既是数据生态体系，也是业务和运营的生态体系，它是一门复杂的交叉领域。</p><p>万千用法，存乎一心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;用户画像的架构&quot;&gt; &lt;strong&gt;用户画像的架构&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;内容转载于：&lt;code&gt;https://www.iamue.com/34391&lt;/code&gt;&lt;br&gt;
作者：&lt;code&gt;秦路&lt;
      
    
    </summary>
    
      <category term="方法论" scheme="https://darerd.github.io/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="用户画像" scheme="https://darerd.github.io/tags/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>方法论-如何建立正确的用户画像？</title>
    <link href="https://darerd.github.io/2019/03/27/%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/27/方法论-如何建立正确的用户画像？/</id>
    <published>2019-03-27T15:09:28.000Z</published>
    <updated>2019-03-27T15:10:00.551Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="如何建立正确的用户画像"> <strong>如何建立正确的用户画像</strong></span></h1><blockquote><p>内容转载于：<code>https://www.iamue.com/34391</code><br>作者：<code>秦路</code></p></blockquote><p><code>原文很长，干货很多，为了便于理解，我把文章拆分为了三期</code></p><p><code>今天介绍第二期：正确使用用户画像</code></p><hr><p><strong>用户画像首先是基于业务模型的</strong>。业务部门连业务模型都没有想好，数据部门只能巧妇难为无米之炊。数据部门也别关门造车，这和做产品一样，连用户需求都没有理解透彻，匆匆忙忙上线一个APP，结果无人问津。</p><p>理解消费者的决策，考虑业务场景，考虑业务形态，考虑业务部门的需求…这些概念说得很虚，但是一个好的用户画像离不开它们。本文没有说数据、模型和算法，是我认为，它们比技术层面更重要。</p><p>我们从一个故事开始设立用户画像吧。</p><p>老王是一家互联网创业公司的核心人员，产品主营绿色健康沙拉，老王和绿色比较搭嘛。这家公司推出了APP专卖各式各样的沙拉，现在需要建立用户画像指导运营。</p><p>公司现阶段在业务层面，更关注营销和销售：如何将沙拉卖得更好。</p><p>下图是老王简单梳理的运营流程。</p><p><img src="https://i.loli.net/2019/03/12/5c8795db168fd.png" alt=""></p><p>老王将顾客按是否购买过沙拉，划分成潜在用户和新客。潜在用户是注册过APP但还没有下单，新客是只购买过一次沙拉的用户，除此以外还有老客，即消费了两次及以上的人群。</p><p>为了便于大家理解，我用<code>JSON</code>格式表示一个简易的用户画像。</p><p><img src="https://i.loli.net/2019/03/12/5c8795fbe4cbe.png" alt=""></p><p>为什么独立出新客标签？因为老王的沙拉针对未消费用户会有新人红包引导消费，万事开头难。这也带来新客一次后不再消费的问题，所以需要潜在、新客、老客的划分。</p><p>作为一个有追求的运营人员，划分老客也是不够，这里继续用户分层。</p><p>传统的分层用<strong>RFM三个维度</strong>衡量，沙拉的客单价比较固定，F和M取一个就够用了。老王现在计算不同消费档次的用户留存度差异，譬如某时间段内消费达XX元的用户,在未来时间段是否依旧消费。</p><blockquote><p>RFM模型是衡量客户价值和客户创利能力的重要工具和手段<br>最近一次消费 (Recency)<br>消费频率 (Frequency)<br>消费金额 (Monetary)</p></blockquote><p>沙拉这类餐饮是高频消费，XX应该选择一个较窄的时间窗口，统计365天内的消费意义不大。还有一点需要注意的是，沙拉不同季节的销量是有差异的，冬天沙拉肯定卖的不如夏天，要综合考虑消费分布。</p><p>这里姑且定义，30天内消费200元以上为VIP用户。老王的生意如果特别好，也可以继续划分超级VIP。这种标签往往配合业务，譬如VIP有赠送饮料，优先配送的权益。非VIP人群，也需要激励往VIP发展。</p><p>画像的人口统计属性，老王靠用户填写订单上的收货人姓名搞定。籍贯年龄这几个，对沙拉生意没有特别大的帮助，难道为四川籍用户提高麻辣沙拉？</p><p>用户地址，可以通过收货地设立规则判断，比如某个地址出现X次，可以将其认为常用地地址。再依据送货地在写字楼还是学校，推算用户是白领还是学生。</p><p>老王针对不同属性的人群，采取了特殊的运营策略。像学生群体，因为7,8月份是暑假，所以老王提前预估到校园地区的销售额下降。当9月开学季，又能对返校学生进行召回。</p><p>白领相关的群体，更关注消费体验，对价格敏感是次要的。如果平台女用户的消费占比高，老王就主打减肥功能的沙拉，并且以包月套餐的形式提高销量。</p><p><img src="https://i.loli.net/2019/03/12/5c87961ae6fd7.jpg" alt=""></p><p>以一家沙拉店来看，老王的用户画像已经不错了，但他还是焦头烂额，因为用户流失率开始上升。用户流失有各种各样的原因：对手老李沙拉的竞争、沙拉的口味、用户觉得性价比不高、老王不够帅等。</p><p>流失是一个老大难的预测问题。老王对流失用户的定义是30天没有消费。想要准确预测，这里得尝试用机器学习建模，技术方面先这里略过。<strong>所谓建模，最好要找到用户开始不消费的时间点之前的关键因素，可是是行为，可以是属性。</strong></p><p>用户历史窗口内消费金额少，有可能流失；用户历史窗口内消费频次低，有可能流失；用户历史窗口内打开APP次数少，有可能流失；用户给过差评，有可能流失；用户等餐时间长，有可能流失；用户的性别差异，有可能流失；餐饮的季度因素，有可能流失…</p><p>老王依据业务，挑选了可能影响业务的特征，提交给数据组尝试预测流失。需要注意的是，这些用户行为不能反应真实的情况。<strong>大家不妨想一下，流失用户的行为，是不是一个动态的变化过程？</strong></p><p>我曾经消费过很多次，但是突然吃腻了，于是减少消费次数，再之后不怎么消费，最终流失。单位时间段内的消费忠诚度是梯度下降的，为了更好的描述变化过程，将时间窗口细分成多个等距段。前30-20天、前20~10天、前10天内，这种切分比前30天内可以更好地表达下降趋势，也更好的预测流失。</p><p><strong>从老王的思路看，所谓流失，可以通过用户行为的细节预判</strong>。机器学习的建模虽然依赖统计手段，也离不开业务洞察。这里再次证明，用户画像建立在业务模型上。</p><p>流失概率解决了老王的心头之患，通过提前发现降低流失用户。挽回流失推行一段时间后，老王发现虽然流失用户减少了，但是成本提高了，因为挽回用户也是要花钱的呀。亏本可不行，老王心头又生一计，他只挽回有价值的，那种拿了红包才消费的用户老王他不要了！老王要的是真爱粉。于是他配合消费档次区别对待，虽然流失用户的数量没有控制好，但是利润提高了。</p><p>上述的用户画像，没有一个标签脱离于业务之外。基于业务场景，我们还能想象很多用户画像的玩法。沙拉有不同的口味，蔬果鸡肉海鲜。用户的口味偏好，可以用矩阵分解、模糊聚类或者多分类的问题计算，也以0～1之间的数字表示喜好程度，相似的，还有价格偏好，即价格敏感度。</p><p><img src="https://i.loli.net/2019/03/12/5c87963bdca19.jpg" alt=""></p><p>再深入想一下业务场景，如果某个办公地点，每天都有五六笔的订单，分属不同的客户不同的时间段，外卖小哥得送个五六次，对人力成本是多大的浪费呀。运营可以在后台分析相关的数据，以团购或拼单的形式，促成订单合并，或许销售额的利润会下降，但是外卖的人力成本也节约了。这也是用画像作为数据分析的依据。</p><p>老王的运营故事说完了，现在对用户画像的建立有一套想法了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;如何建立正确的用户画像&quot;&gt; &lt;strong&gt;如何建立正确的用户画像&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;内容转载于：&lt;code&gt;https://www.iamue.com/34391&lt;/code&gt;&lt;br&gt;
作者：&lt;
      
    
    </summary>
    
      <category term="方法论" scheme="https://darerd.github.io/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="用户画像" scheme="https://darerd.github.io/tags/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>方法论-啥是用户画像？只是用户的标签吗？</title>
    <link href="https://darerd.github.io/2019/03/27/%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%95%A5%E6%98%AF%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%EF%BC%9F%E5%8F%AA%E6%98%AF%E7%94%A8%E6%88%B7%E7%9A%84%E6%A0%87%E7%AD%BE%E5%90%97%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/27/方法论-啥是用户画像？只是用户的标签吗？/</id>
    <published>2019-03-27T15:06:38.000Z</published>
    <updated>2019-03-27T15:07:37.812Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="啥是用户画像只是用户的标签吗"> 啥是用户画像？只是用户的标签吗？</span></h2><blockquote><p>内容转载于：<code>https://www.iamue.com/34391</code><br>作者：<code>秦路</code></p></blockquote><p><code>原文很长，干货很多，为了便于理解，我把文章拆分为了三期</code></p><p><code>今天介绍第一期：认识用户画像</code></p><hr><p>用户画像是一个挺新颖的词，最初它是大数据行业言必及之的时髦概念。现在我们运营谈及用户画像，它也是和精准营销、精细化运营直接钩挂的。这篇文章主要讲产品和运营角度的用户画像。</p><p>希望看完后，解决你一切关于用户画像的疑问。</p><h3><span id="什么是用户画像"> <strong>什么是用户画像</strong></span></h3><p>用户画像一点也不神秘，它是根据用户在互联网留下的种种数据，主动或被动地收集，最后加工成一系列的标签。比如猜用户是男是女，哪里人，工资多少，有没有谈恋爱，喜欢什么，准备剁手购物吗？</p><p><img src="https://i.loli.net/2019/03/12/5c8794c758e6d.jpg" alt=""></p><p><strong>我们常把用户标签和用户画像对等。</strong></p><p>但凡用户画像的文章，类似上文图片都会出现，有用烂的趋势。</p><p><strong>标签化是最直观的解释，但它不等于用户画像。</strong></p><p><strong>用户画像的正式名称是User Profile，大家往往把它和User Persona混淆，后者更恰当的名字是用户角色。是产品设计和用户调研的一种方式方法</strong>。当我们讨论产品、需求、场景、用户体验的时候，往往需要将焦点聚集在某类人群上，用户角色便是一种抽象的方法，是目标用户的集合。</p><p>用户角色不指代具体的谁。「她是一位25岁的白领，211大学毕业，现在从事于互联网行业的设计工作，居住在北京。单身，平时喜爱摇滚乐」，这段话语，常用来描述产品的典型用户。</p><p><strong>本文谈的User Profile，更多是运营和数据息息相关的平台级应用，本质是对任何一个用户都能用标签和数据描述</strong>。</p><h3><span id="用户画像的应用"> 用户画像的应用</span></h3><p>它在企业迈大迈强的过程中有举足轻重的作用。以下是主要的应用。</p><p><strong>精准营销</strong>：这是运营最熟悉的玩法，从粗放式到精细化，将用户群体切割成更细的粒度，辅以短信、推送、邮件、活动等手段，驱以关怀、挽回、激励等策略。</p><p><strong>数据应用</strong>：用户画像是很多数据产品的基础，诸如耳熟能详的推荐系统广告系统。操作过各大广告投放系统的同学想必都清楚，广告投放基于一系列人口统计相关的标签，性别、年龄、学历、兴趣偏好、手机等等。</p><p><strong>用户分析</strong>：虽然和Persona不一样，用户画像也是了解用户的必要补充。产品早期，PM们通过用户调研和访谈的形式了解用户。在产品用户量扩大后，调研的效用降低，这时候会辅以用户画像配合研究。新增的用户有什么特征，核心用户的属性是否变化等等。</p><p><strong>数据分析</strong>：这个就不用多提了，用户画像可以理解为业务层面的数据仓库，各类标签是多维分析的天然要素。数据查询平台会和这些数据打通。</p><p>对大部分产品，用户画像用不到推荐系统，个性化推荐也提高不了几个利润，毕竟它需要大量的用户和数据作支撑。所以这些产品，更适合以用户画像为基础去驱动业务。</p><p>提了那么多好处，但是据我了解，不少公司，花了一大笔钱招了不少人建设用户画像系统，结果用不起来。或者做了一份用户画像的报告，性别用户地理位置用户消费金额，看上去挺高大上的，看完也就看完了。</p><p>归根结底，难以用好。</p><p><strong>很多用户画像初衷是好的，但是沦为了形式主义。</strong></p><p>举身边的例子，朋友在公司建立用户画像划分了百来个维度。用户消费、属性、行为无所不包。本来这不错啊，但是上线后运营看着这个干瞪眼。</p><p><strong>问题包含但不限于，用户有那么多维度，怎么合理地选择标签？我想定义用户的层级，VIP用户应该累积消费金额超过多少？是在什么时间窗口内？为什么选择这几个标准？后续应该怎么维护和监控？业务发生变化了这个标签要不要改？</strong></p><p>设立好标签，怎么验证用户画像的有效性？我怎么知道这套系统成功了呢？效果不佳怎么办？它有没有更多的应用场景？</p><p>策略的执行也是一个纠结的问题。从岗位的执行看，运营背负着KPI。当月底KPI完不成时，你觉得他们更喜欢选择全量运营，还是精细化呢?</p><p>我想不少公司都存在这样类似情况：使用过用户画像一段时间后，发现也就那么一回事，也就渐渐不再使用。</p><p>这是用户画像在业务层面遇到老大难的问题。虽然企业自称建立用户画像，应用还是挺粗糙的。</p><h3><span id="怎样深入理解用户画像"> <strong>怎样深入理解用户画像</strong></span></h3><p>画虎不全反类汪，想要用好它，首先得深入理解用户画像。</p><p>现在运营按用户生命周期设立了几个标签，比如新用户、活跃用户、流失用户，这些标签当然够细分。但它真的是一个好标签么？不是。</p><p>因为这些都是滞后性的。按流失用户的一般定义，往往是用户很长一段时间没有回应和行动，但是都几个月没有响应了，哪怕知道是流失用户也于事无补。它有价值，但太滞后。</p><p>聪明的运营会设立一个新的标签，最近一次活跃距今天数，用户有六个月没有活跃，那么天数就是180天。这个比单纯的流失用户标签好，能凭此划分不同的距今天数，设立30天，90天，180天的时间节点。</p><p>距今天数也不是最好的。用户有差异，同样两个用户A和B，哪怕不活跃天数相同，我也不能认为它们的流失可能性相等。该问题在低频场景更凸显，旅游APP，半年没有活跃也是正常的，此时距今天数力有未逮。</p><p>回过头看流失用户，我们定义它，不是为了设立一个高大上的系统。任何企业，肯定一开始就希望流失用户越少越好，其次才是如何挽回。这种业务前提下，预防性的减少流失用户比已经流失的标签更重要。</p><p><strong>所以最好的标签的标签是用户流失概率，流失概率&gt;距今消费天数&gt;流失标签。</strong></p><p>不要想当然的归纳一个齐全完备的体系，却忽略了画像的核心价值。<strong>用户画像首先得是商业目的下的用户标签集合。</strong></p><p>猜用户是男是女，哪里人，工资多少，有没有谈恋爱，喜欢什么，准备剁手购物吗？探讨这些是没有意义的。是男是女如何影响消费决策，工资多少影响消费能力，有没有谈恋爱会否带来新的营销场景，剁手购物怎么精准推荐，这些才是用户画像背后的逻辑。</p><p><strong>不是我有了用户画像，便能驱动和提高业务。而是为了驱动和提高业务，才需要用户画像。这是很容易犯的错误。</strong></p><p>用户画像的标签一般通过两种形式获得，基于已有数据或者一定规则加工，流失标签和距今天数皆是。另外一种是基于已有的数据计算概率模型，会用到机器学习和数据挖掘。</p><p><strong>概率是介于0~1之间的数值</strong>。拿性别举例，除非能直接获取用户的身份证信息，用户很少会填写性别，填写的性别也不一定准确，网游中性别为女的扣脚大汉一抓一大把呢。</p><p>这里就要增加一层推断用户真实性别的算法。中国人的性别和名字是强相关，建国建军，翠花翠兰，很容易判断。算法中常用贝叶斯，通过已有的姓名性别库预测新加入的用户性别。</p><p>特殊情况下，不少姓名是中性，男女不辩。像晓晶，可男可女。更特殊的情况，看上去是男性的名字，也有可能是女性，我的初中老师就叫建军，然而是个和蔼可亲的小姐姐。</p><p>特殊情况意味着特殊的概率，所以不能用非此即彼的二分法。所谓概率，它更习惯告诉你，通过模型推断，建军有95％的可能是男性姓名，表示为0.95；晓晶有55％的可能是男性，表示为0.55。</p><p>虽然为了方便，模型会设立阈值，将50％以上的概率默认为男性，以下默认为女性。<strong>但业务部门的同学要清楚，用户标签的本质往往是0～1之间的概率。</strong></p><p>概率型的标签很难验证。某位用户被标上学生标签，要么真的哄他上传学籍证明，否则很难知道他是不是真的学生。这种黑箱情况下，针对学生用户进行营销活动，效果好与不好，都受标签准确率的影响。广告、推荐、精准营销都会遇到这个问题。</p><p>概率肯定有多有少。90%流失概率的用户，和30%流失概率的用户，虽然是模型建立出的预测值，非真实，我们还是会认为前者更有离开的可能性，凭此设立运营策略。</p><p><strong>这带来一个新的问题，如何选择概率的阈值？</strong></p><p>我们想要挽回流失用户，选择80%以上概率的人群，还是60%呢？答案已经说过了，要考虑业务，挽回流失用户是手段不是目的，实际目的是通过挽回流失用户提高利润，那么阈值的选择迎刃而解。计算不同阈值下，挽回用户的收入和成本，选择最优解。</p><p>推而广之，推荐系统也好，广告系统也罢，它们有更复杂的维度、标签、特征，本质也是找出用户最近想不想买车，用户最近想不想旅游。把最合适的信息在最恰当时机推给用户，获取最大的利益。</p><p>我列举的案例，是简化过的。像姓名，在电商和消费行业，除了生理上的性别，还会建立消费模型上的性别标签，有些人虽然是男性，但购物行为是女性，这是要区分的。</p><p>看到这里别怕，想要建好用户画像，说简单不简单，说难也不难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;啥是用户画像只是用户的标签吗&quot;&gt; 啥是用户画像？只是用户的标签吗？&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;内容转载于：&lt;code&gt;https://www.iamue.com/34391&lt;/code&gt;&lt;br&gt;
作者：&lt;code&gt;秦路&lt;/
      
    
    </summary>
    
      <category term="方法论" scheme="https://darerd.github.io/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="用户画像" scheme="https://darerd.github.io/tags/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>软件-Edge浏览器大改版：基于Chromium内核的Edge浏览器终于变好看了</title>
    <link href="https://darerd.github.io/2019/03/25/%E8%BD%AF%E4%BB%B6-Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%94%B9%E7%89%88%EF%BC%9A%E5%9F%BA%E4%BA%8EChromium%E5%86%85%E6%A0%B8%E7%9A%84Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%88%E4%BA%8E%E5%8F%98%E5%A5%BD%E7%9C%8B%E4%BA%86/"/>
    <id>https://darerd.github.io/2019/03/25/软件-Edge浏览器大改版：基于Chromium内核的Edge浏览器终于变好看了/</id>
    <published>2019-03-25T03:56:06.000Z</published>
    <updated>2019-03-25T03:57:41.388Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="edge浏览器大改版基于chromium内核的edge浏览器终于变好看了"> Edge浏览器大改版：基于Chromium内核的Edge浏览器终于变好看了</span></h1><p>**微软即将推出的基于Chromium内核的Edge浏览器完整安装包已经在线泄露。**泄露的版本似乎是微软预计很快将在公开预览版中发布的早期版本。微软的新版Edge基于Chromium，早期版本包括Chrome扩展支持，收藏夹同步以及对用户界面的一些自定义调整。</p><p>泄露版Edge的开发完成度较高，在Windows 10上运行良好，但是，您可能会从Edge中看到一些还没有完工的地方。例如，微软尚未提供其预留选项卡功能，尚未实现使用手写笔功能的电子墨水特性，而黑暗模式目前只能通过手动打开测试标记获得，就像Google在Chrome中实现它一样。</p><p>另一方面，微软也正在开发适用于Mac的Edge版本，但目前尚不清楚它是否会与新版Edge for Windows版本同时亮相。</p><p><img src="https://i.loli.net/2019/03/25/5c982fcc075ea.png" alt=""></p><p>终于没有了Edge浏览器的塑料感了，质感更强了</p><p><img src="https://i.loli.net/2019/03/25/5c98301f7b516.png" alt=""></p><p><img src="https://i.loli.net/2019/03/25/5c983048ed885.png" alt=""></p><p><img src="https://i.loli.net/2019/03/25/5c9832a25511a.png" alt=""></p><p>账户头像也可以定制了</p><p>目前仅为泄漏版Edge浏览器，仅支持英文，后续若有官方发布，请尽快更新</p><p><a href="https://www.cnbeta.com/articles/it/830535.htm" target="_blank" rel="noopener">转载于网络</a></p><p>若想尝鲜，关注微信公众号：<code>产品汪darer</code></p><p>后台回复：<code>edge浏览器</code>，即可下载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;edge浏览器大改版基于chromium内核的edge浏览器终于变好看了&quot;&gt; Edge浏览器大改版：基于Chromium内核的Edge浏览器终于变好看了&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;**微软即将推出的基于Chromium内核的Edge浏览器完整安装包
      
    
    </summary>
    
      <category term="软件资源" scheme="https://darerd.github.io/categories/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="软件资源" scheme="https://darerd.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-怎么爬静态网站</title>
    <link href="https://darerd.github.io/2019/03/25/%E7%88%AC%E8%99%AB-%E6%80%8E%E4%B9%88%E7%88%AC%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
    <id>https://darerd.github.io/2019/03/25/爬虫-怎么爬静态网站/</id>
    <published>2019-03-25T03:51:56.000Z</published>
    <updated>2019-03-25T03:53:37.134Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="爬虫-怎么爬静态网站"> 爬虫-怎么爬静态网站</span></h1><p>爬静态网站主要分为两部分：</p><ol><li>爬静态网站的文字</li><li>爬静态网站的图片</li></ol><p>[TOC]</p><h3><span id="爬文字"> 爬文字</span></h3><h4><span id="思路"> 思路</span></h4><ol><li>用<code>requests</code>模块得到网站的HTML</li><li>用<code>BeautifulSoup</code>模块得到HTML的正则文本</li><li>用<code>find</code>或者<code>find_all</code>函数从正则文本中得到自己想要的</li><li>用<code>repalce</code>去除不需要的字符</li></ol><h4><span id="源代码"> 源代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 使脚本可以识别中文</span></span><br><span class="line"><span class="comment"># 爬网站：http://www.hbrchina.org/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 调用需要的模块</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">req = requests.get (<span class="string">'http://www.hbrchina.org/2019-02-18/7150.html'</span>)</span><br><span class="line">   <span class="comment"># 得到网站的HTML</span></span><br><span class="line">req.encoding = req.apparent_encoding</span><br><span class="line"><span class="comment">#获取文本原来编码，使两者编码一致才能正确显示</span></span><br><span class="line">html = req.text</span><br><span class="line">bf = BeautifulSoup(html,<span class="string">'html.parser'</span>)</span><br><span class="line">  <span class="comment"># 把HTML文件转为正则文件（我的理解是文本文件）</span></span><br><span class="line">body = bf.body</span><br><span class="line">texts = body.find_all (<span class="string">'div'</span>,&#123;<span class="string">'class'</span>:<span class="string">'article-content'</span>&#125;)</span><br><span class="line">  <span class="comment"># 用find_all函数找到 这样的div文件，其class是article-content</span></span><br><span class="line">print(texts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span>*<span class="number">8</span>,<span class="string">'\n\n'</span>))</span><br><span class="line">  <span class="comment"># 用replace函数提出所有的字符、空格等</span></span><br></pre></td></tr></table></figure><h4><span id="可以看到的结果"> 可以看到的结果</span></h4><p><img src="https://i.loli.net/2019/03/24/5c97217a9dc30.png" alt=""></p><h3><span id="爬图片"> 爬图片</span></h3><h4><span id="思路"> 思路</span></h4><ol><li>用requests模块得到网站的HTML</li><li>用BeautifulSoup得到HTML的正则文本</li><li>用find函数从正则文本中得到自己想要的，比如关键词img</li><li>利用urllib模块下载</li><li>利用for语句下载所有图片</li></ol><h4><span id="源代码"> 源代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,urllib</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">rep = requests.get(<span class="string">'https://darerd.github.io/2019/03/21/%E9%9A%8F%E6%83%B3-%E6%96%B0%E9%9B%B6%E5%94%AE%E4%BC%81%E4%B8%9A%E2%80%9C%E2%80%9C%E6%99%BA%E8%83%9C%E2%80%9D%E6%9C%AA%E6%9D%A5/'</span>)</span><br><span class="line">rep.encoding = rep.apparent_encoding</span><br><span class="line">html = rep.text</span><br><span class="line">bs = BeautifulSoup(html,<span class="string">'html.parser'</span>)</span><br><span class="line">img = bs.find_all(<span class="string">'img'</span>)</span><br><span class="line"><span class="comment"># 在bs正则文件中找到所有 带有img标签的结果</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img :</span><br><span class="line">    <span class="comment"># 利用for语句得到每一个图片的src</span></span><br><span class="line">imgsrc = i.get(<span class="string">'src'</span>)</span><br><span class="line">    <span class="comment"># 从img中找到图片的下载链接，src</span></span><br><span class="line">urllib.request.urlretrieve(imgsrc,<span class="string">'./%s.jpg'</span> %x)</span><br><span class="line">    <span class="comment"># 利用urllib模块去下载图片</span></span><br><span class="line">x=x+<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'正在下载: %d '</span>%x)</span><br></pre></td></tr></table></figure><h3><span id="爬虫时必须会用网页源代码"> 爬虫时必须会用网页源代码</span></h3><p>以爬图片为例：</p><p>这是我们要爬的网站：[<a href="https://darerd.github.io/2019/03/21/%E9%9A%8F%E6%83%B3-%E6%96%B0%E9%9B%B6%E5%94%AE%E4%BC%81%E4%B8%9A%E2%80%9C%E2%80%9C%E6%99%BA%E8%83%9C%E2%80%9D%E6%9C%AA%E6%9D%A5/">https://darerd.github.io/2019/03/21/随想-新零售企业““智胜”未来/</a>]</p><p>打开网站后（我用的Chrome浏览器），键盘快捷键<strong>F12</strong>，即可打开网站的调试模式，效果如下：</p><p><img src="https://i.loli.net/2019/03/24/5c9725b26483e.png" alt=""></p><p>右侧就是网站的源代码，可以用来爬</p><p>如果需要快速定位到某一部分的代码所在位置，我们可以鼠标右键，<strong>选择检查</strong>，如下图所示：</p><p><img src="https://i.loli.net/2019/03/24/5c9726466f7dd.png" alt=""></p><p>如果我们要快速定位某图片所在的代码位置，演示如下：</p><p><img src="https://i.loli.net/2019/03/24/5c9726d13491f.gif" alt=""></p><p>用这种方法观察每一张图片的源码：</p><p>它们的写法都是非常类似的，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://upload.hbrchina.org/2019/0213/1550028457604.jpg"</span> <span class="attr">alt</span>=<span class="string">"1550028961(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>src</code>是图片的下载地址，<code>alt</code>是图片的便签，每一张图片都在<code>img</code>语句中</p><p>所以我们只要得到所有的<code>img</code>语句，然后从<code>img</code>语句中得到所有的<code>src</code>链接，就可以下载图片了。</p><p>每一种爬虫程序都类似，找到要爬部分的特点，然后调用相应的模块。</p><p>对于小白，难度就在于怎么样找到要爬部分的特点</p><hr><p>以上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;爬虫-怎么爬静态网站&quot;&gt; 爬虫-怎么爬静态网站&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;爬静态网站主要分为两部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;爬静态网站的文字&lt;/li&gt;
&lt;li&gt;爬静态网站的图片&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3&gt;&lt;span
      
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://darerd.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>随想-新零售企业““智胜”未来</title>
    <link href="https://darerd.github.io/2019/03/21/%E9%9A%8F%E6%83%B3-%E6%96%B0%E9%9B%B6%E5%94%AE%E4%BC%81%E4%B8%9A%E2%80%9C%E2%80%9C%E6%99%BA%E8%83%9C%E2%80%9D%E6%9C%AA%E6%9D%A5/"/>
    <id>https://darerd.github.io/2019/03/21/随想-新零售企业““智胜”未来/</id>
    <published>2019-03-21T13:00:15.000Z</published>
    <updated>2019-03-21T13:02:33.353Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="新零售企业智胜未来"> 新零售企业“智胜”未来</span></h1><p>最近看到一篇蛮有趣的<a href="http://www.hbrchina.org/2019-02-13/7147.html" target="_blank" rel="noopener">文章</a>，<code>新零售企业“智胜”未来</code></p><p>作者是:<u>罗兰贝格管理咨询全球高级合伙人兼大中华区副总裁 陈科</u>，他认为全渠道才是未来发展的核心关键，即线上线下零售体系充分融合，以完成对消费者的多触点沟通，从而获取更多的流量资源。</p><blockquote><p>以下是全文（有删改）：</p></blockquote><p>在过去几十年，中国传统线下零售发展迅速。而伴随着电商的崛起，线下传统零售的优势已不再如此突出。比如，一些企业存在供应链响应慢、渠道层级冗长、运营成本高等问题。但与此同时，线上零售的高速增长也难以为继，年复合增长率由2012年的61%回落至2017年的35%。但是中国线上零售的人口红利逐步消退，消费者转化率随之降低，线上获客成本不断攀升。</p><p>现在消费者获取商品信息的渠道越来越多，并日趋碎片化。对于企业来说，单一的渠道已不足以支撑业务的发展。随着手机的普及，<strong>全渠道才是未来发展的核心关键，即线上线下零售体系充分融合，以完成对消费者的多触点沟通，从而获取更多的流量资源</strong>。</p><p>随着80后和90后逐步升级为主流消费群体，消费者需求从基础的物质需求与计划性消费，逐渐向精神层面需求与及时性消费延伸。零售行业也随之进行了业态变迁：传统商超、百货、街边店满足了对基础物质和计划性消费的需求；外卖、便利店与无人零售门店业态的发展满足了人们对高效、及时性消费的需求；购物中心满足了休闲娱乐与社交需求定制的需求；门店与精品店则意欲服务于消费者个性化与品质需求；电商和多业态融合则在一定程度上兼顾了多元需求，并提供了更高的效率。</p><p><img src="http://upload.hbrchina.org/2019/0213/1550028457604.jpg" alt="1550028961(1)"></p><p>一言以蔽之，零售业态的变迁最终将成为消费者需求变化的重要体现。</p><h3><span id="生态格局演变与新生态价值"> 生态格局演变与新生态价值</span></h3><p>从20世纪90年代互联网萌芽发展至今，零售业与互联网之间的关系，伴随着消费需求的逐步升级、第四次技术革命和行业演进周期，大致经历了三大发展阶段。</p><p><img src="http://upload.hbrchina.org/2019/0213/1550028507536.jpg" alt="1550029035(1)"></p><p><strong>第一阶段，为我所用</strong>。从20世纪90年代到2003年左右，互联网影响力尚微，主要形态为搜索引擎及门户网站，零售行业主要通过网页广告、定向广告等方式将互联网作为营销手段/渠道。</p><p><strong>第二阶段，分庭抗礼</strong>。从2000年年初到2016年左右，随着技术突飞猛进与快速迭代，互联网企业从线上渠道切入既有市场，为消费者提供线上购物、交易、信息、社交等电商平台，实现了对零售行业“场”的重塑。多个互联网巨头浮现，行业发生爆发式增长，与传统零售体系形成分庭抗礼之势。</p><p><strong>第三阶段，互相融合</strong>。时至今日，单一线上或线下渠道皆不足以满足消费者日益“挑剔”的全方位需求。线下企业积极触网，线上企业则大规模建立线下触点，生产关系整体重组，形成“你中有我，我中有你”的融合格局，并形成了由“大平台”、“小生态”、“专服务”企业组成的生态格局。</p><blockquote><p>一句话道出了“美团”、“阿里”们的野心，要做大平台</p></blockquote><p>“大平台”企业是生态构建者，通过对流量和商户的聚集打造平台；“小生态”企业通常来自于传统垂直行业，覆盖产业链上下游，为消费者提供最终的产品或服务。在生态体系中，受到“大平台”企业在流量、数据等方面的扶持和辅助；而“专服务”企业则是平台上的中小微商户或提供专业服务的企业，在产业链细分环节有竞争优势，依附于“大平台”企业发展。</p><p><img src="http://upload.hbrchina.org/2019/0213/1550028536534.jpg" alt="1550029076(1)"></p><p>随着数据赋能驱动的商业模式兴起，零售行业逐渐形成了一个新的生态价值体系。在这一体系中，<strong>零售企业可以通过2C与2B两种方式实现价值创新与数据赋能。</strong></p><p>在C端，企业通过消费者多维度数据分析，深度理解目标消费者诉求，围绕对“人”的刻画和对交易场景的深度挖掘，以实现新的生态价值。</p><p>在B端，生态企业助力其他零售商户提升价值链效率以实现价值的案例也屡见不鲜。例如，为应对快速变化的消费者需求所产生的供需矛盾，数字化驱动的C2M供应模式凭借数据深度挖掘，整体打通需求端和供应端，实现数据低成本流动、供应链前移、全环节信息化来重塑产业链，以客户需求指导上游工厂生产。</p><p>在线下业态层面，“效率”与“体验”是两大核心消费者需求，直击消费者核心两大需求的无人零售和业态/场景拓展是大市场的引爆点。</p><p>此外，无人零售由于技术方面要求较高，目前尚处于投资试水阶段，可视为中长期机会；由于人口老龄化、人工成本上涨、商铺租金上涨及消费升级对便利性需求增加等原因，智能自动贩卖机正步入成长期。</p><p>近年来，线下业态/场景拓展的变迁演化主要体现在线下传统商户向商业形态变迁以及销售渠道拓展两个方向，并依此方向衍生出四种主要模式：</p><ol><li><strong>餐饮零售化</strong>，传统餐饮企业将餐饮食品打造为可零售贩卖的商品，以拳头产品延伸发展零售化商品。例如，海底捞的火锅底蘸料等产品，星巴克的咖啡豆等；</li><li><strong>场景拓展</strong>，传统零售店从线下渠道向线上线下同步融合发展，例如全家便利等；</li><li><strong>跨界融合</strong>，从单纯零售发展为融合餐饮、服务等其他业态的多元线下门店，例如超级物种等；</li><li><strong>全渠道一站式消费体验</strong>，既向多业态融合发展，又向多渠道融合发展——即基于物流和外卖能力进行线下拓展，实现餐饮+零售+到家配送业务的全方位融合服务。</li></ol><h3><span id="零售企业的智胜之道"> 零售企业的“智”胜之道</span></h3><p>在新的零售格局之下，了解消费者全方位、多场景下的个性化需求，是决定零售企业能否在未来占有一席之地的核心所在。因此，建议零售企业从以下三个方面做好准备，“智”胜未来。</p><p>第一，<strong>以线上线下融合，建立流量壁垒</strong>。零售业态新格局下，企业通过打造线上线下的无界融合，以消费者需求为核心，实现线上服务与线下场景的全渠道无缝融合，增加消费者触点及捕获需求，在增大消费者覆盖面的同时，全面提升用户体验，从而建立未来企业核心竞争力之流量壁垒。</p><p>第二，<strong>以赋能合纵连横，构建生态平台</strong>。新的零售格局中，协作和智能是两个核心关键因素。早期企业都习惯于采取单兵突围战术，通过不断扩大但依然有限的内部资源、能力和时间，力求在全链条提升话语权或控制力，从而通过降低成本或以差异化竞争，获取市场竞争的胜利。</p><p>但在当前大环境中，信息和需求变得多元、动态、复杂、模糊，无论是哪一类企业，都需要理解生态边界以及自己在生态内的定位。因此，与其单兵作战，不如合众家之力，共同构建有自身造血能力并有输血实力的生态系统，实现生态内互惠互利，服务于快速变化的消费者的多元化需求，打造集合各方资源的生态联合平台，快速拓展流量与边界，加强零售体系整体的竞争力。</p><p>第三，<strong>以数据重塑管理模式，革故鼎新</strong>。价值管理学教会我们通过管理优化，尽可能地最大化交易价值。零售企业历经百年，由于市场/消费者/价值链/品类的延伸及市场竞争环境的变化，通过管理优化和运营优化，保持企业的竞争力依然是这个时代最重要的话题之一，也是企业生存和发展的根基所在。</p><p>数字经济时代，企业的核心价值将从最初的交易价值，转向通过交易价值和数据价值获取现金及利润，并最终形成以数据价值与衍生价值为利润核心。可能会出现更多的后向收费模式。</p><p>“智”胜未来将是每一个零售企业都需要面临的重要抉择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;新零售企业智胜未来&quot;&gt; 新零售企业“智胜”未来&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;最近看到一篇蛮有趣的&lt;a href=&quot;http://www.hbrchina.org/2019-02-13/7147.html&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>产品经理有哪些分类？</title>
    <link href="https://darerd.github.io/2019/03/21/%E9%9A%8F%E6%83%B3-%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%9C%89%E5%93%AA%E4%BA%9B%E5%88%86%E7%B1%BB%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/21/随想-产品经理有哪些分类？/</id>
    <published>2019-03-21T11:37:11.000Z</published>
    <updated>2019-03-21T11:38:22.062Z</updated>
    
    <content type="html"><![CDATA[<p><strong>产品经理有哪些细分领域，对应特点是什么？</strong></p><hr><p><strong>问：</strong>   产品经理有哪些细分领域，对应特点是什么？</p><p><strong>答：</strong>   可以分为以下几个方面回答：</p><p>1：产品经理的细分领域； 2：不同类型产品经理的岗位要求。</p><hr><blockquote><p>产品经理—Product Manager (简称为PM)   负责市场调查并根据用户的需求，确定开发何种产品，选择何种业务模式、商业模式等。并推动相应产品的开发组织，<strong>ta</strong>还要根据产品的生命周期，协调研发、营销、运营等，确定和组织实施相应的产品策略，以及其他一系列相关的产品管理活动。</p></blockquote><hr><p>1：产品经理的细分领域</p><ol><li>按用户类型分：</li></ol><p>-To B 产品经理  -To C 产品经理</p><ol><li>按前后端分：</li></ol><p>-前端产品经理  -后端产品经理</p><ol><li>按工作内容分：</li></ol><p>-交互产品经理  -需求产品经理</p><p>-商业产品经理  -策略产品经理</p><p>-广告产品经理  -数据产品经理</p><ol><li>按设备分：</li></ol><p>-PC端产品经理 -移动端产品经理</p><p>-H5端产品经理 -小程序产品经理</p><ol><li>按行业分：</li></ol><p>-社交产品经理  -电商产品经理 -金融产品经理</p><p>-内容产品经理  -B2D产品经理    -工具产品经理</p><hr><p><mark>2：不同类型产品经理的岗位要求</mark></p><p>因为产品经理分类众多，下面只列举几个比较有代表性的</p><p>商业产品经理</p><p><img src="https://pic3.zhimg.com/v2-921ac767e19405295b51be5eb50b756e_b.png" alt="img"></p><p>广告产品经理</p><p><img src="https://pic2.zhimg.com/v2-f98beb9c759e64275da5fc2164056b49_b.png" alt="img"></p><p>数据产品经理</p><p><img src="https://pic3.zhimg.com/v2-1789079662a03313019174835e779e9a_b.png" alt="img"></p><p>策略产品经理(增长方向)</p><p><img src="https://pic3.zhimg.com/v2-1789079662a03313019174835e779e9a_b.png" alt="img"></p><p>小程序产品经理(政务类)</p><p><img src="https://pic4.zhimg.com/v2-3957d62ee1c6d5a8241004e807fea71b_b.png" alt="img"></p><hr><p>产品经理虽然脱胎于<em>P&amp;G</em>(宝洁)这一传统快消行业，但是随着互联网的不断发展与渗透，现在提到产品经理多指<em>互联网领域</em>。随着互联网行业的不断发展，产品经理的职位也越来越细化，每个人都涉及一个小领域，但是编者认为，产品经理最好的发展方向主要是两个：</p><ol><li><strong>增长黑客方向(技术与产品思维于一身)；</strong></li><li><strong>商业变现方向(完美平衡商业化和用户体验)。</strong></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;产品经理有哪些细分领域，对应特点是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问：&lt;/strong&gt;   产品经理有哪些细分领域，对应特点是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;   可以分为以下几个方面回答：&lt;/
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>上瘾：让用户养成使用习惯的四大产品逻辑|产品书单|第二期</title>
    <link href="https://darerd.github.io/2019/03/20/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95-%E3%80%8A%E4%B8%8A%E7%98%BE%E3%80%8B%EF%BC%9A%E8%AE%A9%E7%94%A8%E6%88%B7%E5%85%BB%E6%88%90%E4%BD%BF%E7%94%A8%E4%B9%A0%E6%83%AF%E7%9A%84%E5%9B%9B%E5%A4%A7%E4%BA%A7%E5%93%81%E9%80%BB%E8%BE%91-%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>https://darerd.github.io/2019/03/20/产品书单-《上瘾》：让用户养成使用习惯的四大产品逻辑-第二期/</id>
    <published>2019-03-20T14:29:47.000Z</published>
    <updated>2019-03-20T14:51:00.465Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="上瘾让用户养成使用习惯的四大产品逻辑"> 《上瘾》：让用户养成使用习惯的四大产品逻辑</span></h1><blockquote><p>每一位产品人都应该多看书，读好书<br>只有这样才能不断进步<br>形成自己的方法论</p></blockquote><p>本期推荐的书是《上瘾》：让用户养成使用习惯的四大产品逻辑</p><p>本书专为产品经理、设计师、市场销售人员、广告创意者打造，每一位跟用户行为打交道的人，都值得将其奉为案头必备指南。</p><hr><h3><span id="上瘾"> 《上瘾》</span></h3><p><code>author:[美]尼尔·埃亚尔 / [美] 瑞安·胡佛</code></p><p><img src="https://i.loli.net/2019/03/20/5c924fe23ceb7.png" alt=""></p><h4><span id="内容简介"> 内容简介</span></h4><p>——为什么我们会习惯性地点开某个App？</p><p>——这种使用习惯到底是如何养成的？</p><p>——为什么有些产品能让我们戒不掉，而其他的产品却不行？</p><p>——是否有什么秘诀能让用户对你的产品形成使用习惯，欲罢不能？</p><p>《上瘾》揭示了很多让用户形成使用习惯，甚至“上瘾”的互联网产品服务背后的基本设计原理，告诉你怎样打造一款让用户欲罢不能的产品。作者根据自己多年的研究、咨询及实际经验，提出了新颖而实用的“<strong>上瘾模型</strong>”（Hook Model），即通过四个方面来养成用户的使用习惯。通过连续的“上瘾循环”，让用户成为“回头客”，进而实现循环消费的终极目标，而不是依赖高昂的广告投入或泛滥粗暴的信息传播。</p><h4><span id="作者介绍"> 作者介绍</span></h4><p>尼尔·埃亚尔（Nir Eyal），曾在斯坦福大学商学院与Hasso Plattner研究所任教，并有多篇技术、心理学及商业文章在《哈佛商业评论》《大西洋月刊》、TechCrunch网站和《今日心理学》等媒体上发表。</p><p>瑞安·胡佛（Ryan Hoover），曾任撰稿人，长期为《福布斯》《快公司》等媒体撰稿，Product Hunt公司创始人。</p><h4><span id="目录"> 目录</span></h4><p><img src="https://i.loli.net/2019/03/20/5c9251d59a1aa.png" alt=""></p><h4><span id="下载地址"> 下载地址</span></h4><p>关注微信公众号：<strong>产品汪darer</strong>，后台回复关键词：<strong>上瘾</strong>，即可下载</p><p>如果想要目录的<strong>思维导图</strong>，后台留言：<strong>上瘾，我全都要</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;上瘾让用户养成使用习惯的四大产品逻辑&quot;&gt; 《上瘾》：让用户养成使用习惯的四大产品逻辑&lt;/span&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;每一位产品人都应该多看书，读好书&lt;br&gt;
只有这样才能不断进步&lt;br&gt;
形成自己的方法论&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="产品书单" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
    
      <category term="产品书单" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>HuPu商业化困境</title>
    <link href="https://darerd.github.io/2019/03/20/%E9%9A%8F%E6%83%B3-HuPu%E5%95%86%E4%B8%9A%E5%8C%96%E5%9B%B0%E5%A2%83/"/>
    <id>https://darerd.github.io/2019/03/20/随想-HuPu商业化困境/</id>
    <published>2019-03-20T14:02:14.000Z</published>
    <updated>2019-03-25T04:02:01.475Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="虎扑的商业化困局"> 虎扑的商业化困局</span></h1><h3><span id="用户体验"> 用户体验</span></h3><p><strong>一句话：取消发帖门槛后，垃圾贴、卖片贴丛生</strong></p><h3><span id="数据"> 数据</span></h3><p><img src="https://i.loli.net/2019/03/20/5c91c938f17c7.gif" alt=""></p><p>体育资讯排名对比</p><p><img src="https://i.loli.net/2019/03/20/5c91c95c578d2.png" alt=""></p><p>用户画像对比，都是直男额</p><p><img src="https://i.loli.net/2019/03/20/5c91c8bdad47f.png" alt=""></p><p><img src="https://i.loli.net/2019/03/20/5c91c8d4d6289.png" alt=""></p><p>百度指数</p><p>百度指数和Talkigdata的数据有些出入，两者对比，关注懂球帝的中年人更多</p><p><img src="https://i.loli.net/2019/03/20/5c91ca157a41f.png" alt=""></p><p><img src="https://i.loli.net/2019/03/20/5c91ca29caa80.png" alt=""></p><p>从数据看，虎扑现在是后有追兵，一家独大的地位受到了冲击，用户流失会不断增加</p><p>从定位来看，两者仍有不同，虎扑定位是Jrs社区，偏向UGC（用户分享内容），随着发帖权限的开放，内容质量越来越低，有逐渐脱离体育的本质，往日常生活社区发展，比如虎扑步行街的流量极大。</p><p>懂球帝定位是体育类深度资讯，从名字的“懂”就可以看出，偏向PGC（专业人士认识分享内容），从人群属性可以看到，懂球帝中年龄在30岁以上的用户较多，这部分年龄的人阅历更加丰富，更为专业。下面这个图更可以说明情况：</p><p><img src="https://i.loli.net/2019/03/20/5c91cded62dfa.png" alt=""></p><p>懂球号自媒体平台</p><p>最近也很明显感觉到虎扑上优质球评的帖子越来越少，撕逼贴越来越多</p><p>假以时日，失去了PGC江山的虎扑，定会在撕逼灌水社区中越走越远，历史证明这样的发展之路活不了，贴吧的没落就是很好的证据。</p><h3><span id="融资情况"> 融资情况</span></h3><p><img src="https://i.loli.net/2019/03/20/5c91f120e16c7.png" alt=""></p><p>2007年成立的虎扑，现在也已经12岁了，在2015年D轮融资后，开始着手IPO，但是无疾而终。在2018年融资6.18亿，是目前中国体育领域单笔融资的最高纪录。从虎扑融资历史来看，IPO是不得不发的事，投资方需要融资收回投资成本，12岁的虎扑仍未上市，在互联网行业已是“大龄”。在2018年拿到融资后，虎扑也是动作频频，比如投资了电竟行业，虎扑直男和吴亦凡粉丝的大战等等，探索和拓展其商业化之路。</p><h3><span id="商业化"> 商业化</span></h3><h4><span id="透过版本迭代看商业化"> 透过版本迭代看商业化</span></h4><p>以下是2018融资后的几次重要版本迭代</p><h5><span id="版本-7116-2018年2月9日"> 版本 7.1.16 (2018年2月9日)</span></h5><ol><li>可以在底部「社区」里看视频了；</li><li>在个人主页可以看自己的声望了，声望代表你对社区的贡献；</li></ol><blockquote><p>增加 视频 这一媒介，</p></blockquote><h5><span id="版本-7120-2018年5月5日"> 版本 7.1.20 (2018年5月5日)</span></h5><ol><li>「比赛」页面增加绝地求生比赛，祝虎扑签约战队 iFTY、17和4AM天天吃鸡</li><li>「社区」-「视频」页面增加分类，查找视频更快更方便</li></ol><blockquote><p>发力 电竞</p></blockquote><h5><span id="版本-720-2018年6月13日"> 版本 7.2.0 (2018年6月13日)</span></h5><ol><li>首页新增个性化「热门」页面，聚合新闻、帖子、视频、亮评等各种内容，刷也刷不完</li></ol><blockquote><p>设计了类似 头条 的新闻聚合</p></blockquote><h5><span id="版本-7210-2018年9月9日"> 版本 7.2.10 (2018年9月9日)</span></h5><ol><li>新增了「首页」-「视频」列表，给你推荐喜欢的内容</li></ol><h5><span id="版本-730-2018年10月12日"> 版本 7.3.0 (2018年10月12日)</span></h5><ol><li>重新设计了界面样式，疯狂提升交互体验</li><li>视频页支持向上滑动查看更多视频</li><li>新增「装备」首页，可查询球鞋发售日历</li></ol><blockquote><p>结合虎扑旗下”识货“app 发力电商</p></blockquote><p>从版本迭代可以看到，虎扑在往泛娱乐化社区倾斜（增加视频和新闻聚合）；新增装备页面，为自家电商引流。</p><h4><span id="商业化的三驾马车"> 商业化的三驾马车</span></h4><ol><li>虎扑社区</li></ol><p>取消发帖门槛，继续深耕社区发展，坐拥大流量，广告是其主要收入</p><blockquote><p>据其2016年递交的招股书，虎扑从2013年到2015年的营业收入分别为0.98亿元、1.4亿元、2亿元。尽管在资本市场，广告业务听上去没那么吸引人，但它目前是虎扑最大的收入来源。2013年到2015年，虎扑的广告收入分别达到5473.57万元、7860.13万元和1.22亿元，占比由55.64%上升至60.78%</p></blockquote><ol start="2"><li>电商变现</li></ol><p>结合体育，做电商（“识货”APP）</p><blockquote><p>识货”在2012年6月上线，早期做的事情类似“淘宝客”——把虎扑用户导流到淘宝商城购买商品，虎扑从中抽取佣金，平均返点比例在6%-8%。到了2016年，“识货”开始尝试自营。截至2017年12月31日，“识货”共完成商品交易总量20亿元，2017年营收额在1.2-1.6亿元之间。在虎扑的总收入中，这部分营业收入占比超过三分之一。</p></blockquote><ol start="3"><li>体育IP开发</li></ol><p>开发路人王赛事</p><h3><span id="困局"> 困局</span></h3><p>虎扑最大护城河是其粉丝，是所谓的Jrs</p><p>但是如果虎扑走上娱乐化的倾斜道路，势必会偏离体育社区的本质，那么这个时候用户是否会买账呢？</p><p>用户是忠于虎扑Jrs这个品牌？还是忠于体育社区这个产品呢？</p><p>是彻底走上泛娱乐化的道路，为电商拓宽流量来源，还是回归专业体育社区，寻找尚不明晰的盈利路径？</p><p>这是虎扑最大的困局</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;虎扑的商业化困局&quot;&gt; 虎扑的商业化困局&lt;/span&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;span id=&quot;用户体验&quot;&gt; 用户体验&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一句话：取消发帖门槛后，垃圾贴、卖片贴丛生&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span 
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>常用网站导航</title>
    <link href="https://darerd.github.io/2019/03/19/@%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E5%AF%BC%E8%88%AA/"/>
    <id>https://darerd.github.io/2019/03/19/@常用网站导航/</id>
    <published>2019-03-19T13:35:57.000Z</published>
    <updated>2019-03-28T03:25:27.312Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="网站汇总不定时更新"> 网站汇总（不定时更新）😏</span></h1><h3><span id="0-网站导航"> 0. 网站导航</span></h3><p>👉<a href="http://pmgeek.net/cn/index.html#" target="_blank" rel="noopener">PMGEEK</a>👉<a href="https://dh.woshipm.com/" target="_blank" rel="noopener">阿猫阿狗导航</a>👉<a href="http://www.chuangzaoshi.com/product" target="_blank" rel="noopener">创造狮</a></p><h3><span id="1-资讯"> 1. 资讯</span></h3><p>👉<a href="https://www.cnbeta.com/" target="_blank" rel="noopener">cnBeta</a>👉<a href="http://www.donews.com/" target="_blank" rel="noopener">DONEWS</a>👉<a href="https://www.bnext.com.tw/" target="_blank" rel="noopener">数位时代</a>👉<a href="https://www.solidot.org" target="_blank" rel="noopener">科技行者</a></p><h3><span id="2-博客"> 2. 博客</span></h3><p>👉<a href="http://mindhacks.cn" target="_blank" rel="noopener">刘未鹏</a>👉<a href="https://coolshell.cn" target="_blank" rel="noopener">酷壳</a></p><h3><span id="3-社区"> 3. 社区</span></h3><p>👉<a href="http://www.woshipm.com/" target="_blank" rel="noopener">产品经理</a>👉<a href="https://coffee.pmcaff.com/" target="_blank" rel="noopener">PMCAFF</a>👉<a href="https://www.v2ex.com" target="_blank" rel="noopener">V2EX</a>​</p><h3><span id="4-管理"> 4. 管理</span></h3><p>👉<a href="http://www.hbrchina.org/" target="_blank" rel="noopener">哈佛商业评论</a>👉<a href="http://wiki.mbalib.com" target="_blank" rel="noopener">MBA智库</a></p><h3><span id="5-数据分析"> 5. 数据分析</span></h3><p>👉<a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">国家数据</a>👉<a href="https://data.worldbank.org.cn/" target="_blank" rel="noopener">世界银行公开数据</a>👉<a href="http://mi.talkingdata.com/" target="_blank" rel="noopener">移动观象台</a>👉<a href="http://index.baidu.com/#/" target="_blank" rel="noopener">百度指数</a>👉<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">天眼查</a>👉<a href="http://www.iresearch.com.cn/" target="_blank" rel="noopener">艾瑞数据</a>👉<a href="https://www.appannie.com/account/login/?next=/apps/ios/matrix/" target="_blank" rel="noopener">APP Annie</a>👉<a href="https://www.qimai.cn/" target="_blank" rel="noopener">七麦</a></p><h3><span id="6-投融资"> 6. 投融资</span></h3><p>👉<a href="http://www.cyzone.cn/" target="_blank" rel="noopener">创业邦</a>👉<a href="http://www.iheima.com/" target="_blank" rel="noopener">i黑马</a>👉<a href="http://www.chuangxin.com/" target="_blank" rel="noopener">创新工场</a></p><h3><span id="7-产品资源"> 7. 产品资源</span></h3><p>👉<a href="http://www.axure.org/forum-28-1.html" target="_blank" rel="noopener">产品原型设计</a>👉<a href="http://www.uedart.com/demo.html" target="_blank" rel="noopener">产品文档规范</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;网站汇总不定时更新&quot;&gt; 网站汇总（不定时更新）😏&lt;/span&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;span id=&quot;0-网站导航&quot;&gt; 0. 网站导航&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;👉&lt;a href=&quot;http://pmgeek.net/cn/index.html
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过上瘾模型分析虎扑是怎么让你一步步上瘾的</title>
    <link href="https://darerd.github.io/2019/03/18/%E9%9A%8F%E6%83%B3-%E9%80%9A%E8%BF%87%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90%E8%99%8E%E6%89%91%E6%98%AF%E6%80%8E%E4%B9%88%E8%AE%A9%E4%BD%A0%E4%B8%80%E6%AD%A5%E6%AD%A5%E4%B8%8A%E7%98%BE%E7%9A%84/"/>
    <id>https://darerd.github.io/2019/03/18/随想-通过上瘾模型分析虎扑是怎么让你一步步上瘾的/</id>
    <published>2019-03-18T14:49:48.000Z</published>
    <updated>2019-03-18T14:53:41.830Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="通过上瘾模型分析虎扑是怎么让你一步步上瘾的"> 通过上瘾模型分析虎扑是怎么让你一步步上瘾的</span></h1><p><strong>上瘾模型的四个阶段：触发、行动、多变的酬赏和投入。</strong></p><ul><li>**第一阶段：**引发用户去使用你的产品，这叫作“<strong>触发</strong>”。</li><li><strong>第二阶段：行动</strong>。行动要兼具动机和能力，有了动机，还需要用户的能力足够完成行为。</li><li><strong>第三阶段：<strong>给用户</strong>多变的酬赏</strong>。所谓多变的酬赏，就是指酬赏要有不可预期性。</li><li><strong>第四阶段：<strong>是让用户在产品上进行越来越多的</strong>投入</strong>。用户与产品亲密接触得越多，沉没成本就越大，也就越离不开它。</li></ul><p><img src="https://i.loli.net/2019/03/18/5c8f6edc49a3a.png" alt=""></p><p>我们用<strong>上瘾模型</strong>看一看虎扑是怎么让你一步步上瘾的</p><ol><li><p><strong>第一阶段：触发</strong></p><p><strong>外部触发</strong></p><p>朋友推荐、虎扑的营销推广（比如，去年的kris吴事件）</p><p><strong>内部触发</strong></p><p>正在寻找一个专业看球平台、即时资讯（能得到更多关于NBA的讯息）</p></li><li><p><strong>第二阶段：行动</strong></p><blockquote><p>福格认为，要使人们行动起来，三个要素必不可少。<br>第一，充分的动机；第二，完成这一行为的能力；第三，促使人们付诸行动的触发。</p></blockquote><p><strong>动机：</strong></p><p>正在寻找专业的看球平台，更快的了解到NBA的讯息</p><p><strong>能力：</strong></p><p>虎扑的下载、注册和使用都非常简单，这一过程完全没有阻碍</p><p><img src="https://i.loli.net/2019/03/18/5c8f7b9521f60.gif" alt=""></p></li><li><p><strong>第三阶段：多变的酬赏</strong></p><blockquote><p>驱使我们采取行动的，并不是酬赏本身，而是<strong>渴望酬赏时产生的那份迫切需要</strong>。</p></blockquote><p>还记得自己为什么要下载虎扑吗？<code>专业看球平台、即时资讯（能得到更多关于NBA的讯息）</code></p><p><strong>酬赏1：</strong></p><p>满足你下载的目的（虎扑的护城河之一）<code>专业看球平台、即时资讯（能得到更多关于NBA的讯息）</code></p><p><strong>酬赏2：</strong></p><p>高质量的赛后分析贴，让自己更加懂球，更加懂比赛</p><p><strong>酬赏3：</strong></p><p>虎扑社区里<strong>JRs</strong>的氛围，步行街上有趣而温暖的帖子</p><p><strong>酬赏4：</strong>（最不容易被注意）</p><p>比你的朋友知道多一点，得到朋友们的认可和赞赏</p><p>这也就是<strong>渴望酬赏时产生的那份迫切需要</strong></p></li><li><p><strong>第三阶段：投入</strong></p><p><strong>投入1：</strong></p><p>更加关心比赛时间，结果和赛后采访、资讯和赛后分析</p><p><strong>投入2：</strong></p><p>对论坛优秀帖子的转发、收藏、点赞</p><p><strong>投入3：</strong></p><p>无意间又打开了虎扑，分配了更多的时间</p></li></ol><hr><p>现在你可以利用上瘾模型询问自己关于如何让用户上瘾的五个基本问题：</p><ol><li>用户真正需要什么？你的产品可以缓解什么样的痛苦？（内部触发）</li><li>你靠什么吸引用户使用你的服务？（外部触发）</li><li>期待酬赏的时候，用户可采取的最简单的操作行为是什么？如何简化产品使该操作行为更轻松容易？（行动）</li><li>用户是满足于所得酬赏，还是想要更多酬赏？（多变的酬赏）</li><li>用户对你的产品做出了哪些“点滴投入”？这些投入是否有助于加载下一个触发并储存价值，使产品质量在使用过程中获得提升？（投入）</li></ol><hr><p>在相同条件下，满足用户的群体价值（让用户在群体中发光）比仅满足用户的个人价值（比如，给用户金钱奖励）更有用。</p><p><strong>人生来就希望被认可</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;通过上瘾模型分析虎扑是怎么让你一步步上瘾的&quot;&gt; 通过上瘾模型分析虎扑是怎么让你一步步上瘾的&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;上瘾模型的四个阶段：触发、行动、多变的酬赏和投入。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**第一阶段：**
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Test23-学习面向对象术语</title>
    <link href="https://darerd.github.io/2019/03/16/Test23-%E5%AD%A6%E4%B9%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%9C%AF%E8%AF%AD/"/>
    <id>https://darerd.github.io/2019/03/16/Test23-学习面向对象术语/</id>
    <published>2019-03-16T13:52:09.000Z</published>
    <updated>2019-03-17T13:53:34.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节学习面向对象术语</p><p>[TOC]</p><h3><span id="单词练习"> 单词练习</span></h3><ul><li>类（<code>class</code>）：告诉<code>python</code>创建新类型的东西</li><li>对象（<code>object</code>）：两个意思，即最基本的东西，或者某个东西的实例</li><li>实例（<code>instance</code>）：让<code>python</code>创建一个时得到的东西</li><li><code>def</code>：创建函数</li><li><code>self</code>：在类的函数中，<code>self</code>指代被访问的对象或者实例的一个变量</li><li>继承（<code>inheritance</code>）：指一个类可以继承另一个类的特性，和父子关系类似</li><li>组合（<code>composition</code>）：指一个类可以将别的类作为它的部件构建起来，有点像车子和车轮的关系</li><li>属性（<code>attribute</code>）：类的一个属性，它来自于组合，而且通常是一个变量</li><li>是什么（<code>is-a</code>）：用来描述继承关系，如Salmon is-a Fish（鲑鱼是一种鱼）</li><li>有什么（<code>has-a</code>）：用来描述某个东西是由另外一些东西组成的，或者某个东西有某个特征，如Salmon has-a mouth（鲑鱼有一张嘴）</li></ul><h3><span id="语汇练习"> 语汇练习</span></h3><ol><li><code>class X(Y)</code>：创建一个叫<code>X</code>的类，它是<code>Y</code>的一种</li><li><code>class X(object):def_init_(self,J)</code>：类<code>X</code>有一个<code>_init_</code>接收<code>self</code>和<code>J</code>作为参数</li><li><code>class X(object):def M(self,J)</code>：类<code>X</code>有一个函数名称为<code>M</code>，它接收<code>self</code>和<code>J</code>作为参数</li><li><code>foo=X()</code>:将<code>foo</code>设为类<code>X</code>的一个实例</li><li><code>foo.M(J)</code>:从<code>foo</code>中找到<code>M</code>函数，并使用<code>self</code>和<code>J</code>参数调用它</li><li><code>foo.K=Q</code>：从<code>foo</code>中获取<code>K</code>属性，并将其设为<code>Q</code></li></ol><p>每一条中，你看到<code>X、Y、M、J、K、Q及foo</code>的地方，都可以将它们当作空白点来对待。例如，可以将句子写成下面这样</p><ol><li>创建一个叫<code>???</code>的类，它是<code>Y</code>的一种</li><li>类<code>???</code>有一个<code>_init_</code>，能接收<code>self</code>和<code>???</code>作为参数</li><li>类<code>???</code>有一个函数名称为<code>???</code>，可以接收<code>self</code>和<code>???</code>作为参数</li><li>将<code>foo</code>设为<code>class ???</code>的一个实例</li><li>从<code>foo</code>中找到<code>???</code>函数，并使用<code>self</code>和<code>???</code>参数调用它</li><li>从<code>foo</code>中获取<code>???</code>属性，并将其设为<code>???</code></li></ol><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex41.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">WORD_URL=<span class="string">"http://learncodethehardway.org/words.txt"</span></span><br><span class="line">WORDS=[]</span><br><span class="line"></span><br><span class="line">PHRASES=&#123;</span><br><span class="line">    <span class="string">"class %%%(%%%):"</span>:</span><br><span class="line">     <span class="string">"Make a class named %%% that is-a %%%."</span>,</span><br><span class="line">    <span class="string">"class %%%(object):\n\tdef _init_(self,***)"</span>:</span><br><span class="line">     <span class="string">"class %%% has-a _init_ that takes self and *** parameters."</span>,</span><br><span class="line">    <span class="string">"class %%%(object):\n\tdef ***(self, @@@)"</span>:</span><br><span class="line">     <span class="string">"class %%% has-a function named *** that takes self and @@@ parameters."</span>,</span><br><span class="line">    <span class="string">"***=%%%()"</span>:</span><br><span class="line">     <span class="string">"Set *** to an instance of class %%%."</span>,</span><br><span class="line">    <span class="string">"***.***(@@@)"</span>:</span><br><span class="line">     <span class="string">"From *** get the *** function, and call it with parameters self,@@@."</span>,</span><br><span class="line">    <span class="string">"***.***='***'"</span>:</span><br><span class="line">     <span class="string">"From *** get the *** attribute and set it to '***'."</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># do they want to drill phrases first</span></span><br><span class="line">PHRASES_FIRST=<span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> len (sys.argv)==<span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>]==<span class="string">"english"</span>:</span><br><span class="line">    PHRASES_FIRST=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load up the words from the website</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> urlopen(WORD_URL).readlines():</span><br><span class="line">    WORDS.append(word.strip())</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(snippet,phrase)</span>:</span></span><br><span class="line">    class_names=[w.capitalize() <span class="keyword">for</span> w <span class="keyword">in</span></span><br><span class="line">                random.sample(WORDS,snippet.count(<span class="string">"%%%"</span>))]</span><br><span class="line">    other_names=random.sample(WORDS,snippet.count(<span class="string">"***"</span>))</span><br><span class="line">    results=[]</span><br><span class="line">    param_names=[]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,snippet.count(<span class="string">"@@@"</span>)):</span><br><span class="line">        param_count=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">        param_names.append(<span class="string">','</span>.join(random.sample(WORDS,param_count)))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> sentence <span class="keyword">in</span> snippet,phrase:</span><br><span class="line">        result=sentence[:]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># fake class names</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> class_names:</span><br><span class="line">            result=result.replace(<span class="string">"%%%"</span>,word,<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># fake other names</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> other_names:</span><br><span class="line">            result=result.replace(<span class="string">"***"</span>,word,<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># fake parameter lists</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> param_names:</span><br><span class="line">            result=result.replace(<span class="string">"@@@"</span>,word,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        results.append(result)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">    </span><br><span class="line"><span class="comment"># keep going until they hit CTRL-D</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        snippets=PHRASES.keys()</span><br><span class="line">        random.shuffle(snippets)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> snippet <span class="keyword">in</span> snippets:</span><br><span class="line">            phrase=PHRASES[snippet]</span><br><span class="line">            question,answer=convert(snippet,phrase)</span><br><span class="line">            <span class="keyword">if</span> PHRASES_FIRST:</span><br><span class="line">                question,answer=answer,question</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">print</span> question</span><br><span class="line">            </span><br><span class="line">            raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"ANSWER: %s\n\n"</span> %answer</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nBye"</span></span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/16/5c8d0d809c5b9.png" alt=""></p><h3><span id="代码解释"> 代码解释</span></h3><blockquote><p>目前能力不够，不能完全解释和理解每一段代码的作用</p><p>下面仅介绍部分需要注意的知识</p></blockquote><ol><li>Python异常处理</li></ol><p>最后一段用<code>try/except</code>语句来检测异常</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;：</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在try部份引发了'name'异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果引发了'name'异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果没有异常发生</span></span><br></pre></td></tr></table></figure><p><code>try</code>的工作原理是，当开始一个<code>try</code>语句后，<code>python</code>就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，<code>try</code>子句先执行，接下来会发生什么依赖于执行时是否出现异常。</p><ul><li>如果当<code>try</code>后的语句执行时发生异常，<code>python</code>就跳回到<code>try</code>并执行第一个匹配该异常的<code>except</code>子句，异常处理完毕，控制流就通过整个<code>try</code>语句（除非在处理异常时又引发新的异常）。</li><li>如果在<code>try</code>后的语句里发生了异常，却没有匹配的<code>except</code>子句，异常将被递交到上层的<code>try</code>，或者到程序的最上层（这样将结束程序，并打印缺省的出错信息）。</li><li>如果在<code>try</code>子句执行时没有发生异常，<code>python</code>将执行<code>else</code>语句后的语句（如果有<code>else</code>的话），然后控制流通过整个<code>try</code>语句。</li></ul><p><a href="http://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">更多关于Python异常处理的资料</a></p><hr><blockquote><p>这是**《笨方法学Python》**的第二十三篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p><p>后面的内容多为《笨方法学Python》的实战了，更新会变慢了，也更难理解了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节学习面向对象术语&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
      
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
  </entry>
  
  <entry>
    <title>应届生：为何你的工资会比老员工高？</title>
    <link href="https://darerd.github.io/2019/03/16/%E9%9A%8F%E6%83%B3-%E5%BA%94%E5%B1%8A%E7%94%9F%EF%BC%9A%E4%B8%BA%E4%BD%95%E4%BD%A0%E7%9A%84%E5%B7%A5%E8%B5%84%E4%BC%9A%E6%AF%94%E8%80%81%E5%91%98%E5%B7%A5%E9%AB%98%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/16/随想-应届生：为何你的工资会比老员工高？/</id>
    <published>2019-03-16T06:02:20.000Z</published>
    <updated>2019-03-16T06:58:11.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在应届生市场上，**“倒挂”**是一个蛮普遍的现象(至少我身边的朋友多如此)</p><p>受到一位朋友的启发，在思考 <strong>为什么企业给应届生的工资会比去年入职的老员工高呢？</strong></p><p>最近看到这篇<a href="https://coffee.pmcaff.com/article/4AQgR9OeL2/?newwindow=1" target="_blank" rel="noopener">文章</a>，很受启发</p></blockquote><p><code>文章中的老员工指的是刚入职1-2年的员工</code></p><p><a href=""><strong>企业在雇佣员工时，就已经把未来增值的那部分钱提前包含在薪酬里了。</strong></a></p><p>企业在招人时，不光要考虑应聘者是否可以满足目前的需求，还要考虑是否能满足未来一段时间的需求。不然当员工跟不上企业发展时，再重新换人损失的成本就会更大（这部分成本可不仅仅是钱这么简单，还有时间成本、机会成本、内部磨合成本、培训成本等等）。</p><p><strong>这就意味着企业为应聘者开出的薪资待遇，有一部分是用来购买应聘者现在尚未具备（但未来可能会）的能力。</strong></p><p>所以我们可以将应届生薪资分成两部分：</p><ul><li>确定的部分：经验、个人能力、自身资源等</li><li>不确定的部分：未来的潜力（<strong>应届生的主要卖点</strong>）</li></ul><p>确定的部分会遵循当时的市场价，一分钱一分货<br>而对于不确定的部分，则需要企业进行评估</p><p>这时，就会出现应届生薪资高于老员工的情况。</p><p><strong>但需要注意的是，公司此时正在回收老员工身上的投资——在老员工身上所投入的购买潜力的成本。</strong></p><p>而应届生的投资回收，才刚刚开始。</p><p>对于老员工来说，薪资没有时刻跟随市场价增加，是不是就亏了？</p><p>不是的。</p><p>第一、企业帮员工抵御了市场价格波动风险——人才市场上的价格不会永远上升，也会有年景不好薪资下降的情况，但大多数企业只要盈利尚可，都不太可能出现降薪的情况。</p><p>第二、员工在工作过程中，经验和能力都在持续增加，当他再次在市场上询价时，也会得到更高的待遇报酬。</p><p>所以，我们身边常见的情况，就是新员工入职后，可能两三年收入没有大幅度上涨，但跳槽之后，薪水一下子就翻倍了。</p><p><img src="https://i.loli.net/2019/03/16/5c8c96a2f252d.png" alt=""></p><p><a href="">即使是收入停滞的阶段，个人的经验、能力也在持续上涨</a></p><p>这种交易模式，在过去是较为公平合理的，因为大多数行业的薪资短期（1-3年）内不会有特别大的变动。</p><p>但现在情况开始变得不太一样，一方面是通货膨胀的影响，另一方面是很多行业开始进入产业升级，市场竞争激烈，相关从业者的待遇在短时间内出现大幅度增长。(互联网公司就是一个典型)</p><p>可能今年你入职的时候价格是10K，到了明年应届生的价格就是15K，这就出现了<strong>倒挂</strong>的情况，属于市场竞争导致的结果（这种情况会造成部分的市场价值溢价）。</p><p>于是人才市场上出现了微妙的平衡：<strong>员工将已有的工作经验拿到市场上去变现，从而达到增加收入的目的；企业为了控制成本，也不会频繁调整员工的薪资。</strong></p><blockquote><p>很受启发，其实这也是一种投资</p></blockquote><p>这种情况在现阶段是较为合理且公平的方式：增加人才流动性，这样最终企业和个人都会在人才市场上，达到更好的供需平衡。</p><p>不过面对这样的情况，很多大企业还是进行薪资结构的调整（这类公司愿意为优秀人才付出更多成本），比如将薪资结构改为基础工资+绩效，保证「付出与回报对等」。每年进行全员薪资普调，避免人才流失。</p><blockquote><p>（但是，请记住，公司的调薪政策都是基于你入职时的薪资来决定的，且都是小幅调薪，不可能出现大幅度薪水猛涨的情况，因为从公司层面上讲，进行大幅度调薪政策所付出的管理成本远高于小范围人员流失。）</p></blockquote><p>最后再用几句话做个总结</p><ol><li>理论上，能力相同的老员工和应届生收入相差不会太大，但因为企业为应届生未来的潜力也买了单，导致应届生收入比老员工要多不少。</li><li>企业为员工的潜力先行买单，在员工之后一段时间内，会优先收回之前的投资成本（除非此人特别优秀，能为公司带来更大价值）。</li><li>员工的收入增长可以分成两个阶段，变现期与积累期。变现期就是刚入职的那会，已有的经验能力和潜力一起打包变现；积累期则是变现之后收入没有明显增长的时期，新老员工收入相差很大，就是因为新员工正处于变现期，而老员工则在积累期。（如下图）</li></ol><p><img src="https://i.loli.net/2019/03/16/5c8c999d75725.png" alt=""></p><p><a href="">新老员工在某一时间点处于不同阶段所造成的收入差</a></p><p><strong>对个人的启示</strong>(值得思考的四条职场建议)</p><ul><li><p>跳槽是增加收入的好办法，要谨慎把握机会。这一步没走好，会带来很多损失。</p></li><li><p>多关注市场行情，了解自己的身价，比起薪资成长空间更为重要，积累资本，才能在下一次变现期获得更多回报。</p></li><li><p>公司对你的期望，会在给你的待遇上直接体现出来，你拿到手多少钱，就说明你在公司眼里值多少钱。</p></li><li><p>老员工值钱的原因还是经验与能力的提升，如果工作时间长但能力没有上升，依然在市场上卖不出好价钱。</p></li></ul><p><strong>应届生薪资公式</strong></p><p><strong>应届生薪资=实际价值+市场溢价+潜力价值+学校品牌价值+学历价值</strong></p><p>实际价值：应聘岗位的市场价值</p><p>市场溢价：由于人才竞争等导致的薪酬提高，当然增加的薪资是符合市场规律的，但是如果过高，就如同房价一样，有泡沫了</p><p>潜力价值：面试表现，个人能力，思维等会提高自己的潜力价值，就是offer有sp、ssp的嘛</p><p>学校品牌价值：985和211的应届生薪资略有不同</p><p>学历价值：专科、本科、硕士薪资也不同</p><blockquote><p>真的非常感谢作者的这篇<a href="https://coffee.pmcaff.com/article/4AQgR9OeL2/?newwindow=1" target="_blank" rel="noopener">文章</a>，很受启发</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在应届生市场上，**“倒挂”**是一个蛮普遍的现象(至少我身边的朋友多如此)&lt;/p&gt;
&lt;p&gt;受到一位朋友的启发，在思考 &lt;strong&gt;为什么企业给应届生的工资会比去年入职的老员工高呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近看到这篇&lt;a href=
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别取厕纸的意义是啥？|产品问答|第2期</title>
    <link href="https://darerd.github.io/2019/03/15/%E9%97%AE%E7%AD%94-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%8E%BB%E5%8E%95%E7%BA%B8%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E5%95%A5%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/15/问答-人脸识别去厕纸的意义是啥？/</id>
    <published>2019-03-15T10:23:45.000Z</published>
    <updated>2019-03-15T11:02:18.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>产品人只有<code>不断思考、复盘，逐步形成自己方法论</code>，才能形成有效的护城河</p><p>俗话说：“三人行，必有我师”</p><p>产品人应该多看看同行对事情的理解和分析角度</p></blockquote><p><code>以下内容来自产品相关社区，如有侵权，请联系删除</code></p><p>[TOC]</p><h3><span id="q1在杭州火车站发现站内厕所有个人脸识别取手纸的终端一体机不知道人脸识别取手纸的意义是啥"> Q1:<strong>在杭州火车站发现站内厕所有个人脸识别取手纸的终端一体机，不知道人脸识别取手纸的意义是啥？</strong></span></h3><blockquote><p>主要功能：厕所入口处有个人脸识别取手纸的终端机，每10秒钟可以人脸识别取一次。不知道这样做有什么意义，虽然确实用上了黑科技。但是目的呢？统计多少个人用完一卷纸吗？感觉没有意义啊，顶多有个用完手纸通知打扫阿姨来补充纸就行了啊，难道是人脸识别一下让人有个危险意识已经录下你了不能浪费纸吗？（这个可以有，但是感觉用纸多少这个不用那么太在意吧）不过站内厕所外边有个男女厕所位使用状况实时统计展示显示大屏，这个倒是觉得还蛮好的，可以看到挤不挤，要不要进去之类的。你们觉得呢？</p></blockquote><p><code>author:泽度 @人人都是产品经理社区</code></p><p><strong>Answer</strong></p><p>无利不起早，企业做一个产品总有某些利益，无论是个体还是组织</p><ol><li><p>无金钱利益：单纯的理想，想做一件事(这种情况太少，而且缺乏目标性也往往难成)；</p></li><li><p>直接金钱利益：产品直接变现</p></li><li><p>间接金钱利益：政府补贴、资本投资、跨界合作等；</p></li><li><p>原始积累：商业探索、数据收集、运营积累等；</p></li></ol><p>根据你所提到的人脸识别取手指，成本不会低，这种很大程度是组织制作；</p><p>人脸数据库是在公安，在国家手里，那么多少也有国家支持；</p><p>产品很难直接商业变现，从目前市场分布来看还是在初期体验阶段；</p><p>由此，该产品更大可能是</p><p><strong>1. 政府背后支持；</strong></p><p><strong>2. 智能科技产品技术、应用探索，以及技术、数据、运营积累；</strong></p><p><strong>3. 可能存在的数据商业交易行为。</strong></p><p>注：某一事物对我们而言也许看起来没有太大价值，但存在即是合理，他或许对某些事物推动有所帮助，亦或者增加公职人员政绩这般。</p><blockquote><p>比较认可是政府推动，我觉得更多是弥补天网漏洞，对追踪疑犯很有帮助</p></blockquote><h3><span id="q2微信公众号的点赞到好看到在看你觉得哪个更契合场景"> Q2：<strong>微信公众号的“点赞”到“好看”到“在看”，你觉得哪个更契合场景？</strong></span></h3><blockquote><p>微信再次悄悄进行功能改动，即微信公众号文章右下角的“好看”换成了“在看”；同时，第一个点击文章“在看”的读者，在看一看中会有一个爱心图标，即：首个“在看”用户才会拥有爱心图标，其他用户可以为这个用户点赞，来作为感谢他分享的方式。</p><p>可是“在看”这个词非常有机械感，有种为什么要人来确认的感觉？</p><p><img src="https://static.woshipm.com/TTW_QUESTION_201903_20190315105729_0762.jpg" alt="img"></p></blockquote><p><code>author:迷宫小巷 @人人都是产品经理社区</code></p><p><strong>Answer</strong></p><p>估计是为了充实[看一看]栏目的内容，[看一看]里每天的文章屈指可数（可能是好友太少？）希望[看一看]能发挥一个以好友推荐为机制的内容分发渠道的作用。<br>如果用[好看]，文章质量通常要好到让用户发出wow~（8分以上吧） 才会驱使用户点下，让别人知道这才是我的品位 ，我觉得好看的文章都是精品（￣_,￣ ）<br>如果用[在看]，文章达到“哎呦还不错哦”的水准（≥6分吧）就足以让我点下了，“我在看这个耶，没有特别好但也值得一看，你要不要也看看？”</p><blockquote><p>提问的作者真的很仔细，没看到这个答案，自己还真的没有注意到这个细节，给提问者点赞</p><p>关于这个问题，自己很不理解，吃不透背后的心理逻辑</p></blockquote><h3><span id="q3为什么百度问答没有发展成知乎"> <strong>Q3:为什么百度问答没有发展成知乎？</strong></span></h3><blockquote><p>百度问答很早就有了，且最开始做的不错。</p><p>后来就被知乎掀翻了。</p><p>最开始知乎很专业，讨论比较小众</p><p>但是现在讨论的东西，和百度知道也差不多了</p></blockquote><p><code>author:连长 @人人都是产品经理社区</code></p><p>百度的入口是个问题，搜索本身面向的用户太宽泛，知道最开始也是通过搜索问答引入的，没有独立，这就很难界定内容的属性，大家搜的问题信息量大，面很广，也不够具体。另一点百度知道早期做的时候，互联网没现在这么复杂，而且很好的满足了大家的普遍的提问需求，当然了时间久了，流量稳定后，大部分用户开始借助这一渠道做推广，而知道的杂乱很难营造类似知乎这样的社区氛围，这个时候再想挽回也就很难了</p><blockquote><p>百度对知道的定位和维护是最大的问题吧</p><p>知道是百度的一个小产品，而知乎全部身家就是知识问答社区</p><p>公司对产品的重视自然不一样，资源倾斜也不同</p><p>此外，百度知道做大之后，维护跟不上，东西良秀不齐，会慢慢被营销充斥，这样贡献精品回答的少数人会渐生反感，逐渐被主打差异化的知乎、豆瓣的等挖走了，百度贴吧的没落也是如此</p><p>还有没有搭上移动互联网时代的大环境</p></blockquote><h3><span id="q3瑞幸-每日优鲜经常发券我理解货拉拉为啥也要发券"> Q3:<strong>瑞幸、每日优鲜经常发券我理解，货拉拉为啥也要发券？</strong></span></h3><blockquote><p>前段时间搬家所以下载了货拉拉，结果发现这段时间他每隔几天就给我推送“XX元门槛优惠券已入账，用卷下单更优惠哦~~~”频率堪比瑞幸咖啡给我送券。可是这不是个拉货的APP吗！就算是便宜了，我没货也不可能变出来货啊！！那发优惠券是为了干嘛？促活的话感觉也达不到啊</p><p><img src="https://static.woshipm.com/YY_A_20190313_1552460998597039359.jpg" alt="img"></p></blockquote><p><code>author:魏雅 @人人都是产品经理社区</code></p><p>我认为是可以促活的，大多数人运货频率不会很高，属于临时刚性需求。其实说刚性都勉强了因为一方面竞品多另一方面有的时候将就将就货也能拉回去没必要叫货拉拉。</p><p>所以这时候不断的推送优惠券一方面加深对品牌的印象，另一方面在用户心理种草“我很优惠”“用我划算”。</p><p>这样用户要用的时候，第一时间就想起来，我要用拉货软件，并且我要用货拉拉！</p><blockquote><p>首先，下载了app的用户，自然是存在需求的潜在用户</p><p>利用人的趋利心理，当你再次想拉货时，你第一回答、反应就是我要用货啦啦，占据用户的心智</p><p>敢肯定货啦啦一定会出分享好友会免单等营销行为</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;产品人只有&lt;code&gt;不断思考、复盘，逐步形成自己方法论&lt;/code&gt;，才能形成有效的护城河&lt;/p&gt;
&lt;p&gt;俗话说：“三人行，必有我师”&lt;/p&gt;
&lt;p&gt;产品人应该多看看同行对事情的理解和分析角度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code
      
    
    </summary>
    
      <category term="产品问答" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E9%97%AE%E7%AD%94/"/>
    
    
      <category term="产品问答" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E9%97%AE%E7%AD%94/"/>
    
  </entry>
  
  <entry>
    <title>Test22-Python中字典、模块等的知识入门</title>
    <link href="https://darerd.github.io/2019/03/13/Test22-Python%E4%B8%AD%E5%AD%97%E5%85%B8%E3%80%81%E6%A8%A1%E5%9D%97%E7%AD%89%E7%9A%84%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/"/>
    <id>https://darerd.github.io/2019/03/13/Test22-Python中字典、模块等的知识入门/</id>
    <published>2019-03-13T07:08:33.000Z</published>
    <updated>2019-03-13T07:30:29.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>上一期，我们学期了<code>字典(dictionary)</code>这个知识</p><p>因为后面要学习<code>面向对象的编程：OOP</code>，为了更好的学习和理解<code>OOP</code>的知识</p><p>这一期，先学习下<code>字典</code>和<code>模块</code>的知识</p><a id="more"></a><p>[TOC]</p><h3><span id="字典dictionary"> 字典(dictionary)</span></h3><p>字典是一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值 <strong>key=&gt;value</strong> 对用冒号 <strong><code>:</code></strong> 分割，每个键值对之间用逗号 <strong><code>,</code></strong> 分割，整个字典包括在花括号 <strong><code>{}</code></strong> 中 ,格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><strong>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一</strong><br><strong>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dict = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="string">'3'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict[<span class="string">'b'</span>]</span><br><span class="line"><span class="string">'3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="string">'3'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组</strong></p><blockquote><p>谈一下我的理解，不一定正确</p><p>上面所说的<strong>键</strong>，也就是<code>key</code>。要求其是唯一的，不可重复<br>很想软件注册时的<strong>用户名</strong>，要求不能和他人重复，且一般只能用数字、字母和下划线注册<br>这样理解虽然不准确，可能会易懂一些</p></blockquote><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">###输出结果</span></span><br><span class="line">dict[<span class="string">'Name'</span>]:  Zara</span><br><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>修改字典的内容</strong></p><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"RUNOOB"</span> <span class="comment"># 添加</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">###输出结果</span></span><br><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">8</span></span><br><span class="line">dict[<span class="string">'School'</span>]:  RUNOOB</span><br></pre></td></tr></table></figure><p><strong>删除字典元素</strong></p><p>能删单一的元素也能清空字典，清空只需一项操作</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>]  <span class="comment"># 删除键是'Name'的条目</span></span><br><span class="line">dict.clear()      <span class="comment"># 清空词典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict          <span class="comment"># 删除词典</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>] </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>]</span><br></pre></td></tr></table></figure><h3><span id="模块"> 模块</span></h3><p>Python 模块(<code>Module</code>)，是一个 Python 文件，以 <code>.py</code>结尾，包含了 Python 对象定义和Python语句。</p><p>模块让你能够有逻辑地组织你的 Python 代码段。</p><p>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><p><strong>模块的引入用<code>import</code>语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]]</span><br></pre></td></tr></table></figure><p>比如要引用模块 <code>math</code>，就可以在文件最开始的地方用 <strong><code>import math</code></strong> 来引入。在调用 <code>math</code> 模块中的函数时，必须这样引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模块名.函数名</span><br></pre></td></tr></table></figure><hr><blockquote><p>这是**《笨方法学Python》**的第二十二篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一期，我们学期了&lt;code&gt;字典(dictionary)&lt;/code&gt;这个知识&lt;/p&gt;
&lt;p&gt;因为后面要学习&lt;code&gt;面向对象的编程：OOP&lt;/code&gt;，为了更好的学习和理解&lt;code&gt;OOP&lt;/code&gt;的知识&lt;/p&gt;
&lt;p&gt;这一期，先学习下&lt;code&gt;字典&lt;/code&gt;和&lt;code&gt;模块&lt;/code&gt;的知识&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
  </entry>
  
  <entry>
    <title>《运营之光》：据说每一位运营喵都看过|产品书单|第二期</title>
    <link href="https://darerd.github.io/2019/03/13/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95-%E3%80%8A%E8%BF%90%E8%90%A5%E4%B9%8B%E5%85%89%E3%80%8B%EF%BC%9A%E6%8D%AE%E8%AF%B4%E6%AF%8F%E4%B8%80%E4%BD%8D%E8%BF%90%E8%90%A5%E5%96%B5%E9%83%BD%E7%9C%8B%E8%BF%87-%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>https://darerd.github.io/2019/03/13/产品书单-《运营之光》：据说每一位运营喵都看过-第二期/</id>
    <published>2019-03-13T03:51:48.000Z</published>
    <updated>2019-03-13T03:52:57.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每一位产品人都应该多看书、看好书<br>只有这样才能不断进步<br>形成自己的方法论</p></blockquote><hr><p>本期推荐一本书《运营之光》</p><p>据说每一位运营小伙伴都要看这本书</p><p>[TOC]</p><hr><h3><span id="运营之光"> 《运营之光》</span></h3><p><code>author:黄有璨</code></p><p><img src="https://i.loli.net/2019/03/13/5c8858b1de53c.png" alt=""></p><blockquote><p>简介</p></blockquote><p>在互联网行业内，“运营”这个职能发展到一定阶段后，往往更需要有成熟的知识体系和工作方法来给予行业从业者们以指引。</p><p>《运营之光：我的互联网运营方法论与自白》尤其难得之处在于：它既对“什么是运营”这样的概念认知类问题进行了解读，又带有大量实际的工作技巧、工作思维和工作方法，还包含了很多对于运营的思考、宏观分析和建议，可谓内容完整而全面，同时书中加入了作者亲历的大量真实案例，让全书读起来深入浅出、耐人寻味。</p><p>从内容的受众来说，它既有面向初入互联网行业的运营从业者们的具体工作方法讲解和建议，又有适合3～5年运营从业者们阅读的一些案例解析、思考方法分享，也有更适合创业者、互联网公司高管阅读的一些运营体系搭建、不同类型产品所适合的运营方法等更为宏观的问题的解读。</p><blockquote><p>作者介绍</p></blockquote><p>黄有璨</p><p>互联网运营从业近10年，<a href="http://xn--About-r41hz6nksgfshsqo622a9u5ds9b.com" target="_blank" rel="noopener">曾先后就职于美国About.com</a>、第九课堂、新浪微米、周伯通招聘等互联网公司，历任运营经理、COO助理、COO等职。</p><p>现任互联网人在线学习社区三节课（<a href="http://sanjieke.cn" target="_blank" rel="noopener">sanjieke.cn</a>）联合创始人。</p><p>同时为36氪、百度百家等专栏作家，多篇关于运营的文章被疯转，仅2016年上半年，个人所著文章线上浏览量已近千万。小饭桌创业课堂创业导师。</p><blockquote><p>目录</p></blockquote><p><img src="https://i.loli.net/2019/03/13/5c885c3111760.png" alt=""></p><blockquote><p>下载地址</p></blockquote><p>微信搜索<code>产品汪darer</code>，关注公众号</p><p>后台回复<code>运营之光</code>，即可获得下载链接</p><blockquote><p>如果你想要《运营之光》目录的思维导图，可以在后台留言<code>我想要《运营之光》目录的思维导图</code></p></blockquote><h3><span id="彩蛋时刻"> 彩蛋时刻</span></h3><p><strong>不要走开，这是一个彩蛋</strong></p><blockquote><p>百度公司最近在公司全面推行OKR工作法</p></blockquote><p>那什么是OKR工作法呢？</p><blockquote><p>OKR是指南针，KPI是秒表</p></blockquote><p>下面这本书做了非常详细的介绍</p><p><img src="https://i.loli.net/2019/03/13/5c885e1c6a8c5.png" alt=""></p><blockquote><p>只要点下右下角的好看</p><p>并分享本文到朋友圈(不可设置分组可见哦)</p><p>或者分享到微信群(最好是百人群)</p><p>然后截图(以上二选一即可)发到微信公众号后台</p><p>就可以啦，非常简单</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每一位产品人都应该多看书、看好书&lt;br&gt;
只有这样才能不断进步&lt;br&gt;
形成自己的方法论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;本期推荐一本书《运营之光》&lt;/p&gt;
&lt;p&gt;据说每一位运营小伙伴都要看这本书&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p
      
    
    </summary>
    
      <category term="产品书单" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
    
      <category term="产品书单" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title> Windows系统最好用的文件预览工具|产品软件|5th</title>
    <link href="https://darerd.github.io/2019/03/12/%E8%BD%AF%E4%BB%B6-Windows%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88%E5%B7%A5%E5%85%B7-5th/"/>
    <id>https://darerd.github.io/2019/03/12/软件-Windows系统最好用的文件预览工具-5th/</id>
    <published>2019-03-12T07:35:46.000Z</published>
    <updated>2019-03-25T04:01:39.972Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="windows系统最好用的文件预览工具产品软件5th"> Windows系统最好用的文件预览工具|产品软件|5th</span></h1><p>预览功能是 mac系统中 非常好用的一个功能，只需要选中文件，点击<code>空格</code>，在无需打开对应程序的情况下直接预览文件内容，非常省时省力，在查阅文件内容时非常方便，不少文件打开是非常吃内存和比较耗时间的。</p><p>今天推荐的这一款软件就是 windows系统中 最好用的一款</p><p><code>QuickLook</code></p><p>QuickLook支持以下文件格式：</p><ul><li>图片: <code>.png</code>, <code>.jpg</code>, <code>.bmp</code> and <code>.gif</code></li><li>压缩包： <code>.zip</code>, <code>.rar</code>, <code>.7z</code></li><li>PDF 文件</li><li>文本文件</li><li>Microsoft Word (<code>.doc</code>, <code>.docx</code>), Excel (<code>.xls</code>, <code>.xlsx</code>) and PowerPoint (<code>.ppt</code>, <code>.pptx</code>) files (需要安装 Office)</li><li>视频文件 (<code>.mp4</code>, <code>.mkv</code>, <code>.m2ts 等</code>)</li><li>HTML 文件 (<code>.htm</code>, <code>.html</code>)</li><li>Markdown 文件 (<code>.md</code>)</li><li>其他文件和文件夹会显示一个信息框</li></ul><hr><p><strong>演示：</strong></p><ol><li>预览图片</li></ol><p><img src="https://i.loli.net/2019/03/12/5c875be2809ae.gif" alt=""></p><ol start="2"><li>预览markdown文件</li></ol><p><img src="https://i.loli.net/2019/03/12/5c875c9b63951.gif" alt=""></p><ol start="3"><li>预览PDF文件</li></ol><p><img src="https://i.loli.net/2019/03/12/5c875ce607ef8.gif" alt=""></p><hr><p>总之，用起来非常方便，大大提高工作的效率和逼格</p><hr><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>QuickLook</code>，即刻获得下载链接</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;windows系统最好用的文件预览工具产品软件5th&quot;&gt; Windows系统最好用的文件预览工具|产品软件|5th&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;预览功能是 mac系统中 非常好用的一个功能，只需要选中文件，点击&lt;code&gt;空格&lt;/code&gt;，在无需打
      
    
    </summary>
    
      <category term="软件资源" scheme="https://darerd.github.io/categories/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="软件资源" scheme="https://darerd.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
      <category term="产品必用软件" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Test21-做一个字典</title>
    <link href="https://darerd.github.io/2019/03/11/Test21-%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8/"/>
    <id>https://darerd.github.io/2019/03/11/Test21-做一个字典/</id>
    <published>2019-03-11T12:22:14.000Z</published>
    <updated>2019-03-11T12:53:49.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节学一个新概念—字典(dictionary)</p><p>Python将其成为“字典”，有的语言里它的名称是“散列”。</p><p>[TOC]</p><a id="more"></a><h3><span id="先了解的知识"> 先了解的知识</span></h3><p>我们可以用列表做这些事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>things=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> things[<span class="number">1</span>]</span><br><span class="line">b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>things[<span class="number">1</span>]=<span class="string">'z'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> things[<span class="number">1</span>]</span><br><span class="line">z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> things</span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>你可以使用数字作为列表的索引，也就是利用数找到列表中的元素。</p><p>而<code>字典</code>所做的是，让你通过任何东西(不只是数字)找到元素。</p><p><code>字典</code>可以将一个物件和另外一个东西关联，不管它们的类型是什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff=&#123;<span class="string">'name'</span>:<span class="string">'zed'</span>,<span class="string">'age'</span>:<span class="number">36</span>,<span class="string">'height'</span>:<span class="number">6</span>*<span class="number">12</span>+<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'name'</span>]</span><br><span class="line">zed</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'age'</span>]</span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'height'</span>]</span><br><span class="line"><span class="number">74</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff[<span class="string">'city'</span>]=<span class="string">"San Francisco"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'city'</span>]</span><br><span class="line">San Francisco</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>你将看到除了通过数字之外，还可以用字符串来从字典中获取<code>stuff</code>，我们还可以用字符串来往字典中添加元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff[<span class="number">1</span>]=<span class="string">"WOW"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff[<span class="number">2</span>]=<span class="string">"Neato"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="number">1</span>]</span><br><span class="line">WOW</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="number">2</span>]</span><br><span class="line">Neato</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff</span><br><span class="line">&#123;<span class="string">'city'</span>:<span class="string">'San Francisco'</span>,<span class="number">2</span>:<span class="string">'Neato'</span>,<span class="string">'name'</span>:<span class="string">'zed'</span>,<span class="number">1</span>:<span class="string">'WOW'</span>,<span class="string">'age'</span>:<span class="number">36</span>,<span class="string">'height'</span>:<span class="number">74</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>只能放东西进去的字典是没啥意思的，所以我们还要有删除物件的方法，也就是使用<code>del</code>这个关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stuff[<span class="string">'city'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stuff[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stuff[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'zed'</span>,<span class="string">'age'</span>:<span class="number">36</span>,<span class="string">'height'</span>:<span class="number">6</span>*<span class="number">12</span>+<span class="number">2</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex39.py</span></span><br><span class="line"></span><br><span class="line">states=&#123;</span><br><span class="line"><span class="string">'Oregon'</span>:<span class="string">'OR'</span>,</span><br><span class="line"><span class="string">'Florida'</span>:<span class="string">'FL'</span>,</span><br><span class="line"><span class="string">'California'</span>:<span class="string">'CA'</span>,</span><br><span class="line"><span class="string">'New York'</span>:<span class="string">'NY'</span>,</span><br><span class="line"><span class="string">'Michigan'</span>:<span class="string">'MI'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cities=&#123;</span><br><span class="line"><span class="string">'CA'</span>:<span class="string">'San Francisco'</span>,</span><br><span class="line"><span class="string">'MI'</span>:<span class="string">'Detroit'</span>,</span><br><span class="line"><span class="string">'FL'</span>:<span class="string">'Jacksonville'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cities[<span class="string">'NY'</span>]=<span class="string">'New York'</span></span><br><span class="line">cities[<span class="string">'OR'</span>]=<span class="string">'Portland'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"NY State has: "</span>,cities[<span class="string">'NY'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"OR State has: "</span>,cities[<span class="string">'OR'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Michigan's abbreviation is: "</span>,states[<span class="string">'Michigan'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Florida's abbreviation is: "</span>,states[<span class="string">'Florida'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> state,abbrev <span class="keyword">in</span> states.items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s is abbreviation %s"</span>%(state,abbrev)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> abbrev,city <span class="keyword">in</span> cities.items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s has the city %s"</span>%(abbrev,city)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> state,abbrev <span class="keyword">in</span> states.items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s state is abbreviated %s and has city %s"</span>%(</span><br><span class="line">state,abbrev,cities[abbrev])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line">state=states.get(<span class="string">'Texas'</span>,<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> state:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Sorry, no Texas.'</span></span><br><span class="line"></span><br><span class="line">city=cities.get(<span class="string">'TX'</span>,<span class="string">'Does Not Exist'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The city for the state 'TX' is: %s"</span>%city</span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/11/5c86597527be6.png" alt=""></p><hr><blockquote><p>这是**《笨方法学Python》**的第二十一篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节学一个新概念—字典(dictionary)&lt;/p&gt;
&lt;p&gt;Python将其成为“字典”，有的语言里它的名称是“散列”。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
  </entry>
  
  <entry>
    <title>雷军：关于互联网的两次长考|大佬的思考|方法论</title>
    <link href="https://darerd.github.io/2019/03/10/%E6%96%B9%E6%B3%95%E8%AE%BA-%E9%9B%B7%E5%86%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E4%B8%A4%E6%AC%A1%E9%95%BF%E8%80%83-%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://darerd.github.io/2019/03/10/方法论-雷军：关于互联网的两次长考-大佬的思考/</id>
    <published>2019-03-10T01:44:02.000Z</published>
    <updated>2019-03-10T02:21:42.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>温故而知新</p></blockquote><blockquote><p>产品新人们回过头来看看大佬当年的想法</p></blockquote><blockquote><p>也是蛮有启发的</p></blockquote><p>今天这一期我们分享的是<code>雷军</code>在<code>2008-12-22</code>发表在<code>新浪博客</code>上的一篇文章</p><blockquote><p>感兴趣的小伙伴，百度“雷军 新浪博客” 就可以找到了</p></blockquote><hr><h3><span id="关于互联网的两次长考雷军"> 关于互联网的两次长考—雷军</span></h3><p>2008年4月，李彦宏说，“五年后不再有互联网公司，因为所有公司都在用互联网”。这句话引起了很大轰动。我非常赞同他的观点。未来不再有所谓的互联网公司，我曾为这个问题在1999年就思考了半年时间，至于是不是五年时间，现在还不好说。</p><p>虽然我早在1993年就开始用互联网，1996年是发烧级的BBS站友，但关于互联网是什么这么简单的一个问题，我曾思考过两次很长时间，一次是1999年创办卓越网之前，一次是2004年出售卓越网之后，每次都长达半年时间。两次长考的结论也很简单：</p><ol><li><p>互联网首先是工具，未来不存在所谓的互联网公司。</p></li><li><p>互联网是一次观念的革命，只有改变观念，才能跟上互联网时代。</p></li></ol><h4><span id="一-1999年最困扰的问题互联网公司是什么"> <strong>一、1999年最困扰的问题：互联网公司是什么？</strong></span></h4><p>那是一个疯狂的年代。</p><p>美国互联网热潮从1995年Netscape上市开始拉开序幕，AOL, Yahoo, Amazon, eBay等公司陆续登场，NASDAQ指数1000点涨到创纪录的5132点。<br>2000年4月互联网泡沫破灭终止了这次热潮，接着大批 <code>.com</code> 公司关门，NASDAQ指数跌回1000多点。<br>这种疯狂是1998年传到中国的，到1999年达到巅峰。处在躁动中心的北京，每个人都有点慌乱。只要是互联网，无论做什么，不管是否能赚钱，都有VC的巨额美元投资。</p><p>我明白在这样的潮流面前，不能做时代的看客。但十年商业经验让我想不明白：**这些公司靠什么挣钱？什么时候能挣回烧掉的钱？**实在有太多想不通的问题，我决定先跳进去，边做边想。</p><p>1999年初，我在金山内部种了一块试验田，建立了一个专门的事业部，招了十多个人，做软件下载站，取名叫卓越网。很快我们做到了第一名。但接着问题出来了，做下载需要很多服务器和带宽，而当时服务器和带宽都非常贵，用户又不愿意付钱。没有任何收入，同时需要消耗大量的费用，这个业务如何支撑下去呢？软件下载业务每天着消耗的大量现金，我当时非常痛苦，内心有很多问题没有答案：<strong>互联网公司是什么样的公司？互联网公司靠什么挣钱？做什么样的互联网公司有前途？</strong></p><p>想了半年多时间，一直到1999年10月。有一天，我突然明白了：</p><ol><li><p>不存在所谓的互联网公司。<br><strong>互联网只是一个工具</strong>，未来每个公司都变成互联网公司。</p></li><li><p><strong>做电子商务最有前途</strong>。<br>因为互联网是一个先进的生产工具，传统公司应用互联网最快的方式就是电子商务，这就是所谓的“水泥＋鼠标”。当然，电子商务也是过度性名词，因为未来所有公司都会是电子商务公司。</p></li><li><p>当时我们做的软件下载不 下功夫做，因为<strong>软件下载投入太高，而想象空间有限</strong>。</p></li></ol><p>就这样，我痛下决心，放弃软件下载业务，转型做电子商务，做图书音像的网上零售。<br>为了把这件事情做大，1999年底，我说服了金山董事会把卓越分拆出来，单独运作。当时我非常自信，觉得已经想透了，一定能成功。我力主不融VC的钱，而是金山股东自己投资。后来，金山主要股东投资了1600万，因为联想是金山的大股东，也投资了几百万元。</p><p>那个时代，大家都是烧VC的钱。而卓越网，从一开始，我就坚信一定会成功，这种信心是用我们自己投入的1600万来表达的。</p><h4><span id="二-2004年卖了卓越后整整想了半年时间互联网到底是什么"> <strong>二、2004年卖了卓越后整整想了半年时间：互联网到底是什么？</strong></span></h4><p>2004年9月，我在出售卓越网的协议上正式签字了，亚马逊以7500万美元全资收购了卓越网。卓越网从2000年5月正式创办到出售，仅四年四个月时间。</p><p>对于创业者来说，卖掉亲手创办的企业，一定是件非常痛苦的事情。我为了尽快从痛苦的情绪中走出来，决定尽量不上卓越网，决定尽量不见卓越网老同事，把主要精力用来总结卓越网四五年的成与败，琢磨未来的发展机会。这个过程想了半年多，<br>后来主要在想：<strong>什么是互联网？为什么互联网公司毛利率高增长快？未来的发展趋势是什么？</strong></p><p>得出了如下的结论，今天回想起来也非常有意思：</p><ol><li><p><strong>开放和合作是互联网公司成功的关键</strong>。<br>互联网首先是一张无边无际的网，每个人都是节点，互联是互联网成功最关键的要素。任何封闭式的业务模式都会遇到很大挑战，今天Yahoo（一站式门户）困境也折射了我当年的想法。</p></li><li><p><strong>互联网公司最厉害是靠机器赚钱</strong>。一旦产品研发完成，用户量到了一定的规模，只要服务器开着就可以赚钱了。到了这个阶段，产品研发推广的边际成本为零，服务器带宽成本逐年下降，毛利率自然就上来了，业务增长速度也比较快。而且，机器是7X24小时工作的，当然运维人员要全天候确保运营质量。</p></li><li><p><strong>口碑营销和网盟是互联网公司营销核心</strong>。互联网公司直接面对所有用户，好产品仅靠口口相传就能成功。和拥有用户的其他互联网公司结盟推广，也是最有效的推广模式。</p></li><li><p><strong>互联网公司管理相对容易</strong>。首先是业务、内部运作系统高度IT化，这点和传统公司非常不同；其次，很容易推动量化管理；还有，对人的依赖并不高，很容易做知识管理，系统自动记录了大部分人的工作，人员流动对企业影响比较小。</p></li><li><p><strong>互联网公司靠提供服务来挣钱</strong>，而软件公司靠卖产品挣钱，这种模式就决定了软件公司的业务不容易持续稳定增长。一定要从卖产品模式走到卖服务的模式。</p></li><li><p><strong>互联网的关键就是快</strong>。互联网产品的模式就是研发人员和用户一起开发产品，有阶段性成果就先推出去，听用户反馈，按用户意见去修改。</p></li><li><p><strong>未来十年的热点是移动互联网，手机上网是一种趋势</strong>。</p></li></ol><p>我把这些全部总结成一条：<strong>互联网是一次观念革命，是“深度互联，全天候快速反应”的观念</strong>。<br>这里面有几个关键词，互联、全天候、快速。<br>因为是互联网，所以联盟非常关键，联盟是互联网业务必须考虑的最关键的因素，就是说如何整合上下流，如何整合更多的推广资源；<br>全天候，传统的业务是 5X8，而互联网必须是 7X24，必须确保任何时候业务都能正常运行；<br>快速，更是互联网的精粹，必须快速开发、快速推广、业务快速成长等，反应速度一定要比传统业务反应快十倍，才有更大的发展机会。</p><p>就是想清楚了这些，我做了两件事情：</p><ol><li><p>从2005年初开始我在金山内部发布了全面转型互联网的动员令，现在金山业务几乎全部来自互联网。</p></li><li><p>2006年初我毫不犹豫投身了移动互联网行业，比如投资了乐讯（移动互联网最大的社区）和UCWEB等。最近出任UCWEB董事长，为移动互联网行业摇旗呐喊，也是我深思后的决定。</p></li></ol><p><strong>在一些重大产业变革的时候，认真思考，的确可以帮助自己把握机会。</strong></p><hr><p>关于文章开头提高的未来的公司都是互联网公司的论述，我在36氪推荐的一篇文章也看到类似的描述。<br>2018年，全球科技企业股票缩水，这篇文章讲到，当所有的公司都是科技公司，那么科技公司的高估值就会下跌，就会挤科技泡沫。</p><hr><p>大家有任何想法，可以在评论区留言讨论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;温故而知新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;产品新人们回过头来看看大佬当年的想法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;也是蛮有启发的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天
      
    
    </summary>
    
      <category term="方法论" scheme="https://darerd.github.io/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="大佬思考" scheme="https://darerd.github.io/tags/%E5%A4%A7%E4%BD%AC%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
</feed>
