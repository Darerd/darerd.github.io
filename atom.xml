<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darer &#39; Blog</title>
  
  <subtitle>记录Darer的职业生涯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://darerd.github.io/"/>
  <updated>2019-03-20T14:03:35.730Z</updated>
  <id>https://darerd.github.io/</id>
  
  <author>
    <name>Darer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HuPu商业化困境</title>
    <link href="https://darerd.github.io/2019/03/20/HuPu%E5%95%86%E4%B8%9A%E5%8C%96%E5%9B%B0%E5%A2%83/"/>
    <id>https://darerd.github.io/2019/03/20/HuPu商业化困境/</id>
    <published>2019-03-20T14:02:14.000Z</published>
    <updated>2019-03-20T14:03:35.730Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="虎扑的商业化困局"> 虎扑的商业化困局</span></h1><h3><span id="用户体验"> 用户体验</span></h3><p><strong>一句话：取消发帖门槛后，垃圾贴、卖片贴丛生</strong></p><h3><span id="数据"> 数据</span></h3><p><img src="https://i.loli.net/2019/03/20/5c91c938f17c7.gif" alt=""></p><p>体育资讯排名对比</p><p><img src="https://i.loli.net/2019/03/20/5c91c95c578d2.png" alt=""></p><p>用户画像对比，都是直男额</p><p><img src="https://i.loli.net/2019/03/20/5c91c8bdad47f.png" alt=""></p><p><img src="https://i.loli.net/2019/03/20/5c91c8d4d6289.png" alt=""></p><p>百度指数</p><p>百度指数和Talkigdata的数据有些出入，两者对比，关注懂球帝的中年人更多</p><p><img src="https://i.loli.net/2019/03/20/5c91ca157a41f.png" alt=""></p><p><img src="https://i.loli.net/2019/03/20/5c91ca29caa80.png" alt=""></p><p>从数据看，虎扑现在是后有追兵，一家独大的地位受到了冲击，用户流失会不断增加</p><p>从定位来看，两者仍有不同，虎扑定位是Jrs社区，偏向UGC（用户分享内容），随着发帖权限的开放，内容质量越来越低，有逐渐脱离体育的本质，往日常生活社区发展，比如虎扑步行街的流量极大。</p><p>懂球帝定位是体育类深度资讯，从名字的“懂”就可以看出，偏向PGC（专业人士认识分享内容），从人群属性可以看到，懂球帝中年龄在30岁以上的用户较多，这部分年龄的人阅历更加丰富，更为专业。下面这个图更可以说明情况：</p><p><img src="https://i.loli.net/2019/03/20/5c91cded62dfa.png" alt=""></p><p>懂球号自媒体平台</p><p>最近也很明显感觉到虎扑上优质球评的帖子越来越少，撕逼贴越来越多</p><p>假以时日，失去了PGC江山的虎扑，定会在撕逼灌水社区中越走越远，历史证明这样的发展之路活不了，贴吧的没落就是很好的证据。</p><h3><span id="融资情况"> 融资情况</span></h3><p><img src="https://i.loli.net/2019/03/20/5c91f120e16c7.png" alt=""></p><p>2007年成立的虎扑，现在也已经12岁了，在2015年D轮融资后，开始着手IPO，但是无疾而终。在2018年融资6.18亿，是目前中国体育领域单笔融资的最高纪录。从虎扑融资历史来看，IPO是不得不发的事，投资方需要融资收回投资成本，12岁的虎扑仍未上市，在互联网行业已是“大龄”。在2018年拿到融资后，虎扑也是动作频频，比如投资了电竟行业，虎扑直男和吴亦凡粉丝的大战等等，探索和拓展其商业化之路。</p><h3><span id="商业化"> 商业化</span></h3><h4><span id="透过版本迭代看商业化"> 透过版本迭代看商业化</span></h4><p>以下是2018融资后的几次重要版本迭代</p><h5><span id="版本-7116-2018年2月9日"> 版本 7.1.16 (2018年2月9日)</span></h5><ol><li>可以在底部「社区」里看视频了；</li><li>在个人主页可以看自己的声望了，声望代表你对社区的贡献；</li></ol><blockquote><p>增加 视频 这一媒介，</p></blockquote><h5><span id="版本-7120-2018年5月5日"> 版本 7.1.20 (2018年5月5日)</span></h5><ol><li>「比赛」页面增加绝地求生比赛，祝虎扑签约战队 iFTY、17和4AM天天吃鸡</li><li>「社区」-「视频」页面增加分类，查找视频更快更方便</li></ol><blockquote><p>发力 电竞</p></blockquote><h5><span id="版本-720-2018年6月13日"> 版本 7.2.0 (2018年6月13日)</span></h5><ol><li>首页新增个性化「热门」页面，聚合新闻、帖子、视频、亮评等各种内容，刷也刷不完</li></ol><blockquote><p>设计了类似 头条 的新闻聚合</p></blockquote><h5><span id="版本-7210-2018年9月9日"> 版本 7.2.10 (2018年9月9日)</span></h5><ol><li>新增了「首页」-「视频」列表，给你推荐喜欢的内容</li></ol><h5><span id="版本-730-2018年10月12日"> 版本 7.3.0 (2018年10月12日)</span></h5><ol><li>重新设计了界面样式，疯狂提升交互体验</li><li>视频页支持向上滑动查看更多视频</li><li>新增「装备」首页，可查询球鞋发售日历</li></ol><blockquote><p>结合虎扑旗下”识货“app 发力电商</p></blockquote><p>从版本迭代可以看到，虎扑在往泛娱乐化社区倾斜（增加视频和新闻聚合）；新增装备页面，为自家电商引流。</p><h4><span id="商业化的三驾马车"> 商业化的三驾马车</span></h4><ol><li>虎扑社区</li></ol><p>取消发帖门槛，继续深耕社区发展，坐拥大流量，广告是其主要收入</p><blockquote><p>据其2016年递交的招股书，虎扑从2013年到2015年的营业收入分别为0.98亿元、1.4亿元、2亿元。尽管在资本市场，广告业务听上去没那么吸引人，但它目前是虎扑最大的收入来源。2013年到2015年，虎扑的广告收入分别达到5473.57万元、7860.13万元和1.22亿元，占比由55.64%上升至60.78%</p></blockquote><ol start="2"><li>电商变现</li></ol><p>结合体育，做电商（“识货”APP）</p><blockquote><p>识货”在2012年6月上线，早期做的事情类似“淘宝客”——把虎扑用户导流到淘宝商城购买商品，虎扑从中抽取佣金，平均返点比例在6%-8%。到了2016年，“识货”开始尝试自营。截至2017年12月31日，“识货”共完成商品交易总量20亿元，2017年营收额在1.2-1.6亿元之间。在虎扑的总收入中，这部分营业收入占比超过三分之一。</p></blockquote><ol start="3"><li>体育IP开发</li></ol><p>开发路人王赛事</p><h3><span id="困局"> 困局</span></h3><p>虎扑最大护城河是其粉丝，是所谓的Jrs</p><p>但是如果虎扑走上娱乐化的倾斜道路，势必会偏离体育社区的本质，那么这个时候用户是否会买账呢？</p><p>用户是忠于虎扑Jrs这个品牌？还是忠于体育社区这个产品呢？</p><p>是彻底走上泛娱乐化的道路，为电商拓宽流量来源，还是回归专业体育社区，寻找尚不明晰的盈利路径？</p><p>这是虎扑最大的困局</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;虎扑的商业化困局&quot;&gt; 虎扑的商业化困局&lt;/span&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;span id=&quot;用户体验&quot;&gt; 用户体验&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一句话：取消发帖门槛后，垃圾贴、卖片贴丛生&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span 
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>常用网站导航</title>
    <link href="https://darerd.github.io/2019/03/19/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E5%AF%BC%E8%88%AA/"/>
    <id>https://darerd.github.io/2019/03/19/常用网站导航/</id>
    <published>2019-03-19T13:35:57.000Z</published>
    <updated>2019-03-20T14:00:51.681Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="网站汇总不定时更新"> 网站汇总（不定时更新）😏</span></h1><h3><span id="0-网站导航"> 0. 网站导航</span></h3><p>👉<a href="http://www.hbued.com/pm/" target="_blank" rel="noopener">产品经理导航</a>👉<a href="http://pmgeek.net/cn/index.html#" target="_blank" rel="noopener">PMGEEK</a>👉<a href="https://dh.woshipm.com/" target="_blank" rel="noopener">阿猫阿狗导航</a>👉<a href="https://www.gogeeks.cn/nav" target="_blank" rel="noopener">极客导航</a>👉<a href="http://www.chuangzaoshi.com/product" target="_blank" rel="noopener">创造狮</a></p><h3><span id="1-资讯"> 1. 资讯</span></h3><p>👉<a href="https://www.36kr.com/" target="_blank" rel="noopener">36Kr</a>👉<a href="http://www.tmtpost.com/" target="_blank" rel="noopener">钛媒体</a>👉<a href="https://www.cnbeta.com/" target="_blank" rel="noopener">cnBeta</a>👉<a href="http://www.donews.com/" target="_blank" rel="noopener">DONEWS</a></p><h3><span id="2-产品人社区"> 2. 产品人社区</span></h3><p>👉<a href="http://www.woshipm.com/" target="_blank" rel="noopener">产品经理</a>👉<a href="https://coffee.pmcaff.com/" target="_blank" rel="noopener">PMCAFF</a>👉<a href="http://www.chanpin100.com/" target="_blank" rel="noopener">产品壹佰</a></p><h3><span id="3-管理"> 3. 管理</span></h3><p>👉<a href="http://www.hbrchina.org/" target="_blank" rel="noopener">哈佛商业评论</a>👉<a href="http://wiki.mbalib.com" target="_blank" rel="noopener">MBA智库</a></p><h3><span id="4-数据分析"> 4. 数据分析</span></h3><p>👉<a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">国家数据</a>👉<a href="https://data.worldbank.org.cn/" target="_blank" rel="noopener">世界银行公开数据</a>👉<a href="http://mi.talkingdata.com/" target="_blank" rel="noopener">移动观象台</a>👉<a href="http://index.baidu.com/#/" target="_blank" rel="noopener">百度指数</a>👉<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">天眼查</a>👉<a href="http://www.iresearch.com.cn/" target="_blank" rel="noopener">艾瑞数据</a>👉<a href="https://www.appannie.com/account/login/?next=/apps/ios/matrix/" target="_blank" rel="noopener">APP Annie</a>👉<a href="https://www.qimai.cn/" target="_blank" rel="noopener">七麦</a></p><h3><span id="5-投融资"> 5. 投融资</span></h3><p>👉<a href="http://www.cyzone.cn/" target="_blank" rel="noopener">创业邦</a>👉<a href="http://www.iheima.com/" target="_blank" rel="noopener">i黑马</a>👉<a href="http://www.chuangxin.com/" target="_blank" rel="noopener">创新工场</a></p><h3><span id="6-资源下载"> 6. 资源下载</span></h3><p>👉<a href="http://www.axure.org/forum-28-1.html" target="_blank" rel="noopener">产品原型设计</a>👉<a href="http://www.uedart.com/demo.html" target="_blank" rel="noopener">产品文档规范</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;网站汇总不定时更新&quot;&gt; 网站汇总（不定时更新）😏&lt;/span&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;span id=&quot;0-网站导航&quot;&gt; 0. 网站导航&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;👉&lt;a href=&quot;http://www.hbued.com/pm/&quot; targe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过上瘾模型分析虎扑是怎么让你一步步上瘾的</title>
    <link href="https://darerd.github.io/2019/03/18/%E9%80%9A%E8%BF%87%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90%E8%99%8E%E6%89%91%E6%98%AF%E6%80%8E%E4%B9%88%E8%AE%A9%E4%BD%A0%E4%B8%80%E6%AD%A5%E6%AD%A5%E4%B8%8A%E7%98%BE%E7%9A%84/"/>
    <id>https://darerd.github.io/2019/03/18/通过上瘾模型分析虎扑是怎么让你一步步上瘾的/</id>
    <published>2019-03-18T14:49:48.000Z</published>
    <updated>2019-03-18T14:53:41.830Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="通过上瘾模型分析虎扑是怎么让你一步步上瘾的"> 通过上瘾模型分析虎扑是怎么让你一步步上瘾的</span></h1><p><strong>上瘾模型的四个阶段：触发、行动、多变的酬赏和投入。</strong></p><ul><li>**第一阶段：**引发用户去使用你的产品，这叫作“<strong>触发</strong>”。</li><li><strong>第二阶段：行动</strong>。行动要兼具动机和能力，有了动机，还需要用户的能力足够完成行为。</li><li><strong>第三阶段：<strong>给用户</strong>多变的酬赏</strong>。所谓多变的酬赏，就是指酬赏要有不可预期性。</li><li><strong>第四阶段：<strong>是让用户在产品上进行越来越多的</strong>投入</strong>。用户与产品亲密接触得越多，沉没成本就越大，也就越离不开它。</li></ul><p><img src="https://i.loli.net/2019/03/18/5c8f6edc49a3a.png" alt=""></p><p>我们用<strong>上瘾模型</strong>看一看虎扑是怎么让你一步步上瘾的</p><ol><li><p><strong>第一阶段：触发</strong></p><p><strong>外部触发</strong></p><p>朋友推荐、虎扑的营销推广（比如，去年的kris吴事件）</p><p><strong>内部触发</strong></p><p>正在寻找一个专业看球平台、即时资讯（能得到更多关于NBA的讯息）</p></li><li><p><strong>第二阶段：行动</strong></p><blockquote><p>福格认为，要使人们行动起来，三个要素必不可少。<br>第一，充分的动机；第二，完成这一行为的能力；第三，促使人们付诸行动的触发。</p></blockquote><p><strong>动机：</strong></p><p>正在寻找专业的看球平台，更快的了解到NBA的讯息</p><p><strong>能力：</strong></p><p>虎扑的下载、注册和使用都非常简单，这一过程完全没有阻碍</p><p><img src="https://i.loli.net/2019/03/18/5c8f7b9521f60.gif" alt=""></p></li><li><p><strong>第三阶段：多变的酬赏</strong></p><blockquote><p>驱使我们采取行动的，并不是酬赏本身，而是<strong>渴望酬赏时产生的那份迫切需要</strong>。</p></blockquote><p>还记得自己为什么要下载虎扑吗？<code>专业看球平台、即时资讯（能得到更多关于NBA的讯息）</code></p><p><strong>酬赏1：</strong></p><p>满足你下载的目的（虎扑的护城河之一）<code>专业看球平台、即时资讯（能得到更多关于NBA的讯息）</code></p><p><strong>酬赏2：</strong></p><p>高质量的赛后分析贴，让自己更加懂球，更加懂比赛</p><p><strong>酬赏3：</strong></p><p>虎扑社区里<strong>JRs</strong>的氛围，步行街上有趣而温暖的帖子</p><p><strong>酬赏4：</strong>（最不容易被注意）</p><p>比你的朋友知道多一点，得到朋友们的认可和赞赏</p><p>这也就是<strong>渴望酬赏时产生的那份迫切需要</strong></p></li><li><p><strong>第三阶段：投入</strong></p><p><strong>投入1：</strong></p><p>更加关心比赛时间，结果和赛后采访、资讯和赛后分析</p><p><strong>投入2：</strong></p><p>对论坛优秀帖子的转发、收藏、点赞</p><p><strong>投入3：</strong></p><p>无意间又打开了虎扑，分配了更多的时间</p></li></ol><hr><p>现在你可以利用上瘾模型询问自己关于如何让用户上瘾的五个基本问题：</p><ol><li>用户真正需要什么？你的产品可以缓解什么样的痛苦？（内部触发）</li><li>你靠什么吸引用户使用你的服务？（外部触发）</li><li>期待酬赏的时候，用户可采取的最简单的操作行为是什么？如何简化产品使该操作行为更轻松容易？（行动）</li><li>用户是满足于所得酬赏，还是想要更多酬赏？（多变的酬赏）</li><li>用户对你的产品做出了哪些“点滴投入”？这些投入是否有助于加载下一个触发并储存价值，使产品质量在使用过程中获得提升？（投入）</li></ol><hr><p>在相同条件下，满足用户的群体价值（让用户在群体中发光）比仅满足用户的个人价值（比如，给用户金钱奖励）更有用。</p><p><strong>人生来就希望被认可</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;通过上瘾模型分析虎扑是怎么让你一步步上瘾的&quot;&gt; 通过上瘾模型分析虎扑是怎么让你一步步上瘾的&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;上瘾模型的四个阶段：触发、行动、多变的酬赏和投入。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**第一阶段：**
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Test23-学习面向对象术语</title>
    <link href="https://darerd.github.io/2019/03/16/Test23-%E5%AD%A6%E4%B9%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%9C%AF%E8%AF%AD/"/>
    <id>https://darerd.github.io/2019/03/16/Test23-学习面向对象术语/</id>
    <published>2019-03-16T13:52:09.000Z</published>
    <updated>2019-03-17T13:53:34.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节学习面向对象术语</p><p>[TOC]</p><h3><span id="单词练习"> 单词练习</span></h3><ul><li>类（<code>class</code>）：告诉<code>python</code>创建新类型的东西</li><li>对象（<code>object</code>）：两个意思，即最基本的东西，或者某个东西的实例</li><li>实例（<code>instance</code>）：让<code>python</code>创建一个时得到的东西</li><li><code>def</code>：创建函数</li><li><code>self</code>：在类的函数中，<code>self</code>指代被访问的对象或者实例的一个变量</li><li>继承（<code>inheritance</code>）：指一个类可以继承另一个类的特性，和父子关系类似</li><li>组合（<code>composition</code>）：指一个类可以将别的类作为它的部件构建起来，有点像车子和车轮的关系</li><li>属性（<code>attribute</code>）：类的一个属性，它来自于组合，而且通常是一个变量</li><li>是什么（<code>is-a</code>）：用来描述继承关系，如Salmon is-a Fish（鲑鱼是一种鱼）</li><li>有什么（<code>has-a</code>）：用来描述某个东西是由另外一些东西组成的，或者某个东西有某个特征，如Salmon has-a mouth（鲑鱼有一张嘴）</li></ul><h3><span id="语汇练习"> 语汇练习</span></h3><ol><li><code>class X(Y)</code>：创建一个叫<code>X</code>的类，它是<code>Y</code>的一种</li><li><code>class X(object):def_init_(self,J)</code>：类<code>X</code>有一个<code>_init_</code>接收<code>self</code>和<code>J</code>作为参数</li><li><code>class X(object):def M(self,J)</code>：类<code>X</code>有一个函数名称为<code>M</code>，它接收<code>self</code>和<code>J</code>作为参数</li><li><code>foo=X()</code>:将<code>foo</code>设为类<code>X</code>的一个实例</li><li><code>foo.M(J)</code>:从<code>foo</code>中找到<code>M</code>函数，并使用<code>self</code>和<code>J</code>参数调用它</li><li><code>foo.K=Q</code>：从<code>foo</code>中获取<code>K</code>属性，并将其设为<code>Q</code></li></ol><p>每一条中，你看到<code>X、Y、M、J、K、Q及foo</code>的地方，都可以将它们当作空白点来对待。例如，可以将句子写成下面这样</p><ol><li>创建一个叫<code>???</code>的类，它是<code>Y</code>的一种</li><li>类<code>???</code>有一个<code>_init_</code>，能接收<code>self</code>和<code>???</code>作为参数</li><li>类<code>???</code>有一个函数名称为<code>???</code>，可以接收<code>self</code>和<code>???</code>作为参数</li><li>将<code>foo</code>设为<code>class ???</code>的一个实例</li><li>从<code>foo</code>中找到<code>???</code>函数，并使用<code>self</code>和<code>???</code>参数调用它</li><li>从<code>foo</code>中获取<code>???</code>属性，并将其设为<code>???</code></li></ol><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex41.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">WORD_URL=<span class="string">"http://learncodethehardway.org/words.txt"</span></span><br><span class="line">WORDS=[]</span><br><span class="line"></span><br><span class="line">PHRASES=&#123;</span><br><span class="line">    <span class="string">"class %%%(%%%):"</span>:</span><br><span class="line">     <span class="string">"Make a class named %%% that is-a %%%."</span>,</span><br><span class="line">    <span class="string">"class %%%(object):\n\tdef _init_(self,***)"</span>:</span><br><span class="line">     <span class="string">"class %%% has-a _init_ that takes self and *** parameters."</span>,</span><br><span class="line">    <span class="string">"class %%%(object):\n\tdef ***(self, @@@)"</span>:</span><br><span class="line">     <span class="string">"class %%% has-a function named *** that takes self and @@@ parameters."</span>,</span><br><span class="line">    <span class="string">"***=%%%()"</span>:</span><br><span class="line">     <span class="string">"Set *** to an instance of class %%%."</span>,</span><br><span class="line">    <span class="string">"***.***(@@@)"</span>:</span><br><span class="line">     <span class="string">"From *** get the *** function, and call it with parameters self,@@@."</span>,</span><br><span class="line">    <span class="string">"***.***='***'"</span>:</span><br><span class="line">     <span class="string">"From *** get the *** attribute and set it to '***'."</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># do they want to drill phrases first</span></span><br><span class="line">PHRASES_FIRST=<span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> len (sys.argv)==<span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>]==<span class="string">"english"</span>:</span><br><span class="line">    PHRASES_FIRST=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load up the words from the website</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> urlopen(WORD_URL).readlines():</span><br><span class="line">    WORDS.append(word.strip())</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(snippet,phrase)</span>:</span></span><br><span class="line">    class_names=[w.capitalize() <span class="keyword">for</span> w <span class="keyword">in</span></span><br><span class="line">                random.sample(WORDS,snippet.count(<span class="string">"%%%"</span>))]</span><br><span class="line">    other_names=random.sample(WORDS,snippet.count(<span class="string">"***"</span>))</span><br><span class="line">    results=[]</span><br><span class="line">    param_names=[]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,snippet.count(<span class="string">"@@@"</span>)):</span><br><span class="line">        param_count=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">        param_names.append(<span class="string">','</span>.join(random.sample(WORDS,param_count)))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> sentence <span class="keyword">in</span> snippet,phrase:</span><br><span class="line">        result=sentence[:]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># fake class names</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> class_names:</span><br><span class="line">            result=result.replace(<span class="string">"%%%"</span>,word,<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># fake other names</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> other_names:</span><br><span class="line">            result=result.replace(<span class="string">"***"</span>,word,<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># fake parameter lists</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> param_names:</span><br><span class="line">            result=result.replace(<span class="string">"@@@"</span>,word,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        results.append(result)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">    </span><br><span class="line"><span class="comment"># keep going until they hit CTRL-D</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        snippets=PHRASES.keys()</span><br><span class="line">        random.shuffle(snippets)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> snippet <span class="keyword">in</span> snippets:</span><br><span class="line">            phrase=PHRASES[snippet]</span><br><span class="line">            question,answer=convert(snippet,phrase)</span><br><span class="line">            <span class="keyword">if</span> PHRASES_FIRST:</span><br><span class="line">                question,answer=answer,question</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">print</span> question</span><br><span class="line">            </span><br><span class="line">            raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"ANSWER: %s\n\n"</span> %answer</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nBye"</span></span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/16/5c8d0d809c5b9.png" alt=""></p><h3><span id="代码解释"> 代码解释</span></h3><blockquote><p>目前能力不够，不能完全解释和理解每一段代码的作用</p><p>下面仅介绍部分需要注意的知识</p></blockquote><ol><li>Python异常处理</li></ol><p>最后一段用<code>try/except</code>语句来检测异常</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;：</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在try部份引发了'name'异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果引发了'name'异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果没有异常发生</span></span><br></pre></td></tr></table></figure><p><code>try</code>的工作原理是，当开始一个<code>try</code>语句后，<code>python</code>就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，<code>try</code>子句先执行，接下来会发生什么依赖于执行时是否出现异常。</p><ul><li>如果当<code>try</code>后的语句执行时发生异常，<code>python</code>就跳回到<code>try</code>并执行第一个匹配该异常的<code>except</code>子句，异常处理完毕，控制流就通过整个<code>try</code>语句（除非在处理异常时又引发新的异常）。</li><li>如果在<code>try</code>后的语句里发生了异常，却没有匹配的<code>except</code>子句，异常将被递交到上层的<code>try</code>，或者到程序的最上层（这样将结束程序，并打印缺省的出错信息）。</li><li>如果在<code>try</code>子句执行时没有发生异常，<code>python</code>将执行<code>else</code>语句后的语句（如果有<code>else</code>的话），然后控制流通过整个<code>try</code>语句。</li></ul><p><a href="http://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">更多关于Python异常处理的资料</a></p><hr><blockquote><p>这是**《笨方法学Python》**的第二十三篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p><p>后面的内容多为《笨方法学Python》的实战了，更新会变慢了，也更难理解了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节学习面向对象术语&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
      
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>应届生：为何你的工资会比老员工高？</title>
    <link href="https://darerd.github.io/2019/03/16/%E5%BA%94%E5%B1%8A%E7%94%9F%EF%BC%9A%E4%B8%BA%E4%BD%95%E4%BD%A0%E7%9A%84%E5%B7%A5%E8%B5%84%E4%BC%9A%E6%AF%94%E8%80%81%E5%91%98%E5%B7%A5%E9%AB%98%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/16/应届生：为何你的工资会比老员工高？/</id>
    <published>2019-03-16T06:02:20.000Z</published>
    <updated>2019-03-16T06:58:11.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在应届生市场上，**“倒挂”**是一个蛮普遍的现象(至少我身边的朋友多如此)</p><p>受到一位朋友的启发，在思考 <strong>为什么企业给应届生的工资会比去年入职的老员工高呢？</strong></p><p>最近看到这篇<a href="https://coffee.pmcaff.com/article/4AQgR9OeL2/?newwindow=1" target="_blank" rel="noopener">文章</a>，很受启发</p></blockquote><p><code>文章中的老员工指的是刚入职1-2年的员工</code></p><p><a href=""><strong>企业在雇佣员工时，就已经把未来增值的那部分钱提前包含在薪酬里了。</strong></a></p><p>企业在招人时，不光要考虑应聘者是否可以满足目前的需求，还要考虑是否能满足未来一段时间的需求。不然当员工跟不上企业发展时，再重新换人损失的成本就会更大（这部分成本可不仅仅是钱这么简单，还有时间成本、机会成本、内部磨合成本、培训成本等等）。</p><p><strong>这就意味着企业为应聘者开出的薪资待遇，有一部分是用来购买应聘者现在尚未具备（但未来可能会）的能力。</strong></p><p>所以我们可以将应届生薪资分成两部分：</p><ul><li>确定的部分：经验、个人能力、自身资源等</li><li>不确定的部分：未来的潜力（<strong>应届生的主要卖点</strong>）</li></ul><p>确定的部分会遵循当时的市场价，一分钱一分货<br>而对于不确定的部分，则需要企业进行评估</p><p>这时，就会出现应届生薪资高于老员工的情况。</p><p><strong>但需要注意的是，公司此时正在回收老员工身上的投资——在老员工身上所投入的购买潜力的成本。</strong></p><p>而应届生的投资回收，才刚刚开始。</p><p>对于老员工来说，薪资没有时刻跟随市场价增加，是不是就亏了？</p><p>不是的。</p><p>第一、企业帮员工抵御了市场价格波动风险——人才市场上的价格不会永远上升，也会有年景不好薪资下降的情况，但大多数企业只要盈利尚可，都不太可能出现降薪的情况。</p><p>第二、员工在工作过程中，经验和能力都在持续增加，当他再次在市场上询价时，也会得到更高的待遇报酬。</p><p>所以，我们身边常见的情况，就是新员工入职后，可能两三年收入没有大幅度上涨，但跳槽之后，薪水一下子就翻倍了。</p><p><img src="https://i.loli.net/2019/03/16/5c8c96a2f252d.png" alt=""></p><p><a href="">即使是收入停滞的阶段，个人的经验、能力也在持续上涨</a></p><p>这种交易模式，在过去是较为公平合理的，因为大多数行业的薪资短期（1-3年）内不会有特别大的变动。</p><p>但现在情况开始变得不太一样，一方面是通货膨胀的影响，另一方面是很多行业开始进入产业升级，市场竞争激烈，相关从业者的待遇在短时间内出现大幅度增长。(互联网公司就是一个典型)</p><p>可能今年你入职的时候价格是10K，到了明年应届生的价格就是15K，这就出现了<strong>倒挂</strong>的情况，属于市场竞争导致的结果（这种情况会造成部分的市场价值溢价）。</p><p>于是人才市场上出现了微妙的平衡：<strong>员工将已有的工作经验拿到市场上去变现，从而达到增加收入的目的；企业为了控制成本，也不会频繁调整员工的薪资。</strong></p><blockquote><p>很受启发，其实这也是一种投资</p></blockquote><p>这种情况在现阶段是较为合理且公平的方式：增加人才流动性，这样最终企业和个人都会在人才市场上，达到更好的供需平衡。</p><p>不过面对这样的情况，很多大企业还是进行薪资结构的调整（这类公司愿意为优秀人才付出更多成本），比如将薪资结构改为基础工资+绩效，保证「付出与回报对等」。每年进行全员薪资普调，避免人才流失。</p><blockquote><p>（但是，请记住，公司的调薪政策都是基于你入职时的薪资来决定的，且都是小幅调薪，不可能出现大幅度薪水猛涨的情况，因为从公司层面上讲，进行大幅度调薪政策所付出的管理成本远高于小范围人员流失。）</p></blockquote><p>最后再用几句话做个总结</p><ol><li>理论上，能力相同的老员工和应届生收入相差不会太大，但因为企业为应届生未来的潜力也买了单，导致应届生收入比老员工要多不少。</li><li>企业为员工的潜力先行买单，在员工之后一段时间内，会优先收回之前的投资成本（除非此人特别优秀，能为公司带来更大价值）。</li><li>员工的收入增长可以分成两个阶段，变现期与积累期。变现期就是刚入职的那会，已有的经验能力和潜力一起打包变现；积累期则是变现之后收入没有明显增长的时期，新老员工收入相差很大，就是因为新员工正处于变现期，而老员工则在积累期。（如下图）</li></ol><p><img src="https://i.loli.net/2019/03/16/5c8c999d75725.png" alt=""></p><p><a href="">新老员工在某一时间点处于不同阶段所造成的收入差</a></p><p><strong>对个人的启示</strong>(值得思考的四条职场建议)</p><ul><li><p>跳槽是增加收入的好办法，要谨慎把握机会。这一步没走好，会带来很多损失。</p></li><li><p>多关注市场行情，了解自己的身价，比起薪资成长空间更为重要，积累资本，才能在下一次变现期获得更多回报。</p></li><li><p>公司对你的期望，会在给你的待遇上直接体现出来，你拿到手多少钱，就说明你在公司眼里值多少钱。</p></li><li><p>老员工值钱的原因还是经验与能力的提升，如果工作时间长但能力没有上升，依然在市场上卖不出好价钱。</p></li></ul><p><strong>应届生薪资公式</strong></p><p><strong>应届生薪资=实际价值+市场溢价+潜力价值+学校品牌价值+学历价值</strong></p><p>实际价值：应聘岗位的市场价值</p><p>市场溢价：由于人才竞争等导致的薪酬提高，当然增加的薪资是符合市场规律的，但是如果过高，就如同房价一样，有泡沫了</p><p>潜力价值：面试表现，个人能力，思维等会提高自己的潜力价值，就是offer有sp、ssp的嘛</p><p>学校品牌价值：985和211的应届生薪资略有不同</p><p>学历价值：专科、本科、硕士薪资也不同</p><blockquote><p>真的非常感谢作者的这篇<a href="https://coffee.pmcaff.com/article/4AQgR9OeL2/?newwindow=1" target="_blank" rel="noopener">文章</a>，很受启发</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在应届生市场上，**“倒挂”**是一个蛮普遍的现象(至少我身边的朋友多如此)&lt;/p&gt;
&lt;p&gt;受到一位朋友的启发，在思考 &lt;strong&gt;为什么企业给应届生的工资会比去年入职的老员工高呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近看到这篇&lt;a href=
      
    
    </summary>
    
      <category term="随想" scheme="https://darerd.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://darerd.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别取厕纸的意义是啥？|产品问答|第2期</title>
    <link href="https://darerd.github.io/2019/03/15/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%8E%BB%E5%8E%95%E7%BA%B8%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E5%95%A5%EF%BC%9F/"/>
    <id>https://darerd.github.io/2019/03/15/人脸识别去厕纸的意义是啥？/</id>
    <published>2019-03-15T10:23:45.000Z</published>
    <updated>2019-03-15T11:02:18.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>产品人只有<code>不断思考、复盘，逐步形成自己方法论</code>，才能形成有效的护城河</p><p>俗话说：“三人行，必有我师”</p><p>产品人应该多看看同行对事情的理解和分析角度</p></blockquote><p><code>以下内容来自产品相关社区，如有侵权，请联系删除</code></p><p>[TOC]</p><h3><span id="q1在杭州火车站发现站内厕所有个人脸识别取手纸的终端一体机不知道人脸识别取手纸的意义是啥"> Q1:<strong>在杭州火车站发现站内厕所有个人脸识别取手纸的终端一体机，不知道人脸识别取手纸的意义是啥？</strong></span></h3><blockquote><p>主要功能：厕所入口处有个人脸识别取手纸的终端机，每10秒钟可以人脸识别取一次。不知道这样做有什么意义，虽然确实用上了黑科技。但是目的呢？统计多少个人用完一卷纸吗？感觉没有意义啊，顶多有个用完手纸通知打扫阿姨来补充纸就行了啊，难道是人脸识别一下让人有个危险意识已经录下你了不能浪费纸吗？（这个可以有，但是感觉用纸多少这个不用那么太在意吧）不过站内厕所外边有个男女厕所位使用状况实时统计展示显示大屏，这个倒是觉得还蛮好的，可以看到挤不挤，要不要进去之类的。你们觉得呢？</p></blockquote><p><code>author:泽度 @人人都是产品经理社区</code></p><p><strong>Answer</strong></p><p>无利不起早，企业做一个产品总有某些利益，无论是个体还是组织</p><ol><li><p>无金钱利益：单纯的理想，想做一件事(这种情况太少，而且缺乏目标性也往往难成)；</p></li><li><p>直接金钱利益：产品直接变现</p></li><li><p>间接金钱利益：政府补贴、资本投资、跨界合作等；</p></li><li><p>原始积累：商业探索、数据收集、运营积累等；</p></li></ol><p>根据你所提到的人脸识别取手指，成本不会低，这种很大程度是组织制作；</p><p>人脸数据库是在公安，在国家手里，那么多少也有国家支持；</p><p>产品很难直接商业变现，从目前市场分布来看还是在初期体验阶段；</p><p>由此，该产品更大可能是</p><p><strong>1. 政府背后支持；</strong></p><p><strong>2. 智能科技产品技术、应用探索，以及技术、数据、运营积累；</strong></p><p><strong>3. 可能存在的数据商业交易行为。</strong></p><p>注：某一事物对我们而言也许看起来没有太大价值，但存在即是合理，他或许对某些事物推动有所帮助，亦或者增加公职人员政绩这般。</p><blockquote><p>比较认可是政府推动，我觉得更多是弥补天网漏洞，对追踪疑犯很有帮助</p></blockquote><h3><span id="q2微信公众号的点赞到好看到在看你觉得哪个更契合场景"> Q2：<strong>微信公众号的“点赞”到“好看”到“在看”，你觉得哪个更契合场景？</strong></span></h3><blockquote><p>微信再次悄悄进行功能改动，即微信公众号文章右下角的“好看”换成了“在看”；同时，第一个点击文章“在看”的读者，在看一看中会有一个爱心图标，即：首个“在看”用户才会拥有爱心图标，其他用户可以为这个用户点赞，来作为感谢他分享的方式。</p><p>可是“在看”这个词非常有机械感，有种为什么要人来确认的感觉？</p><p><img src="https://static.woshipm.com/TTW_QUESTION_201903_20190315105729_0762.jpg" alt="img"></p></blockquote><p><code>author:迷宫小巷 @人人都是产品经理社区</code></p><p><strong>Answer</strong></p><p>估计是为了充实[看一看]栏目的内容，[看一看]里每天的文章屈指可数（可能是好友太少？）希望[看一看]能发挥一个以好友推荐为机制的内容分发渠道的作用。<br>如果用[好看]，文章质量通常要好到让用户发出wow~（8分以上吧） 才会驱使用户点下，让别人知道这才是我的品位 ，我觉得好看的文章都是精品（￣_,￣ ）<br>如果用[在看]，文章达到“哎呦还不错哦”的水准（≥6分吧）就足以让我点下了，“我在看这个耶，没有特别好但也值得一看，你要不要也看看？”</p><blockquote><p>提问的作者真的很仔细，没看到这个答案，自己还真的没有注意到这个细节，给提问者点赞</p><p>关于这个问题，自己很不理解，吃不透背后的心理逻辑</p></blockquote><h3><span id="q3为什么百度问答没有发展成知乎"> <strong>Q3:为什么百度问答没有发展成知乎？</strong></span></h3><blockquote><p>百度问答很早就有了，且最开始做的不错。</p><p>后来就被知乎掀翻了。</p><p>最开始知乎很专业，讨论比较小众</p><p>但是现在讨论的东西，和百度知道也差不多了</p></blockquote><p><code>author:连长 @人人都是产品经理社区</code></p><p>百度的入口是个问题，搜索本身面向的用户太宽泛，知道最开始也是通过搜索问答引入的，没有独立，这就很难界定内容的属性，大家搜的问题信息量大，面很广，也不够具体。另一点百度知道早期做的时候，互联网没现在这么复杂，而且很好的满足了大家的普遍的提问需求，当然了时间久了，流量稳定后，大部分用户开始借助这一渠道做推广，而知道的杂乱很难营造类似知乎这样的社区氛围，这个时候再想挽回也就很难了</p><blockquote><p>百度对知道的定位和维护是最大的问题吧</p><p>知道是百度的一个小产品，而知乎全部身家就是知识问答社区</p><p>公司对产品的重视自然不一样，资源倾斜也不同</p><p>此外，百度知道做大之后，维护跟不上，东西良秀不齐，会慢慢被营销充斥，这样贡献精品回答的少数人会渐生反感，逐渐被主打差异化的知乎、豆瓣的等挖走了，百度贴吧的没落也是如此</p><p>还有没有搭上移动互联网时代的大环境</p></blockquote><h3><span id="q3瑞幸-每日优鲜经常发券我理解货拉拉为啥也要发券"> Q3:<strong>瑞幸、每日优鲜经常发券我理解，货拉拉为啥也要发券？</strong></span></h3><blockquote><p>前段时间搬家所以下载了货拉拉，结果发现这段时间他每隔几天就给我推送“XX元门槛优惠券已入账，用卷下单更优惠哦~~~”频率堪比瑞幸咖啡给我送券。可是这不是个拉货的APP吗！就算是便宜了，我没货也不可能变出来货啊！！那发优惠券是为了干嘛？促活的话感觉也达不到啊</p><p><img src="https://static.woshipm.com/YY_A_20190313_1552460998597039359.jpg" alt="img"></p></blockquote><p><code>author:魏雅 @人人都是产品经理社区</code></p><p>我认为是可以促活的，大多数人运货频率不会很高，属于临时刚性需求。其实说刚性都勉强了因为一方面竞品多另一方面有的时候将就将就货也能拉回去没必要叫货拉拉。</p><p>所以这时候不断的推送优惠券一方面加深对品牌的印象，另一方面在用户心理种草“我很优惠”“用我划算”。</p><p>这样用户要用的时候，第一时间就想起来，我要用拉货软件，并且我要用货拉拉！</p><blockquote><p>首先，下载了app的用户，自然是存在需求的潜在用户</p><p>利用人的趋利心理，当你再次想拉货时，你第一回答、反应就是我要用货啦啦，占据用户的心智</p><p>敢肯定货啦啦一定会出分享好友会免单等营销行为</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;产品人只有&lt;code&gt;不断思考、复盘，逐步形成自己方法论&lt;/code&gt;，才能形成有效的护城河&lt;/p&gt;
&lt;p&gt;俗话说：“三人行，必有我师”&lt;/p&gt;
&lt;p&gt;产品人应该多看看同行对事情的理解和分析角度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code
      
    
    </summary>
    
      <category term="产品问答" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E9%97%AE%E7%AD%94/"/>
    
    
      <category term="产品问答" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E9%97%AE%E7%AD%94/"/>
    
  </entry>
  
  <entry>
    <title>Test22-Python中字典、模块等的知识入门</title>
    <link href="https://darerd.github.io/2019/03/13/Test22-Python%E4%B8%AD%E5%AD%97%E5%85%B8%E3%80%81%E6%A8%A1%E5%9D%97%E7%AD%89%E7%9A%84%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/"/>
    <id>https://darerd.github.io/2019/03/13/Test22-Python中字典、模块等的知识入门/</id>
    <published>2019-03-13T07:08:33.000Z</published>
    <updated>2019-03-13T07:30:29.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>上一期，我们学期了<code>字典(dictionary)</code>这个知识</p><p>因为后面要学习<code>面向对象的编程：OOP</code>，为了更好的学习和理解<code>OOP</code>的知识</p><p>这一期，先学习下<code>字典</code>和<code>模块</code>的知识</p><a id="more"></a><p>[TOC]</p><h3><span id="字典dictionary"> 字典(dictionary)</span></h3><p>字典是一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值 <strong>key=&gt;value</strong> 对用冒号 <strong><code>:</code></strong> 分割，每个键值对之间用逗号 <strong><code>,</code></strong> 分割，整个字典包括在花括号 <strong><code>{}</code></strong> 中 ,格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><strong>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一</strong><br><strong>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dict = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="string">'3'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict[<span class="string">'b'</span>]</span><br><span class="line"><span class="string">'3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="string">'3'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组</strong></p><blockquote><p>谈一下我的理解，不一定正确</p><p>上面所说的<strong>键</strong>，也就是<code>key</code>。要求其是唯一的，不可重复<br>很想软件注册时的<strong>用户名</strong>，要求不能和他人重复，且一般只能用数字、字母和下划线注册<br>这样理解虽然不准确，可能会易懂一些</p></blockquote><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">###输出结果</span></span><br><span class="line">dict[<span class="string">'Name'</span>]:  Zara</span><br><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>修改字典的内容</strong></p><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"RUNOOB"</span> <span class="comment"># 添加</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">###输出结果</span></span><br><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">8</span></span><br><span class="line">dict[<span class="string">'School'</span>]:  RUNOOB</span><br></pre></td></tr></table></figure><p><strong>删除字典元素</strong></p><p>能删单一的元素也能清空字典，清空只需一项操作</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>]  <span class="comment"># 删除键是'Name'的条目</span></span><br><span class="line">dict.clear()      <span class="comment"># 清空词典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict          <span class="comment"># 删除词典</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>] </span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>]</span><br></pre></td></tr></table></figure><h3><span id="模块"> 模块</span></h3><p>Python 模块(<code>Module</code>)，是一个 Python 文件，以 <code>.py</code>结尾，包含了 Python 对象定义和Python语句。</p><p>模块让你能够有逻辑地组织你的 Python 代码段。</p><p>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><p><strong>模块的引入用<code>import</code>语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1[, module2[,... moduleN]]</span><br></pre></td></tr></table></figure><p>比如要引用模块 <code>math</code>，就可以在文件最开始的地方用 <strong><code>import math</code></strong> 来引入。在调用 <code>math</code> 模块中的函数时，必须这样引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模块名.函数名</span><br></pre></td></tr></table></figure><hr><blockquote><p>这是**《笨方法学Python》**的第二十二篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一期，我们学期了&lt;code&gt;字典(dictionary)&lt;/code&gt;这个知识&lt;/p&gt;
&lt;p&gt;因为后面要学习&lt;code&gt;面向对象的编程：OOP&lt;/code&gt;，为了更好的学习和理解&lt;code&gt;OOP&lt;/code&gt;的知识&lt;/p&gt;
&lt;p&gt;这一期，先学习下&lt;code&gt;字典&lt;/code&gt;和&lt;code&gt;模块&lt;/code&gt;的知识&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《运营之光》：据说每一位运营喵都看过|产品书单|第二期</title>
    <link href="https://darerd.github.io/2019/03/13/%E3%80%8A%E8%BF%90%E8%90%A5%E4%B9%8B%E5%85%89%E3%80%8B%EF%BC%9A%E6%8D%AE%E8%AF%B4%E6%AF%8F%E4%B8%80%E4%BD%8D%E8%BF%90%E8%90%A5%E5%96%B5%E9%83%BD%E7%9C%8B%E8%BF%87-%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95-%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>https://darerd.github.io/2019/03/13/《运营之光》：据说每一位运营喵都看过-产品书单-第二期/</id>
    <published>2019-03-13T03:51:48.000Z</published>
    <updated>2019-03-13T03:52:57.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每一位产品人都应该多看书、看好书<br>只有这样才能不断进步<br>形成自己的方法论</p></blockquote><hr><p>本期推荐一本书《运营之光》</p><p>据说每一位运营小伙伴都要看这本书</p><p>[TOC]</p><hr><h3><span id="运营之光"> 《运营之光》</span></h3><p><code>author:黄有璨</code></p><p><img src="https://i.loli.net/2019/03/13/5c8858b1de53c.png" alt=""></p><blockquote><p>简介</p></blockquote><p>在互联网行业内，“运营”这个职能发展到一定阶段后，往往更需要有成熟的知识体系和工作方法来给予行业从业者们以指引。</p><p>《运营之光：我的互联网运营方法论与自白》尤其难得之处在于：它既对“什么是运营”这样的概念认知类问题进行了解读，又带有大量实际的工作技巧、工作思维和工作方法，还包含了很多对于运营的思考、宏观分析和建议，可谓内容完整而全面，同时书中加入了作者亲历的大量真实案例，让全书读起来深入浅出、耐人寻味。</p><p>从内容的受众来说，它既有面向初入互联网行业的运营从业者们的具体工作方法讲解和建议，又有适合3～5年运营从业者们阅读的一些案例解析、思考方法分享，也有更适合创业者、互联网公司高管阅读的一些运营体系搭建、不同类型产品所适合的运营方法等更为宏观的问题的解读。</p><blockquote><p>作者介绍</p></blockquote><p>黄有璨</p><p>互联网运营从业近10年，<a href="http://xn--About-r41hz6nksgfshsqo622a9u5ds9b.com" target="_blank" rel="noopener">曾先后就职于美国About.com</a>、第九课堂、新浪微米、周伯通招聘等互联网公司，历任运营经理、COO助理、COO等职。</p><p>现任互联网人在线学习社区三节课（<a href="http://sanjieke.cn" target="_blank" rel="noopener">sanjieke.cn</a>）联合创始人。</p><p>同时为36氪、百度百家等专栏作家，多篇关于运营的文章被疯转，仅2016年上半年，个人所著文章线上浏览量已近千万。小饭桌创业课堂创业导师。</p><blockquote><p>目录</p></blockquote><p><img src="https://i.loli.net/2019/03/13/5c885c3111760.png" alt=""></p><blockquote><p>下载地址</p></blockquote><p>微信搜索<code>产品汪darer</code>，关注公众号</p><p>后台回复<code>运营之光</code>，即可获得下载链接</p><blockquote><p>如果你想要《运营之光》目录的思维导图，可以在后台留言<code>我想要《运营之光》目录的思维导图</code></p></blockquote><h3><span id="彩蛋时刻"> 彩蛋时刻</span></h3><p><strong>不要走开，这是一个彩蛋</strong></p><blockquote><p>百度公司最近在公司全面推行OKR工作法</p></blockquote><p>那什么是OKR工作法呢？</p><blockquote><p>OKR是指南针，KPI是秒表</p></blockquote><p>下面这本书做了非常详细的介绍</p><p><img src="https://i.loli.net/2019/03/13/5c885e1c6a8c5.png" alt=""></p><blockquote><p>只要点下右下角的好看</p><p>并分享本文到朋友圈(不可设置分组可见哦)</p><p>或者分享到微信群(最好是百人群)</p><p>然后截图(以上二选一即可)发到微信公众号后台</p><p>就可以啦，非常简单</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每一位产品人都应该多看书、看好书&lt;br&gt;
只有这样才能不断进步&lt;br&gt;
形成自己的方法论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;本期推荐一本书《运营之光》&lt;/p&gt;
&lt;p&gt;据说每一位运营小伙伴都要看这本书&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p
      
    
    </summary>
    
      <category term="产品书单" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
    
      <category term="产品书单" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title> Windows系统最好用的文件预览工具|产品软件|5th</title>
    <link href="https://darerd.github.io/2019/03/12/Windows%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88%E5%B7%A5%E5%85%B7-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6-5th/"/>
    <id>https://darerd.github.io/2019/03/12/Windows系统最好用的文件预览工具-产品软件-5th/</id>
    <published>2019-03-12T07:35:46.000Z</published>
    <updated>2019-03-12T07:37:12.597Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="windows系统最好用的文件预览工具产品软件5th"> Windows系统最好用的文件预览工具|产品软件|5th</span></h1><p>预览功能是 mac系统中 非常好用的一个功能，只需要选中文件，点击<code>空格</code>，在无需打开对应程序的情况下直接预览文件内容，非常省时省力，在查阅文件内容时非常方便，不少文件打开是非常吃内存和比较耗时间的。</p><p>今天推荐的这一款软件就是 windows系统中 最好用的一款</p><p><code>QuickLook</code></p><p>QuickLook支持以下文件格式：</p><ul><li>图片: <code>.png</code>, <code>.jpg</code>, <code>.bmp</code> and <code>.gif</code></li><li>压缩包： <code>.zip</code>, <code>.rar</code>, <code>.7z</code></li><li>PDF 文件</li><li>文本文件</li><li>Microsoft Word (<code>.doc</code>, <code>.docx</code>), Excel (<code>.xls</code>, <code>.xlsx</code>) and PowerPoint (<code>.ppt</code>, <code>.pptx</code>) files (需要安装 Office)</li><li>视频文件 (<code>.mp4</code>, <code>.mkv</code>, <code>.m2ts 等</code>)</li><li>HTML 文件 (<code>.htm</code>, <code>.html</code>)</li><li>Markdown 文件 (<code>.md</code>)</li><li>其他文件和文件夹会显示一个信息框</li></ul><hr><p><strong>演示：</strong></p><ol><li>预览图片</li></ol><p><img src="https://i.loli.net/2019/03/12/5c875be2809ae.gif" alt=""></p><ol start="2"><li>预览markdown文件</li></ol><p><img src="https://i.loli.net/2019/03/12/5c875c9b63951.gif" alt=""></p><ol start="3"><li>预览PDF文件</li></ol><p><img src="https://i.loli.net/2019/03/12/5c875ce607ef8.gif" alt=""></p><hr><p>总之，用起来非常方便，大大提高工作的效率和逼格</p><hr><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>QuickLook</code>，即刻获得下载链接</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;windows系统最好用的文件预览工具产品软件5th&quot;&gt; Windows系统最好用的文件预览工具|产品软件|5th&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;预览功能是 mac系统中 非常好用的一个功能，只需要选中文件，点击&lt;code&gt;空格&lt;/code&gt;，在无需打
      
    
    </summary>
    
      <category term="产品必用软件" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="软件资源" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="软件资源" scheme="https://darerd.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Test21-做一个字典</title>
    <link href="https://darerd.github.io/2019/03/11/Test21-%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8/"/>
    <id>https://darerd.github.io/2019/03/11/Test21-做一个字典/</id>
    <published>2019-03-11T12:22:14.000Z</published>
    <updated>2019-03-11T12:53:49.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节学一个新概念—字典(dictionary)</p><p>Python将其成为“字典”，有的语言里它的名称是“散列”。</p><p>[TOC]</p><a id="more"></a><h3><span id="先了解的知识"> 先了解的知识</span></h3><p>我们可以用列表做这些事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>things=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> things[<span class="number">1</span>]</span><br><span class="line">b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>things[<span class="number">1</span>]=<span class="string">'z'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> things[<span class="number">1</span>]</span><br><span class="line">z</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> things</span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>你可以使用数字作为列表的索引，也就是利用数找到列表中的元素。</p><p>而<code>字典</code>所做的是，让你通过任何东西(不只是数字)找到元素。</p><p><code>字典</code>可以将一个物件和另外一个东西关联，不管它们的类型是什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff=&#123;<span class="string">'name'</span>:<span class="string">'zed'</span>,<span class="string">'age'</span>:<span class="number">36</span>,<span class="string">'height'</span>:<span class="number">6</span>*<span class="number">12</span>+<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'name'</span>]</span><br><span class="line">zed</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'age'</span>]</span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'height'</span>]</span><br><span class="line"><span class="number">74</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff[<span class="string">'city'</span>]=<span class="string">"San Francisco"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="string">'city'</span>]</span><br><span class="line">San Francisco</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>你将看到除了通过数字之外，还可以用字符串来从字典中获取<code>stuff</code>，我们还可以用字符串来往字典中添加元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff[<span class="number">1</span>]=<span class="string">"WOW"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff[<span class="number">2</span>]=<span class="string">"Neato"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="number">1</span>]</span><br><span class="line">WOW</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff[<span class="number">2</span>]</span><br><span class="line">Neato</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> stuff</span><br><span class="line">&#123;<span class="string">'city'</span>:<span class="string">'San Francisco'</span>,<span class="number">2</span>:<span class="string">'Neato'</span>,<span class="string">'name'</span>:<span class="string">'zed'</span>,<span class="number">1</span>:<span class="string">'WOW'</span>,<span class="string">'age'</span>:<span class="number">36</span>,<span class="string">'height'</span>:<span class="number">74</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>只能放东西进去的字典是没啥意思的，所以我们还要有删除物件的方法，也就是使用<code>del</code>这个关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stuff[<span class="string">'city'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stuff[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> stuff[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'zed'</span>,<span class="string">'age'</span>:<span class="number">36</span>,<span class="string">'height'</span>:<span class="number">6</span>*<span class="number">12</span>+<span class="number">2</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex39.py</span></span><br><span class="line"></span><br><span class="line">states=&#123;</span><br><span class="line"><span class="string">'Oregon'</span>:<span class="string">'OR'</span>,</span><br><span class="line"><span class="string">'Florida'</span>:<span class="string">'FL'</span>,</span><br><span class="line"><span class="string">'California'</span>:<span class="string">'CA'</span>,</span><br><span class="line"><span class="string">'New York'</span>:<span class="string">'NY'</span>,</span><br><span class="line"><span class="string">'Michigan'</span>:<span class="string">'MI'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cities=&#123;</span><br><span class="line"><span class="string">'CA'</span>:<span class="string">'San Francisco'</span>,</span><br><span class="line"><span class="string">'MI'</span>:<span class="string">'Detroit'</span>,</span><br><span class="line"><span class="string">'FL'</span>:<span class="string">'Jacksonville'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cities[<span class="string">'NY'</span>]=<span class="string">'New York'</span></span><br><span class="line">cities[<span class="string">'OR'</span>]=<span class="string">'Portland'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"NY State has: "</span>,cities[<span class="string">'NY'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"OR State has: "</span>,cities[<span class="string">'OR'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Michigan's abbreviation is: "</span>,states[<span class="string">'Michigan'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Florida's abbreviation is: "</span>,states[<span class="string">'Florida'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> state,abbrev <span class="keyword">in</span> states.items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s is abbreviation %s"</span>%(state,abbrev)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> abbrev,city <span class="keyword">in</span> cities.items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s has the city %s"</span>%(abbrev,city)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> state,abbrev <span class="keyword">in</span> states.items():</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s state is abbreviated %s and has city %s"</span>%(</span><br><span class="line">state,abbrev,cities[abbrev])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">10</span></span><br><span class="line">state=states.get(<span class="string">'Texas'</span>,<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> state:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Sorry, no Texas.'</span></span><br><span class="line"></span><br><span class="line">city=cities.get(<span class="string">'TX'</span>,<span class="string">'Does Not Exist'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The city for the state 'TX' is: %s"</span>%city</span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/11/5c86597527be6.png" alt=""></p><hr><blockquote><p>这是**《笨方法学Python》**的第二十一篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节学一个新概念—字典(dictionary)&lt;/p&gt;
&lt;p&gt;Python将其成为“字典”，有的语言里它的名称是“散列”。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>雷军：关于互联网的两次长考|大佬的思考|方法论</title>
    <link href="https://darerd.github.io/2019/03/10/%E9%9B%B7%E5%86%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E4%B8%A4%E6%AC%A1%E9%95%BF%E8%80%83-%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%80%9D%E8%80%83-%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>https://darerd.github.io/2019/03/10/雷军：关于互联网的两次长考-大佬的思考-方法论/</id>
    <published>2019-03-10T01:44:02.000Z</published>
    <updated>2019-03-10T02:21:42.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>温故而知新</p></blockquote><blockquote><p>产品新人们回过头来看看大佬当年的想法</p></blockquote><blockquote><p>也是蛮有启发的</p></blockquote><p>今天这一期我们分享的是<code>雷军</code>在<code>2008-12-22</code>发表在<code>新浪博客</code>上的一篇文章</p><blockquote><p>感兴趣的小伙伴，百度“雷军 新浪博客” 就可以找到了</p></blockquote><hr><h3><span id="关于互联网的两次长考雷军"> 关于互联网的两次长考—雷军</span></h3><p>2008年4月，李彦宏说，“五年后不再有互联网公司，因为所有公司都在用互联网”。这句话引起了很大轰动。我非常赞同他的观点。未来不再有所谓的互联网公司，我曾为这个问题在1999年就思考了半年时间，至于是不是五年时间，现在还不好说。</p><p>虽然我早在1993年就开始用互联网，1996年是发烧级的BBS站友，但关于互联网是什么这么简单的一个问题，我曾思考过两次很长时间，一次是1999年创办卓越网之前，一次是2004年出售卓越网之后，每次都长达半年时间。两次长考的结论也很简单：</p><ol><li><p>互联网首先是工具，未来不存在所谓的互联网公司。</p></li><li><p>互联网是一次观念的革命，只有改变观念，才能跟上互联网时代。</p></li></ol><h4><span id="一-1999年最困扰的问题互联网公司是什么"> <strong>一、1999年最困扰的问题：互联网公司是什么？</strong></span></h4><p>那是一个疯狂的年代。</p><p>美国互联网热潮从1995年Netscape上市开始拉开序幕，AOL, Yahoo, Amazon, eBay等公司陆续登场，NASDAQ指数1000点涨到创纪录的5132点。<br>2000年4月互联网泡沫破灭终止了这次热潮，接着大批 <code>.com</code> 公司关门，NASDAQ指数跌回1000多点。<br>这种疯狂是1998年传到中国的，到1999年达到巅峰。处在躁动中心的北京，每个人都有点慌乱。只要是互联网，无论做什么，不管是否能赚钱，都有VC的巨额美元投资。</p><p>我明白在这样的潮流面前，不能做时代的看客。但十年商业经验让我想不明白：**这些公司靠什么挣钱？什么时候能挣回烧掉的钱？**实在有太多想不通的问题，我决定先跳进去，边做边想。</p><p>1999年初，我在金山内部种了一块试验田，建立了一个专门的事业部，招了十多个人，做软件下载站，取名叫卓越网。很快我们做到了第一名。但接着问题出来了，做下载需要很多服务器和带宽，而当时服务器和带宽都非常贵，用户又不愿意付钱。没有任何收入，同时需要消耗大量的费用，这个业务如何支撑下去呢？软件下载业务每天着消耗的大量现金，我当时非常痛苦，内心有很多问题没有答案：<strong>互联网公司是什么样的公司？互联网公司靠什么挣钱？做什么样的互联网公司有前途？</strong></p><p>想了半年多时间，一直到1999年10月。有一天，我突然明白了：</p><ol><li><p>不存在所谓的互联网公司。<br><strong>互联网只是一个工具</strong>，未来每个公司都变成互联网公司。</p></li><li><p><strong>做电子商务最有前途</strong>。<br>因为互联网是一个先进的生产工具，传统公司应用互联网最快的方式就是电子商务，这就是所谓的“水泥＋鼠标”。当然，电子商务也是过度性名词，因为未来所有公司都会是电子商务公司。</p></li><li><p>当时我们做的软件下载不 下功夫做，因为<strong>软件下载投入太高，而想象空间有限</strong>。</p></li></ol><p>就这样，我痛下决心，放弃软件下载业务，转型做电子商务，做图书音像的网上零售。<br>为了把这件事情做大，1999年底，我说服了金山董事会把卓越分拆出来，单独运作。当时我非常自信，觉得已经想透了，一定能成功。我力主不融VC的钱，而是金山股东自己投资。后来，金山主要股东投资了1600万，因为联想是金山的大股东，也投资了几百万元。</p><p>那个时代，大家都是烧VC的钱。而卓越网，从一开始，我就坚信一定会成功，这种信心是用我们自己投入的1600万来表达的。</p><h4><span id="二-2004年卖了卓越后整整想了半年时间互联网到底是什么"> <strong>二、2004年卖了卓越后整整想了半年时间：互联网到底是什么？</strong></span></h4><p>2004年9月，我在出售卓越网的协议上正式签字了，亚马逊以7500万美元全资收购了卓越网。卓越网从2000年5月正式创办到出售，仅四年四个月时间。</p><p>对于创业者来说，卖掉亲手创办的企业，一定是件非常痛苦的事情。我为了尽快从痛苦的情绪中走出来，决定尽量不上卓越网，决定尽量不见卓越网老同事，把主要精力用来总结卓越网四五年的成与败，琢磨未来的发展机会。这个过程想了半年多，<br>后来主要在想：<strong>什么是互联网？为什么互联网公司毛利率高增长快？未来的发展趋势是什么？</strong></p><p>得出了如下的结论，今天回想起来也非常有意思：</p><ol><li><p><strong>开放和合作是互联网公司成功的关键</strong>。<br>互联网首先是一张无边无际的网，每个人都是节点，互联是互联网成功最关键的要素。任何封闭式的业务模式都会遇到很大挑战，今天Yahoo（一站式门户）困境也折射了我当年的想法。</p></li><li><p><strong>互联网公司最厉害是靠机器赚钱</strong>。一旦产品研发完成，用户量到了一定的规模，只要服务器开着就可以赚钱了。到了这个阶段，产品研发推广的边际成本为零，服务器带宽成本逐年下降，毛利率自然就上来了，业务增长速度也比较快。而且，机器是7X24小时工作的，当然运维人员要全天候确保运营质量。</p></li><li><p><strong>口碑营销和网盟是互联网公司营销核心</strong>。互联网公司直接面对所有用户，好产品仅靠口口相传就能成功。和拥有用户的其他互联网公司结盟推广，也是最有效的推广模式。</p></li><li><p><strong>互联网公司管理相对容易</strong>。首先是业务、内部运作系统高度IT化，这点和传统公司非常不同；其次，很容易推动量化管理；还有，对人的依赖并不高，很容易做知识管理，系统自动记录了大部分人的工作，人员流动对企业影响比较小。</p></li><li><p><strong>互联网公司靠提供服务来挣钱</strong>，而软件公司靠卖产品挣钱，这种模式就决定了软件公司的业务不容易持续稳定增长。一定要从卖产品模式走到卖服务的模式。</p></li><li><p><strong>互联网的关键就是快</strong>。互联网产品的模式就是研发人员和用户一起开发产品，有阶段性成果就先推出去，听用户反馈，按用户意见去修改。</p></li><li><p><strong>未来十年的热点是移动互联网，手机上网是一种趋势</strong>。</p></li></ol><p>我把这些全部总结成一条：<strong>互联网是一次观念革命，是“深度互联，全天候快速反应”的观念</strong>。<br>这里面有几个关键词，互联、全天候、快速。<br>因为是互联网，所以联盟非常关键，联盟是互联网业务必须考虑的最关键的因素，就是说如何整合上下流，如何整合更多的推广资源；<br>全天候，传统的业务是 5X8，而互联网必须是 7X24，必须确保任何时候业务都能正常运行；<br>快速，更是互联网的精粹，必须快速开发、快速推广、业务快速成长等，反应速度一定要比传统业务反应快十倍，才有更大的发展机会。</p><p>就是想清楚了这些，我做了两件事情：</p><ol><li><p>从2005年初开始我在金山内部发布了全面转型互联网的动员令，现在金山业务几乎全部来自互联网。</p></li><li><p>2006年初我毫不犹豫投身了移动互联网行业，比如投资了乐讯（移动互联网最大的社区）和UCWEB等。最近出任UCWEB董事长，为移动互联网行业摇旗呐喊，也是我深思后的决定。</p></li></ol><p><strong>在一些重大产业变革的时候，认真思考，的确可以帮助自己把握机会。</strong></p><hr><p>关于文章开头提高的未来的公司都是互联网公司的论述，我在36氪推荐的一篇文章也看到类似的描述。<br>2018年，全球科技企业股票缩水，这篇文章讲到，当所有的公司都是科技公司，那么科技公司的高估值就会下跌，就会挤科技泡沫。</p><hr><p>大家有任何想法，可以在评论区留言讨论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;温故而知新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;产品新人们回过头来看看大佬当年的想法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;也是蛮有启发的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天
      
    
    </summary>
    
      <category term="方法论" scheme="https://darerd.github.io/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="大佬思考" scheme="https://darerd.github.io/tags/%E5%A4%A7%E4%BD%AC%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Test20-列表的操作</title>
    <link href="https://darerd.github.io/2019/03/06/Test20-%E5%88%97%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://darerd.github.io/2019/03/06/Test20-列表的操作/</id>
    <published>2019-03-06T12:32:17.000Z</published>
    <updated>2019-03-06T13:21:21.851Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节我们来学习Python是怎么对列表实行操作的</p><a id="more"></a><p>[TOC]</p><h3><span id="示例"> 示例：</span></h3><p>当你看到<code>mystuff.append('hello')</code>这样的代码时，它已经在Python内部激发了一个连锁反应。以下是它的工作原理。</p><ol><li>Python看到你用到<code>mystuff</code>，于是就去找这个变量。也许它需要倒着检查看你有没有在哪里用<code>=</code>创建过这个变量，或者检查它是不是一个函数参数，或者看它是不是一个全局变量。不管哪种方式，它得先找到<code>mystuff</code>这个变量才行。</li><li>一旦它找到了<code>mystuff</code>，就轮到处理句点(<code>.</code>)这个操作符，而且开始查看<code>mystuff</code>内部的一些变量了。由于<code>mystuff</code>是一个列表，Python知道<code>mystuff</code>支持一些函数。</li><li>接下来轮到处理<code>append</code>。Python会将<code>append</code>和<code>mystuff</code>支持的所有函数的名称一一对比，如果确实有一个叫<code>append</code>的函数，那么Python就会去使用这个函数。</li><li>接下来Python看到了括号<code>(</code>并意识到：“奥，原来这应该是一个函数。”到了这里，它就正常调用这个函数了，不过这里的函数还要多一个参数才行。</li><li>这个额外的参数其实就是<code>mystuff</code>。很奇怪是不是？不过这就是Python的工作原理，所以请记住这一点，就当它是正常的好了。真正发生的事情其实是<code>appeng(mystuff,'hello')</code>，不过写法是<code>mystuff.append('hello')</code>。</li></ol><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ten_things=<span class="string">"apples oranges crows telephone light sugar"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"wait there's not 10 things in that list,let's fix that."</span></span><br><span class="line">stuff=ten_things.split(<span class="string">' '</span>)</span><br><span class="line">more_stuff=[<span class="string">"day"</span>,<span class="string">"night"</span>,<span class="string">"song"</span>,<span class="string">"frisbee"</span>,<span class="string">"corn"</span>,<span class="string">"banana"</span>,<span class="string">"gril"</span>,<span class="string">"boy"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(stuff)!=<span class="number">10</span>:</span><br><span class="line">next_one=more_stuff.pop()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"adding: "</span>,next_one</span><br><span class="line">stuff.append(next_one)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"there's %d items now."</span>%len(stuff)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"there we go: "</span>,stuff</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Let's do some things with stuff."</span></span><br><span class="line"><span class="keyword">print</span> stuff[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> stuff[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> stuff.pop()</span><br><span class="line"><span class="keyword">print</span> <span class="string">' '</span>.join(stuff)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>.join(stuff[<span class="number">3</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/06/5c7fbd99dc1cb.png" alt=""></p><h3><span id="本节需要学习的知识"> 本节需要学习的知识</span></h3><ol><li>把每一个被调用的函数翻译成Python实际执行的动作</li></ol><p><code>‘ ’.join(things)</code>其实就是<code>join(' ',things)</code>。</p><p><code>‘ ’.join(things)</code>可以翻译成“用<code>‘ ’</code>连接<code>things</code>”，而<code>join(' ',things)</code>意思是“为<code>‘ ’</code>和<code>things</code>调用<code>join</code>函数”。</p><ol start="2"><li><code>len()</code>函数</li></ol><p><code>len()</code> 方法返回对象（字符、列表、元组等）长度或项目个数。</p><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len( s )</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str = <span class="string">"runoob"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(str)             <span class="comment"># 字符串长度</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(l)               <span class="comment"># 列表元素个数</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>stuff[3:5]</code>的作用</li></ol><p>它会从<code>stuff</code>列表的第3个元素开始取值，知道第5个元素，注意这里并不包含第5个元素。</p><hr><blockquote><p>这是**《笨方法学Python》**的第二十篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节我们来学习Python是怎么对列表实行操作的&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《我的互联网方法论》|好的产品就是让用户离不开你|产品方法论</title>
    <link href="https://darerd.github.io/2019/03/06/%E3%80%8A%E6%88%91%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E6%96%B9%E6%B3%95%E8%AE%BA%E3%80%8B%E5%A5%BD%E7%9A%84%E4%BA%A7%E5%93%81%E5%B0%B1%E6%98%AF%E8%AE%A9%E7%94%A8%E6%88%B7%E7%A6%BB%E4%B8%8D%E5%BC%80%E4%BD%A0-%E4%BA%A7%E5%93%81%E6%96%B9%E6%B3%95%E8%AE%BA1st/"/>
    <id>https://darerd.github.io/2019/03/06/《我的互联网方法论》好的产品就是让用户离不开你-产品方法论1st/</id>
    <published>2019-03-06T10:06:24.000Z</published>
    <updated>2019-03-10T01:45:37.660Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是Darer</p><p>近期看了周鸿祎的书《我的互联网方法论》</p><p>整理了下看书时做的标注</p><p>并附上一些自己的理解</p><a id="more"></a><h3><span id="周鸿祎自述-我的互联网方法论"> 周鸿祎自述: 我的互联网方法论</span></h3><p><code>周鸿祎</code></p><ul><li><p>互联网革命是什么？那就是，消费者拥有了更多的知情权和选择权。</p><blockquote><p>互联网在给予消费者更多知情权和选择权的同时</p><p>也在减少消费者的知情权</p></blockquote></li><li><p>什么是商业模式？其实，商业模式不是赚钱模式。<br>它至少包含了四方面内容：产品模式、用户模式、推广模式，最后才是收入模式，也就是<strong>怎么去赚钱</strong>。一句话，商业模式就是你能提供什么样的产品，给什么样的用户创造什么样的价值，在创造用户价值的过程中，用什么样的方法获得商业价值。</p><blockquote><p>我的理解是商业模式不能只是做一锤子买卖，而是要从头到尾做一个<strong>赚钱的产线</strong>，源源不断。</p></blockquote></li><li><p><strong>判断是不是真正的推广，最简单的标准是把推广资源一撤，不再砸钱，看产品的用户量是不是往下掉</strong>。如果用户量一下子掉下来了，说明产品肯定存在问题。这个时候如果不对产品进行调整，你和团队将面临非常大的挑战。<strong>真正的推广是对产品的不断完善和提升</strong>。在推广的过程中，你要研究市场，跟目标用户打交道，了解用户真正的需求，了解用户使用产品时遇到的困惑和问题，再反馈到产品上进行改进，由此不断调整和完善。这样，即使推广没有取得理想的结果，但是通过推广，你发现了产品的问题，了解到真正的用户需求，发现了新的用户群，这些收获也远比单纯的产品安装量要有价值得多。</p><blockquote><p>看到一篇介绍<strong>趣头条</strong>的文章，2018年第四季度的营收虽然在增加，但是亏损仍在扩大，已接近4亿。<br>趣头条的一个营销套路就是为了吸引用户，对用户进行金钱补贴<br>这是在来品品这句话，还是挺有意思的<br>但是国内的环境是遍地撒钱，有时候，你不想上这个船，也没办法</p></blockquote></li><li><p>商业的本质就是让人性得到释放，颠覆式创新也不例外，归根结底就是怎样满足人性。</p></li><li><p>反思是360的文化，反思不是一件负面的事情，并不是做错事情了才需要反思。每个人每天都需要反思，经验是过去的，要敢于不断否定自己。</p><blockquote><p>产品人或者说每一位职业人都需要学会反思，学会复盘吧<br>可是敢于否认自己的错误，敢于改正自己坏习惯<br>也是挺难的</p></blockquote></li><li><p>在360，我们提倡“三个凡是”：凡是用户提的问题，一定要追根述源，找到问题的原因，从用户的角度想解决的方案；凡是负面的信息，即使是对手的枪稿，也要找到可以改进产品的启发点；凡是竞争对手的产品，都必然有学习借鉴的优点。</p><blockquote><p>用户至上、用户至上、用户至上</p></blockquote></li><li><p>你可能经常刷微博，但是在微博上你是得不到智慧的，大家还是要看书才行。微博上是像方便面一样的东西，各种心灵鸡汤，140个字的总结如果能让你顿悟，那你算是高人。但是，那些心灵鸡汤其实都是正确的废话。所以，我还是提倡大家要看书。</p><blockquote><p>听大佬的话，快去看书、看书、看书</p></blockquote></li><li><p>要找到自己的定位，找准自己的定位，然后像一把锥子一样，先在人们脑子中占据一个位置，而不是先去扩大市场份额。</p><blockquote><p>关于定位，有本书《定位》真的不可错过<br>在这一点，拼多多做的真不多<br>听到拼多多的BGM<br>你就会想起拼多多</p></blockquote></li><li><p>如果你只会生产硬件、卖硬件，一旦你的价值链被人免费，对不起，你最后只能沦为代工，挣点微薄的利润。要想生存下去，你需要建立一种新的商业模式，要创造新的价值链。所以，“硬件免费”必须要创造新的价值链来支撑，这也是传统企业转型互联网时必须要考虑的问题。</p><blockquote><p>这句话我不理解<br>说不清楚，总觉得哪里不对<br><code>如果你有想法，可以在评论区评论</code></p></blockquote></li><li><p>在我看来，包括智能手机、平板电脑在内，硬件的互联网化分为以下“四化”。</p><ol><li>商业模式互联网化。</li><li>产品体验互联网化。</li><li>市场推广的互联网化。</li><li>产品销售的互联网化。</li></ol><blockquote><p>太深奥，还无法理解<br><code>如果你有想法，可以在评论区评论</code></p></blockquote></li><li><p>超出预期的体验，不一定是给用户1万块钱，而是超出用户的期望，才能获得更高的用户满意度。</p><blockquote><p>雷军也提到过：为用户提供超出预期的产品<br>小米手机一直以来的营销也在贯彻这个思路<br>记得雷总在小米9的发布会上，印象最深的就是<br><strong>这个价钱能买到这些、那些还有这些</strong></p></blockquote></li><li><p>先创造用户价值，然后再产生商业价值</p><blockquote><p>用户至上、用户至上、用户至上</p></blockquote></li><li><p>虽然我们做产品时候，应该全方位系统性思考，应该考虑得面面俱到，但思考完了，要在众多的功能中找到一个点作为突破口。再大的市场也需要一个针尖一样的点做切入，所有成功的产品都要找到一个点，把有限的资源聚焦到一个点上，才能形成压强。</p><blockquote><p>互联网的标准思维：快速启动、MVP</p></blockquote></li><li><p>有两点很关键：第一从小处着眼，贴近用户需求心理；第二要小步快跑，快速出击，不断试错。我把这两点称为互联网上的“微创新”规律。</p></li><li><p>关于产品，我提两个数字概念。第一，产品刚出来的时候最不重要，哪怕第一天有1 000个用户，第二天有2 000个用户，第三天有3 000个用户，第四天有5 000个用户，这就是一条健康的曲线。但是如果我们花了很多钱做推广，结果第一天有1万个用户，第二天还是1万个用户，接着第三天8 000，第四天5 000。大家会更加喜欢哪条曲线？肯定是第一条增长曲线。所以，做产品不要在乎绝对数，而是要关注相对的增长趋势。 第二个数字，就是产品有很多环节，如果满分是1分，但每个环节我们都只做到0.8。你以为产品出来就是0.8分？错了，是0.8乘以0.8乘以0.8，总分是0.51。功能越多，数字就越小，产品失败得就越快。所以，功能更贵精，不贵多，要在每一个点上做到极致。</p><blockquote><p>只要在增长就说明攻略方向是对的，只要进一步提高攻略效率<br>但是增长不断衰减，说明方向是错的，前期跑到再快，如果这时<br>不做出反应，就很快泯然众人<br>有句话叫啥：先胖不算胖，后胖压倒炕</p></blockquote></li><li><p>用户使用你的产品，只关心你做的是什么东西，能解决什么问题，根本不听你背后的理念。</p><blockquote><p>非常对！！！<br>说的天花乱坠，不好使，也没人用</p></blockquote></li><li><p>互联网产品有几个容易被忽视的特点：</p><ol><li><p>互联网产品要有一个灵魂，要符合相关领域的游戏规则，能打动用户的心。</p><blockquote><p>产品的定位和Slogan</p></blockquote></li><li><p>互联网产品需要不断运营、持续打磨。好产品是运营出来的，不是开发出来的。</p><blockquote><p>好产品需要不断迭代，需要宣传、推广<br>好酒也怕巷子深</p></blockquote></li><li><p>大家都说产品要做到专注和极致。在产品方向上，一定要先学会做减法，而不是做加法。要先找对一个点做到极致，否则你什么功能都做，最后都不突出，没有鲜明的卖点。</p><blockquote><p>还是定位，围绕自己的核心功能画圆，不要画多个圆</p></blockquote></li></ol></li><li><p>究竟什么是好的产品？怎么做好的产品？在这里有一个衡量标准，就是让用户离不开你。</p><blockquote><p>就是让用户上瘾</p></blockquote></li><li><p>怎样才能找到用户的需要？我经常说，一线的客服、运营员工才是创新的动力。只有不断地接触用户，不放过每一个小抱怨，才能找到真正的点</p></li><li><p>在寻找用户点的时候，我们要抛弃一个专业人士的思维方式，把自己当成一个小白用户，否则你永远不知道用户真正需要什么。</p></li><li><p>找到用户的需要，下一步就要把这个点做到极致，给他好的体验。如果这个体验能够从微观入手，超出用户预期，你很容易就能做出好的东西。</p></li><li><p>我的观点是，不论产品名称还是功能名称，最好的就是一目了然，让人一眼能看明白到底解决了什么问题，不用动脑子。</p><blockquote><p>产品请名字越来越难了<br>马桶都出来了</p></blockquote></li><li><p>强需求产品可以自我发展成强大的渠道，而弱需求产品独立做很难，必须有一个强大的渠道。</p><blockquote><p>互联网领域最强的需求：就是搜索、社交和网购吧<br>移动互联网时代新增的需求：吃、行和娱乐</p></blockquote></li><li><p>有太多做产品的人有三个假设：<strong>第一是假设某个功能用户一定需要；第二是假设用户一定知道某个功能的存在；第三是假设用户一定会按照自己设计的方式使用</strong>。比如有一家公司找我来谈合作，说做了一个软件，功能是类似到邻居家串门，看到邻居的鞋很好看，一拍就可以在网上买了。我说不用那么麻烦，直接问他在哪儿买的不就可以了，所以这样的产品连第一关都过不了。</p></li><li><p>比尔 · 盖茨曾经说过，初出茅庐的时候你要自尊干什么？那自尊是假的，当你做出真正的好产品的时候，当你成功的时候，大家都会尊重你。</p><blockquote><p>等你成功的时候，你就可以给别人鸡汤喝了</p></blockquote></li><li><p>乔布斯还说过一句经典的话“Stay hungry, stay foolish”</p><blockquote><p>放低姿态，保持饥饿感</p></blockquote></li></ul><hr><p>以上是在看《我的互联网方法论》时做的一些标注</p><p>如果你觉得还不错，可以看一看</p><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>我的互联网方法论</code>，即刻下载</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我是Darer&lt;/p&gt;
&lt;p&gt;近期看了周鸿祎的书《我的互联网方法论》&lt;/p&gt;
&lt;p&gt;整理了下看书时做的标注&lt;/p&gt;
&lt;p&gt;并附上一些自己的理解&lt;/p&gt;
    
    </summary>
    
      <category term="方法论" scheme="https://darerd.github.io/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="阅读体会" scheme="https://darerd.github.io/tags/%E9%98%85%E8%AF%BB%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Test19-用循环语句、if语句和函数做一个小游戏</title>
    <link href="https://darerd.github.io/2019/03/05/Test19-%E7%94%A8%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%81if%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%87%BD%E6%95%B0%E5%81%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>https://darerd.github.io/2019/03/05/Test19-用循环语句、if语句和函数做一个小游戏/</id>
    <published>2019-03-05T11:52:46.000Z</published>
    <updated>2019-03-05T12:12:15.968Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>这一节我们用前面学习过的<code>if</code>语句、<code>for</code>语句、<code>while</code>语句和<code>def</code>定义函数等来做一个小游戏</p><a id="more"></a><p>[TOC]</p><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex35.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gold_room</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"this room is full of gold.How much do you take?"</span></span><br><span class="line">next=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"0"</span> <span class="keyword">in</span> next <span class="keyword">or</span> <span class="string">"1"</span> <span class="keyword">in</span> next:</span><br><span class="line">how_much=int(next)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">dead(<span class="string">"man,learn to type a number."</span>)</span><br><span class="line"><span class="keyword">if</span> how_much&lt;<span class="number">50</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Nice,you're not greedy,you win!"</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">dead(<span class="string">"You greedy bastard!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bear_room</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"there is a bear here."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"The bear has a bunch of honey."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"the fat bear is in front of another door."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"How are you going to move the bear?"</span></span><br><span class="line">bear_moved=<span class="keyword">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">next=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> next==<span class="string">"take honey"</span>:</span><br><span class="line">dead(<span class="string">"the bear looks at you then slaps your face off."</span>)</span><br><span class="line"><span class="keyword">elif</span> next==<span class="string">"taunt bear"</span> <span class="keyword">and</span> <span class="keyword">not</span> bear_moved:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The bear has moved from the door.You can go through it now."</span></span><br><span class="line">bear_moved=<span class="keyword">True</span></span><br><span class="line"><span class="keyword">elif</span> next==<span class="string">"taunt bear"</span> <span class="keyword">and</span> bear_moved:</span><br><span class="line">dead(<span class="string">"the bear gets pissed off and chews your leg off."</span>)</span><br><span class="line"><span class="keyword">elif</span> next==<span class="string">"open door"</span> <span class="keyword">and</span> bear_moved:</span><br><span class="line">gold_room()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"I got no idea what that means."</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cthulhu_room</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"here you see the great evil Cthulhu."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"He,it,whatever stares at you and you go insane."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Do you flee for your life or eat your head?"</span></span><br><span class="line">next=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flee"</span> <span class="keyword">in</span> next:</span><br><span class="line">start()</span><br><span class="line"><span class="keyword">elif</span> <span class="string">"head"</span> <span class="keyword">in</span> next:</span><br><span class="line">dead(<span class="string">"well that was tasty!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">cthulhu_room()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dead</span><span class="params">(why)</span>:</span></span><br><span class="line"><span class="keyword">print</span> why,<span class="string">"Good job!"</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"You are in a dark room."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"there is a door to your right and left."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"which one do you take?"</span></span><br><span class="line">next=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> next==<span class="string">"left"</span>:</span><br><span class="line">bear_room()</span><br><span class="line"><span class="keyword">elif</span> next==<span class="string">"right"</span>:</span><br><span class="line">cthulhu_room()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">dead(<span class="string">"you stumble around the room until you starve."</span>)</span><br><span class="line">start()</span><br></pre></td></tr></table></figure><p>这是一个选择的小游戏，每次不同的选择都会有不同的结果</p><p>建议仔细看这个代码，搞清楚逻辑关系</p><h3><span id="你可以看到的结果"> 你可以看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/05/5c7e625f81624.png" alt=""></p><h3><span id="本节需要注意的知识"> 本节需要注意的知识</span></h3><ol><li><code>exit()</code>语句</li></ol><p><code>exit()</code>可以中断某个程序，而其中的数字参数则用来表示程序是否遇到错误而中断。<br><code>exit(0)</code>表示程序是正常退出的<br><code>exit(1)</code>表示发生了错误，可以用不一样的数字代表不同的错误结果。<br>比如，你可以用<code>exit(100)</code>来表示另一种和<code>exit(2)</code>或<code>exit(1)</code>不同的错误</p><ol start="2"><li><code>int()</code>指令</li></ol><p><code>int()</code> 函数用于将一个字符串或数字转换为整型。</p><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">int</span><span class="params">(x, base=<span class="number">10</span>)</span></span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>x</code> – 字符串或数字。</li><li><code>base</code> – 进制数，默认十进制。</li></ul><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;int()               <span class="comment"># 不传入参数时，得到结果0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">3.6</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12'</span>,<span class="number">16</span>)        <span class="comment"># 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0xa'</span>,<span class="number">16</span>)  </span><br><span class="line"><span class="number">10</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'10'</span>,<span class="number">8</span>)  </span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><ol start="3"><li>为什么写<code>while True</code>？</li></ol><p>这样可以创建一个无限循环</p><hr><blockquote><p>这是**《笨方法学Python》**的第十九篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一节我们用前面学习过的&lt;code&gt;if&lt;/code&gt;语句、&lt;code&gt;for&lt;/code&gt;语句、&lt;code&gt;while&lt;/code&gt;语句和&lt;code&gt;def&lt;/code&gt;定义函数等来做一个小游戏&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Test18-while循环</title>
    <link href="https://darerd.github.io/2019/03/04/Test18-while%E5%BE%AA%E7%8E%AF/"/>
    <id>https://darerd.github.io/2019/03/04/Test18-while循环/</id>
    <published>2019-03-04T14:00:40.000Z</published>
    <updated>2019-03-04T14:35:59.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p><code>while</code>循环：<code>while</code>循环会一直执行它下面的代码块，直到它对应的布尔表达式为<code>False</code>时才会停下来</p><p><code>while</code>循环有一个问题，那就是有时它会永远不结束</p><p>为了避免这样的问题，你需要遵循下面的规定</p><ol><li>尽量少用<code>while</code>循环，大部分时候<code>for</code>循环是更好的选择</li><li>重复检查你的<code>while</code>语句，确定你测试的布尔表达式最终会变成<code>False</code></li><li>如果不确定，就在<code>while</code>循环的结果打印出你要测试的值，看看它的变化</li></ol><a id="more"></a><p>[TOC]</p><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex33.py</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">numbers=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">6</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"at the top i is %d"</span>%i </span><br><span class="line">numbers.append(i)</span><br><span class="line"></span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"numbers now: "</span>,numbers</span><br><span class="line"><span class="keyword">print</span> <span class="string">"at the bottom i is %d"</span>%i</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The numbers: "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line"><span class="keyword">print</span> num</span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/04/5c7d2f3800c1e.png" alt=""></p><h3><span id="附加练习"> 附加练习</span></h3><p><strong>把这个<code>while</code>循环改成一个函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line">numbers=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_1</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">global</span> i          <span class="comment">#global定义全局变量</span></span><br><span class="line"><span class="keyword">while</span> i&lt;n:</span><br><span class="line">numbers.append(i)</span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> numbers</span><br><span class="line"></span><br><span class="line">new_number=while_1(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The numbers: "</span>,new_number</span><br></pre></td></tr></table></figure><blockquote><p>这是**《笨方法学Python》**的第十八篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt;循环：&lt;code&gt;while&lt;/code&gt;循环会一直执行它下面的代码块，直到它对应的布尔表达式为&lt;code&gt;False&lt;/code&gt;时才会停下来&lt;/p&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt;循环有一个问题，那就是有时它会永远不结束&lt;/p&gt;
&lt;p&gt;为了避免这样的问题，你需要遵循下面的规定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽量少用&lt;code&gt;while&lt;/code&gt;循环，大部分时候&lt;code&gt;for&lt;/code&gt;循环是更好的选择&lt;/li&gt;
&lt;li&gt;重复检查你的&lt;code&gt;while&lt;/code&gt;语句，确定你测试的布尔表达式最终会变成&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果不确定，就在&lt;code&gt;while&lt;/code&gt;循环的结果打印出你要测试的值，看看它的变化&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Test17-for循环</title>
    <link href="https://darerd.github.io/2019/03/04/Test17-for%E5%BE%AA%E7%8E%AF/"/>
    <id>https://darerd.github.io/2019/03/04/Test17-for循环/</id>
    <published>2019-03-04T13:20:07.000Z</published>
    <updated>2019-03-04T13:43:19.097Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节主要学习<code>for</code>循环语句和如何创建一个列表</p><p>[TOC]</p><a id="more"></a><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex32.py</span></span><br><span class="line"></span><br><span class="line">the_count=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">fruits=[<span class="string">'apples'</span>,<span class="string">'oranges'</span>,<span class="string">'pears'</span>,<span class="string">'apricots'</span>]</span><br><span class="line">change=[<span class="number">1</span>,<span class="string">'pennies'</span>,<span class="number">2</span>,<span class="string">'dimes'</span>,<span class="number">3</span>,<span class="string">'quarters'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#this first kind of for-loop goes through a list</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> the_count:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"this is count %d"</span>%number</span><br><span class="line"></span><br><span class="line"><span class="comment">#same as above</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"A fruit of type: %s"</span>%fruit</span><br><span class="line"></span><br><span class="line"><span class="comment">#also we can go through mixed lists too</span></span><br><span class="line"><span class="comment">#notice we have to use %r since we don't know what's in it</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> change:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"I got %r"</span>%i</span><br><span class="line"></span><br><span class="line"><span class="comment">#we can also build lists,first start with an empty one</span></span><br><span class="line">elements=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#then use the range function to do 0 to 5 counts</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"adding %d to the list."</span>%i </span><br><span class="line"><span class="comment">#append is a function that lists understand</span></span><br><span class="line">elements.append(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#now we can print them out too</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> elements:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"element was:%d"</span>%i</span><br></pre></td></tr></table></figure><h3><span id="应该看的结果"> 应该看的结果</span></h3><p><img src="https://i.loli.net/2019/03/04/5c7d25d6b0e9a.png" alt=""></p><p><strong>这里需要注意的一点：</strong></p><p><strong>注意<code>%r</code>和<code>%s</code>输出结果的不同</strong></p><p>这个知识点，前面有介绍过</p><h3><span id="本节需要学习的知识"> 本节需要学习的知识</span></h3><ol><li><code>range()</code>指令</li></ol><p><code>range()</code> 函数可创建一个<strong>整数列表</strong>，一般用在 <code>for</code> 循环中</p><p><strong>标准语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range(start, stop[, step])</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如<code>range（5）</code>等价于<code>range（0,5）</code>;</li><li>stop: 计数到 stop 结束，但不包括 stop。例如：<code>range（0， 5）</code> 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：<code>range（0， 5）</code> 等价于 <code>range(0, 5, 1)</code></li></ul><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;range(<span class="number">10</span>)        <span class="comment"># 从 0 开始到 10</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">11</span>)     <span class="comment"># 从 1 开始到 11</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>)  <span class="comment"># 步长为 5</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>)  <span class="comment"># 步长为 3</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>, <span class="number">-10</span>, <span class="number">-1</span>) <span class="comment"># 负数</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>, <span class="number">-5</span>, <span class="number">-6</span>, <span class="number">-7</span>, <span class="number">-8</span>, <span class="number">-9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><ol start="2"><li><code>append()</code>指令</li></ol><p><code>append()</code> 方法用于在列表末尾添加新的对象。</p><p><strong>标准语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.append(obj)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>obj – 添加到列表末尾的对象。</li></ul><ol start="3"><li>如何创建二维列表</li></ol><p>就是在列表中包含列表，如<code>[[1,2,3],[4,5,6]]</code></p><hr><blockquote><p>这是**《笨方法学Python》**的第十七篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节主要学习&lt;code&gt;for&lt;/code&gt;循环语句和如何创建一个列表&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown写作必用软件|产品软件|4th</title>
    <link href="https://darerd.github.io/2019/03/04/Markdown%E5%86%99%E4%BD%9C%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6-4th/"/>
    <id>https://darerd.github.io/2019/03/04/Markdown写作必用软件-产品软件-4th/</id>
    <published>2019-03-04T01:02:48.000Z</published>
    <updated>2019-03-04T01:50:31.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文适合正在使用Markdown写作和准备学习Markdown写作的产品人</p></blockquote><p>本期主要介绍在使用Markdown写作时，有哪些软件是必不可少的，一定会用得到的</p><p>一篇文章主要包括三个要素：</p><ol><li>文字</li><li>图片</li><li>排版</li></ol><p>与此对应的，我们需要一款Markdown编辑器、一款截图软件和一款图床工具</p><p>[TOC]</p><a id="more"></a><h3><span id="markdown编辑器"> Markdown编辑器</span></h3><p>Markdown编辑器有很多，随便在知乎一搜，markdown编辑器推荐，就可以找到很多介绍的文章，这里我就不重复造轮子了。</p><p>我主要推荐一款Markdown编辑器–Typora</p><h4><span id="typora"> Typora</span></h4><p><strong>演示.demo</strong></p><p><img src="https://i.loli.net/2019/03/04/5c7c7d5b2e58a.gif" alt=""></p><p><strong>Typora设计的核心理念是：所见即所得</strong></p><p>软件的颜值非常高，而且<strong>完全免费</strong></p><p>不过Markdown新手需要一些时间去适应，开始用的时候会非常不习惯</p><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>typora</code>，即刻获得下载链接</p></blockquote><h3><span id="截图软件"> 截图软件</span></h3><h4><span id="snipaste"> Snipaste</span></h4><p>我认为这一款是windows系统中最好用的截图工具，简单、好用</p><p><strong>演示.demo</strong></p><p><img src="https://i.loli.net/2019/03/04/5c7c7f7af2c37.gif" alt=""></p><p><strong>核心功能是截图</strong></p><p><strong>特色功能是贴图</strong></p><p>都支持自定义快捷键，用起来非常方便</p><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>snipaste</code>，即刻获得下载链接</p></blockquote><h4><span id="screentogif"> ScreentoGif</span></h4><p>除了图片之外，越来越多人喜欢用gif图，来演示</p><p><strong>ScreentoGif录制简单，编辑功能强大</strong></p><p><img src="https://i.loli.net/2019/03/04/5c7c80e4a28fb.png" alt=""></p><p><img src="https://i.loli.net/2019/03/04/5c7c810ed760c.png" alt=""></p><p>把需要制作的gif的部分，放在框里，录制即可</p><p>支持导出gif、mp4等格式</p><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>screentogif</code>，即刻获得下载链接</p></blockquote><h3><span id="图床工具"> 图床工具</span></h3><h4><span id="picgo"> Picgo</span></h4><p>关于图床工具，我前面出过一期非常详细的介绍，<a href="https://coffee.pmcaff.com/article/1704562366483584/pmcaff?utm_source=forum&amp;newwindow=1" target="_blank" rel="noopener">这里是详细完备的图床工具介绍</a></p><p><strong>演示.demo</strong></p><p><img src="https://i.loli.net/2019/02/28/5c77ff44afc17.gif" alt=""></p><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>picgo</code>，即刻获得下载链接</p></blockquote><hr><blockquote><p>Markdown写作是有一定学习成本的，希望你可以坚持下去</p><p>最后会感受到Markdown写作的便捷之处</p></blockquote><hr><blockquote><p><strong>这是产品人必用软件系列的第四期</strong></p></blockquote><blockquote><p><strong>此系列逢五更新</strong></p></blockquote><blockquote><p><strong>也就是每月的5号、15号和25号更新</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文适合正在使用Markdown写作和准备学习Markdown写作的产品人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本期主要介绍在使用Markdown写作时，有哪些软件是必不可少的，一定会用得到的&lt;/p&gt;
&lt;p&gt;一篇文章主要包括三个要素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文字&lt;/li&gt;
&lt;li&gt;图片&lt;/li&gt;
&lt;li&gt;排版&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;与此对应的，我们需要一款Markdown编辑器、一款截图软件和一款图床工具&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://darerd.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>《浪潮之巅》|产品书单|第一期</title>
    <link href="https://darerd.github.io/2019/03/03/%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B-%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95-%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>https://darerd.github.io/2019/03/03/《浪潮之巅》-产品书单-第一期/</id>
    <published>2019-03-03T11:46:36.000Z</published>
    <updated>2019-03-06T10:07:27.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每一位产品人都应该多看书、看好书</p><p>只有这样才能不断进步</p><p>形成自己的方法论</p></blockquote><p><strong>这期推荐三本好书：</strong></p><ol><li>《浪潮之巅》</li><li>《谷歌是怎么运营的》</li><li>《我的互联网方法论》</li></ol><a id="more"></a><p>[TOC]</p><h3><span id="浪潮之巅"> 浪潮之巅</span></h3><p><code>author:吴军</code></p><p><strong>简介：</strong></p><blockquote><p>近一百多年来，总有一些公司很幸运地、有意识或无意识地站在技术革命的浪尖之上。在这十几年间，它们代表着科技的浪潮，直到下一波浪潮的来临。</p><p>从一百年前算起，AT&amp;T 公司、IBM 公司、苹果公司、英特尔公司、微软公司、思科公司、雅虎公司和Google公司都先后被幸运地推到了浪尖。虽然，它们来自不同的领域，中间有些已经衰落或正在衰落，但是它们都极度辉煌过。本书系统地介绍了这些公司成功的本质原因及科技工业一百多年的发展。</p><p>在极度商业化的今天，科技的进步和商机是分不开的。因此，本书也系统地介绍了影响到科技浪潮的风险投资公司，诸如 KPCB 和红杉资本，以及百年来为科技捧场的投资银行，例如高盛公司，等等。</p><p>在这些公司兴衰的背后，有着它必然的规律。本书不仅讲述科技工业的历史，更重在揭示它的规律性。</p></blockquote><p><strong>作者简介：</strong></p><blockquote><p>吴军博士，毕业于清华大学计算机系（本科）、电子工程系（硕士）和美国约翰 · 霍普金斯大学计算机科学系（博士）。在清华大学和约翰 · 霍普金斯大学期间，吴军博士致力于语音识别、自然语言处理，特别是统计语言模型的研究。他曾获得1995年全国人机语音智能接口会议的最佳论文奖和2000年Eurospeech的最佳论文奖。</p><p>吴军博士于2002年加入Google公司。在Google，他和Amit Singhal（Google院士，世界著名搜索专家）、Matt Cutts（Google反作弊官方发言人）等三位同事一起开创了网络搜索反作弊的研究领域，并因此获得Google工程奖。2003年，他和Google全球架构的总工程师朱会灿博士等共同成立了中日韩文搜索部门。吴军博士是当前Google中日韩文搜索算法的主要设计者。在Google其间，他还领导了许多研发项目，包括许多与中文相关的产品和自然语言处理的项目，并得到了当时公司首席执行官埃里克 · 施密特和创始人谢尔盖 · 布林的高度评价。此外，他还在谷歌黑板报上发表了《数学之美》系列博客。</p></blockquote><p><strong>目录：</strong></p><p><img src="https://i.loli.net/2019/03/03/5c7bb222c7804.png" alt=""></p><p><strong>豆瓣评分：</strong></p><p><img src="https://i.loli.net/2019/03/03/5c7bb25cc0542.png" alt=""></p><blockquote><p>读完这本书</p><p>对互联网的发展历程有了更好的理解</p><p>非常推荐读一读</p><p>书读起来很有趣，一点都不枯燥</p></blockquote><hr><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>浪潮之巅</code>，即刻获得电子书</p></blockquote><hr><h3><span id="谷歌是怎么运营的"> 谷歌是怎么运营的</span></h3><p><code>author:埃里克.施密特</code></p><p><strong>简介：</strong></p><blockquote><p>《重新定义公司：谷歌是如何运营的》作者是谷歌前CEO埃里克•施密特和前高级副总裁乔纳森•罗森伯格，他们亲自分享十余年来帮助谷歌成长所领悟到的管理启示：科技正在改变商业的方方面面，这种改变速度空前，而且仍在加速，公司若想在互联网时代站稳脚跟，就要制定新的商业规则。</p><p>《重新定义公司》披露了谷歌如何颠覆传统的MBA模式，建立独树一帜的管理哲学，作者分享了外界普遍好奇的企业文化、战略、人才、决策、沟通以及创新之道。埃里克•施密特和乔纳森•罗森伯格列举了谷歌历史上众多只有内部人员才知道的实例，其中许多事件更是第一次为广大读者公布。他们旨在将谷歌的管理秘密转化为人人皆可用的经验，帮助我们迎接变化世界中的巨大挑战。</p></blockquote><p><strong>作者简介：</strong></p><blockquote><p>埃里克•施密特（Eric Schmidt）</p><p>2001-2011年担任谷歌的首席执行官。在他的协助下，这家成立不久的硅谷公司成长为科技行业的全球领航者。他不仅负责建立合作关系和拓展商业人脉等对外事宜，还负责安排政府对话及建立适于高科技企业的领导方式。现任谷歌执行董事长。</p><p>乔纳森•罗森伯格（Jonathan Rosenberg）</p><p>2002年加入谷歌。乔纳森•罗森伯格第一次见到拉里•佩奇和谢尔盖•布林是在2000年，两年后，两人第三次提出邀请时，乔纳森才接受了这个工作机会。2011年4月之前，担任高级副总裁以及产品团队的管理人，负责谷歌消费者、广告商以及合作伙伴的产品设计、研发、升级工作，包括安卓系统、谷歌Search、Ads、Gmail、Apps、以及Chrome。他协力完善了谷歌的人才招聘制度与营销流程。</p></blockquote><p><strong>目录：</strong></p><p><img src="https://i.loli.net/2019/03/03/5c7bb5a99c95f.png" alt=""></p><p><strong>豆瓣评分：</strong></p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1551611346439.png" alt="1551611346439"></p><blockquote><p>这本书给我印象最深的有两个：</p><ol><li>不作恶</li><li>TGIF</li></ol><p>如果百度也能遵守“不作恶”的原则，也就不会被黑了</p></blockquote><hr><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p><p>公众号后台回复<code>谷歌是怎么运营的</code>，即刻获得电子书</p></blockquote><hr><h3><span id="我的互联网方法论"> 我的互联网方法论</span></h3><p><code>author:周鸿祎</code></p><p><strong>简介：</strong></p><blockquote><p>在很多方面，周鸿祎都是互联网领域的颠覆者。他重新定义了“微创新”，提出从细微之处着手，通过聚焦战略，以持续的创新，最终改变市场格局、为客户创造全新价值。他第一个提出了互联网免费安全的理念，也由此让奇虎360拥有了超过4亿的用户。</p><p>在《周鸿祎自述：我的互联网方法论》中，周鸿祎首次讲述了自己的互联网观、产品观和管理思想，厘清了互联网产品的本质特征和互联网时代的新趋势，列举了颠覆式创新在现实中的实践和应用。《周鸿祎自述：我的互联网方法论》首次解密360的产品秘籍和盈利模式，同时，针对目前传统企业的互联网转型焦虑，也提出了一套系统解决方案。</p></blockquote><p><strong>作者简介：</strong></p><blockquote><p>周鸿祎，中国互联网安全之父，奇虎360公司董事长，互联网新格局的缔造者，颠覆式创新家、知名天使投资人。曾供职于方正集团，后历任3721公司创始人、雅虎中国总裁等职务。周鸿袆带领奇虎360公司于2011年3月30日在美国纽交所上市，成为互联网安全、移动互联网行业的领导者和先行者。</p></blockquote><p><strong>目录：</strong></p><p><img src="https://i.loli.net/2019/03/03/5c7bb7de1d48d.png" alt=""></p><p><strong>豆瓣评分：</strong></p><p><img src="https://i.loli.net/2019/03/03/5c7bb9798c2ec.png" alt=""></p><blockquote><p>虽然360公司近来发展不顺利</p><p>360管家也是不受用户欢迎</p><p>不过周鸿祎对于互联网的理解、思考</p><p>真的很适合产品人去学习、体会</p></blockquote><hr><blockquote><p><strong>搜索微信号：<code>darerpm</code></strong>，关注公众号</p></blockquote><blockquote><p>公众号后台回复<code>我的互联网方法论</code>，即刻获得电子书</p></blockquote><hr><blockquote><p>这是产品人必读书单系列的第一期</p></blockquote><blockquote><p>此系列逢九更新</p></blockquote><blockquote><p>也就是每月的9号、19号和29号更新</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每一位产品人都应该多看书、看好书&lt;/p&gt;
&lt;p&gt;只有这样才能不断进步&lt;/p&gt;
&lt;p&gt;形成自己的方法论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这期推荐三本好书：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《浪潮之巅》&lt;/li&gt;
&lt;li&gt;《谷歌是怎么运营的》&lt;/li&gt;
&lt;li&gt;《我的互联网方法论》&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="产品书单" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
    
      <category term="产品书单" scheme="https://darerd.github.io/tags/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Test16-用if、else语句做一个小游戏</title>
    <link href="https://darerd.github.io/2019/03/03/Test16-%E7%94%A8if%E3%80%81else%E8%AF%AD%E5%8F%A5%E5%81%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>https://darerd.github.io/2019/03/03/Test16-用if、else语句做一个小游戏/</id>
    <published>2019-03-03T08:35:10.000Z</published>
    <updated>2019-03-06T15:39:23.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节我们利用前面学过的<code>if</code>、<code>else</code>和<code>elif</code>语言知识，做一个小游戏，比较简单，很好理解</p><p>[TOC]</p><a id="more"></a><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex31.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"""</span></span><br><span class="line"><span class="string">you enter a dark room with two doors.Do you go through door #1 or door #2?</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">door=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> door==<span class="string">"1"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"There's a giant bear here eating a cheese cake. What do you do?"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"1. Take the cake."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"2. Scream at the bear."</span></span><br><span class="line"></span><br><span class="line">bear=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> bear==<span class="string">"1"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The bear eats your face off.Good job!"</span></span><br><span class="line"><span class="keyword">elif</span> bear==<span class="string">"2"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The bear eats your legs off.Good job!"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Well,doing %s is probably better.Bear runs away."</span> %bear</span><br><span class="line"><span class="keyword">elif</span> door==<span class="string">"2"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"You stare into the endless abyss at Cthulhu's retina."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"1. Blueberries."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"2. Yellow jacket clothespins."</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"3. Understanding revolvers yelling melodies."</span></span><br><span class="line"></span><br><span class="line">insanity=raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> insanity==<span class="string">"1"</span> <span class="keyword">or</span> insanity==<span class="string">"2"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Your body survives powered by a mind of jello.Good job!"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The insanity rots your eyes into a pool of muck.Good job!"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"You stumble around and fall on a knife and die.Good job!"</span></span><br></pre></td></tr></table></figure><p><strong>需要注意的几点：</strong></p><ol><li><code>if</code>语句必须以<code>else</code>语句结尾，中间<code>elif</code>语句的数量没有限制</li><li><code>if</code>语句、<code>else</code>语句和<code>elif</code>语句中间可以任意插入<code>if</code>语句、<code>else</code>语句和<code>elif</code>语句</li></ol><h3><span id="你应该看到的结果"> 你应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/03/5c7b917568aa3.png" alt=""></p><hr><blockquote><p>这是**《笨方法学Python》**的第十六篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节我们利用前面学过的&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;else&lt;/code&gt;和&lt;code&gt;elif&lt;/code&gt;语言知识，做一个小游戏，比较简单，很好理解&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Test15-if和else语言</title>
    <link href="https://darerd.github.io/2019/03/02/Test15-if%E5%92%8Celse%E8%AF%AD%E8%A8%80/"/>
    <id>https://darerd.github.io/2019/03/02/Test15-if和else语言/</id>
    <published>2019-03-02T11:31:03.000Z</published>
    <updated>2019-03-06T15:45:28.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著<br>的学习思路和理解，如有不如之处，望指出！！！</p></blockquote><p>本节主要学习程序学习中都会学习的<code>if</code>和<code>else</code>语言，运用和理解起来也是非常简单</p><p>[TOC]</p><a id="more"></a><h3><span id="源代码"> 源代码</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex30.py</span></span><br><span class="line"></span><br><span class="line">people=<span class="number">30</span></span><br><span class="line">cars=<span class="number">40</span></span><br><span class="line">buses=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cars&gt;people:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"we should take the cars."</span></span><br><span class="line"><span class="keyword">elif</span> cars&lt;people:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"we should not take the cars."</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"we can't decide."</span></span><br><span class="line"><span class="keyword">if</span> buses&gt;cars:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"that's we could take the buses."</span></span><br><span class="line"><span class="keyword">elif</span> buses&lt;cars:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"maybe we could take the buses."</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"we still can't decide."</span></span><br><span class="line"><span class="keyword">if</span> people&gt;buses:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"alright,let's just take the buses."</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"fine,let's stay home then."</span></span><br></pre></td></tr></table></figure><h3><span id="应该看到的结果"> 应该看到的结果</span></h3><p><img src="https://i.loli.net/2019/03/02/5c7a6924c9c02.png" alt=""></p><h3><span id="本节需要注意的事"> 本节需要注意的事</span></h3><ul><li><strong>如果多个<code>elif</code>块都是<code>True</code>，Python会如何处理？</strong></li></ul><p>Python只会运行它遇到的是<code>True</code>的第一个块，所以只有第一个为<code>True</code>的块会运行。</p><ul><li><strong><code>if</code>和<code>elif</code>的区别</strong></li></ul><p>如果程序中判断事件很多，全部用<code>if</code>的话，会遍历整个程序，用<code>elif</code> 程序运行时，只要<code>if</code>或后续某一个<code>elif</code>之一满足逻辑值为<code>True</code>，则程序执行完对应输出语句后自动结束该轮<code>if-elif</code>（即不会再去冗余地执行后续的<code>elif</code>或<code>else</code>）</p><p><strong>示例如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line">a=<span class="number">88</span></span><br><span class="line"><span class="keyword">if</span> a&gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"优秀"</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">88</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"正好88"</span></span><br><span class="line"><span class="keyword">if</span>  a &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"良好"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"都不合格"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"* * "</span>*<span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> a&gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"优秀"</span></span><br><span class="line"><span class="keyword">elif</span> a == <span class="number">88</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"正好88"</span></span><br><span class="line"><span class="keyword">elif</span>  a &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"良好"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">u"都不合格"</span></span><br></pre></td></tr></table></figure><p><strong>以上指令的执行结果如下：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正好88</span><br><span class="line">良好</span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> * </span><br><span class="line">正好88</span><br></pre></td></tr></table></figure><ul><li><strong><code>if</code>、<code>elif</code>和<code>else</code>语句注意一下两点：</strong></li></ul><ol><li><code>else</code>、<code>elif</code>为子块，不能独立使用</li><li>一个<code>if</code>语句中可以包含多个<code>elif</code>语句，但是结尾只能有一个<code>else</code>语句</li></ol><hr><blockquote><p>这是**《笨方法学Python》**的第十五篇文章</p></blockquote><blockquote><p>希望自己可以坚持下去</p></blockquote><blockquote><p>希望你也可以坚持下去</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著&lt;br&gt;
的学习思路和理解，如有不如之处，望指出！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本节主要学习程序学习中都会学习的&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;else&lt;/code&gt;语言，运用和理解起来也是非常简单&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理学技术" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="https://darerd.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="笨方法学Python" scheme="https://darerd.github.io/tags/%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6Python/"/>
    
      <category term="Python" scheme="https://darerd.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
