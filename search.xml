<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Test8-变量、函数]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F25%2FTest8-%E5%8F%98%E9%87%8F%E3%80%81%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 这一节我们会学习到“函数”，函数可以做到以下三件事： 它可以给代码段命名，就跟“变量”给字符串命名一样 它可以接收参数，就想前面的脚本接收argv一样 使用上面第一条和第二条，可以创建**“小命令”** 文章主要分为以下部分： [TOC] 源代码 我们使用def指令建立函数 12345678910111213141516171819# ex18.py# this one is like your scripts with argvdef print_two(*args): arg1,arg2=args print "arg1:%r,arg2:%r"%(arg1,arg2)#ok,that *args is actually pointless,we can just do thisdef print_two_again(arg1,arg2): print "arg1:%r,arg2:%r"%(arg1,arg2)#this just takes one argumentdef print_one(arg1): print "arg1:%r"%arg1#this one takes no argumentsdef print_none(): print "I got nothing." print_two("darer","d")print_two_again("darer","d")print_one("First!")print_none() 应该看到的结果 对源代码的解释 首先我们告诉Python使用def命令创建一个函数，也就是define(定义)意思 紧挨这def命令的是函数的名字。本例子中，它的名字是print_two，但是名字可以随便取，比如叫darerpm，但是最好可以体现这个函数的功能 然后告诉函数，我们需要*args(asterisk argv),这和脚本的argv非常相似，参数必须圆括号()中才能执行 接着用冒号:结束本行，然后开始下一行缩进(可使用tab键缩进) 以print_two函数为例，其中第一行的作用是将参数解包，这个脚本参数解包的原理类似 为了演示它的工作原理，我们把解包后的每一个参数都print出来 函数print_two存在一些问题：它并不是创建函数最简单的方法，在Python函数中，可以跳过整个参数解包 的过程，直接使用()里边的名称作为变量名，这就是print_two_again实验的功能。 接下来的例子是print_one，它演示了函数如何接收单个参数 最后一个例子是print_none，它演示了函数可以不接收任何参数 常见问题 函数命名有什么规则？ 和变量名一样，只要以字母、数字和下划线组成，而且不是数字开始，就可以了 *args里的*是什么意思？ 它的功能是告诉Python把函数的所有参数都接收进来，然后放到名叫args的列表中去。和前面在用的argv差不多，只不过前者用在函数上。 这是**《笨方法学Python》**的第八篇文章 希望自己可以继续坚持下去 希望你也可以坚持下去 ​]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于手机厂商竞相推出折叠屏手机的思考]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F25%2F%E5%85%B3%E4%BA%8E%E5%8E%82%E5%95%86%E6%8E%A8%E5%87%BA%E6%8A%98%E5%8F%A0%E5%B1%8F%E6%89%8B%E6%9C%BA%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[前几年全面屏手机逐渐占领市场，手机屏幕逐渐向着拥有更好视觉体验的方向进发。 去年，柔宇科技发布第一款折叠屏手机(个人觉得设计挺丑的)，全球各大手机厂商均被爆出即将推出自家折叠屏手机。在MWC2019大会前夕，三星、华为先后发布自己折叠屏手机Hold和MateX。 [TOC] 1. 为什么厂商要竞相发布折叠屏手机？ 尽快的占领用户心智 现在手机同质化太严重，去除Logo后，很难辨别这是谁家的“娃”。所以，厂商犹如军备竞赛一般竞相发布自己的新形态手机。 全面屏手机，小米拔得头筹 折叠屏手机，三星、华为不遑多让 在公司营销的配合下，赚足了消费者的眼球，更快的占领用户的心智。 折叠屏是手机形态发展的下一个阶段，也有可能是终点 手机在经历全面屏的过渡期后，不可避免的要进入折叠屏 手机需要兼具通讯+上网两大功能 通讯需要手机具有更好的携带型和握感；上网需要手机有更好的视觉感官体验 折叠屏即可大屏看视频、打游戏；又可小屏放兜里 对手机的复杂使用场景有着更好的兼容性 2. 2019年，折叠屏手机会占据主流市场？ 2019年，折叠屏手机应该还不会占据主流手机市场，不会是普罗大众的选择，还是土豪们的“玩物” 主要有以下几个原因： 成本 电量 重量 成本 折叠屏采用的是OLED柔性屏幕，屏幕生产的良率低，成本高，现在手机均在一万三左右， 高昂的售价会导致其出货量低，产能低，成本下降的空间小。 去年，苹果手机售价也达到一万元，结果大家都知道，市场给苹果浇了一盆冷水。 而且最近几年，经济形势不好，消费者更会捂紧钱袋子 电量 消费者买折叠屏手机当然是为了享受到其大屏的爽感 我们知道，屏幕越大、电量的消耗也是极高 目前，电池技术的发展已到瓶颈，还没有突破性技术出现 虽然厂商推出了快充技术，但是电量仍然是会制约折叠屏手机发展的一个重要因素 重量 为了解决电量问题，目前方案多采用两款电池 但是两块电池又会带来手机重量的增加 前面我们提到，手机要求有较高的便携性，重量大的手机显然不会有好的体验 3. 折叠屏手机会带来机遇吗？ 折叠屏手机一定会进入主流市场，顺利的话可能需要三年左右的时间 折叠屏会带来与普通手机完全不同的交互体验 对于软件开发者来说，这里会潜藏这巨大的机会 我理想中的折叠屏手机]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[来看看产品汪的电脑里都有啥？|产品软件更新|1st]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F24%2F%E6%9D%A5%E7%9C%8B%E7%9C%8B%E4%BA%A7%E5%93%81%E6%B1%AA%E7%9A%84%E7%94%B5%E8%84%91%E9%87%8C%E9%83%BD%E6%9C%89%E5%95%A5%EF%BC%9F-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B0-1st%2F</url>
    <content type="text"></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件资源</category>
      </categories>
      <tags>
        <tag>软件资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo框架下，实现图片一键式上传到七牛云]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F23%2Fhexo%E6%A1%86%E6%9E%B6%E4%B8%8B%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%80%E9%94%AE%E5%BC%8F%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91%2F</url>
    <content type="text"><![CDATA[在使用hexo框架驱动个人博客时，图片的插入是一个比较费心的事情 以我为例，我使用hexo+Github搭建个人独立博客 但是Github仓库提供的存储空间是有限的，如果把图片保存到本地(对应的是Github仓库)，那么不多久就会占满整个空间。 最好的解决办法，就是把图片上传到图床，目前主流采用的是七牛云(可以通过我的链接注册：https://portal.qiniu.com/signup?code=3lnfyf7u5m5hu ，而且七牛云平台还会送你优惠券)存储图片。 但是hexo在搭建博客的过程中，对图片上传到七牛云的工作并不友好。 下面，就扒一扒，为了便于把图片上传到七牛云，我都采用了哪些方法？ 第一种方法 安装hexo-qiniu-sync插件 1npm install hexo-qiniu-sync --save hexo-qiniu-sync安装教程，可以参考这个博客 假设，我们安装好了hexo-qiniu-sync插件，我们数一数在写博客时，上传图片到图床需要几步？ 通过截图、复制等方式找到需要插入的图片demo.jpg 把图片放在**&gt;cdn&gt;images文件夹下** 在博客编辑器(我用的是Typora)，插入这个图片，需要一个这样的指令 这是在生成站点时，就会被同步上传到图床，并在博客网站上引用这个图片 但是这里有一个问题：Typora插入一个这样的指令，并不能同时预览这张图片 为了介绍空间，把放置在&gt;cdn&gt;images文件夹下的图片删除 以上方法存在两个不满意的地方： 图片还是先放在Github的本地仓库中，为了节省空间，需要定期删除 (如果我可以从本地的任意位置导入图片，并自动上传图床就太棒了) 在Typora中插入指令不能在预览到图片 (如果可以直接在Typora中预览到插入图片的效果，就太棒了) 第二种方法 安装hexo-admin插件，使用博客后端管理工具 1npm install hexo-admin --save 这个使用过程，我不太有发言权 我一直没有安装成功，原因目前还没有找到 hexo-admin插件使用教程，可以参考这篇博客 使用hexo-admin有两个好处 非常方便的管理后台的博客 可以实现将本地任意文件夹的图片上传到图床 解决第一种方法的第一个问题 但是我还是不满意，因为我已经用习惯了编辑器-Typora，就想用Typora编写自己博客，那这时hexo-admin就帮不了你了，怎么办呢？ 第三种方法 使用Mpic第三方软件，帮你一键上传到七牛云 如图所示，图片在上传到七牛云后，会生成一个链接，并自动复制到了剪贴板，此时你只要复制到Typora的文档中，就会自动生成图片了。 可以同步预览图片效果，非常方便。 需要”设置账号“和你的七牛云绑定 免费下载传送门 官网点这里 参考资料 所以利用Typora+Mpic 两个软件合作，可以非常方便的实现图片上传到图床，且还可以实现： 使用Typora编辑器编写博客 图片可以在任意本地文件夹中上传到七牛云 在编写博客时，可以同步预览效果 以上]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora+七牛云，高效写Markdown|产品必用软件|第1期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F22%2FTypora-%E4%B8%83%E7%89%9B%E4%BA%91%EF%BC%8C%E9%AB%98%E6%95%88%E5%86%99Markdown-%E4%BA%A7%E5%93%81%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6-%E7%AC%AC1%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[作为一名产品经理，日常免不了要和大量的文档打交道，比如：需求文档、竞品分析、MRD、PRD等等 而且产品人日常还要写写文章什么的。 如果用传统的word去写文档，真的是： 写作两分钟，格式两小时 而不甘心的你，在学习了Markdown之后，不在为格式发愁了，大大提高了输出效率 进门右转，Markdown入门 一篇文章主要有文字、链接、图片以及格式等组成 利用Markdown写作基本帮我们解决了格式排版的问题(如果对格式要求非常高，可以出门左转，学些Latex排版) 但是所有的Markdown编辑器都不能很好的解决图片的问题，图片多为本地保存，既占空间，还不能移动到其他文件夹，所以想，如果可以上传到图床就好了。 最好可以一键式操作。 下面就是见证奇迹的时刻！ 首先给大家推荐一篇博客，本文借鉴了这篇文章的内容。 1. Markdown编辑器–Typora Typora是windows系统最好看的编辑器(个人认为：颜值最高)，但是对新手不是太友好，需要适应其“所见即所得”的理念。 这是操作界面，干净、简约 免费下载传送门 Typora官网 2. 图片–最好用的截图工具–Snipaste windowns系统最好用 核心功能有截图、贴图两个 截图 贴图 免费下载传送门 官网点这里 参考资料 3. 图床—用于存储写作用到的图片 推荐 七牛云 为什么是七牛云： 提供稳定的存储服务， 是免费的 大家都在用 七牛云图床使用指南 4. 一款帮助你摆脱本地图片路径困扰，一键上传到七牛云的工具 MPic windows系统少有的可以方便上传到图床的工具(且只支持七牛云) 如图所示，图片在上传到七牛云后，会自动生成一个链接，并自动复制到了剪贴板，此时你只要复制到Typora的文档中，就会自动生成图片了。 而且你随时的分享，都不会受到影响！ 需要”设置账号“和你的七牛云绑定 免费下载传送门 官网点这里 参考资料 更多有趣的使用技巧，需要你自己去探索了！]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件教程</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python_文件IO_知识]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F22%2FPython_%E6%96%87%E4%BB%B6IO_%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[在通过《笨方法学Python》学习利用Python读取、读写文件的过程中，需要掌握一些基础知识。 [TOC] open命令 write命令 close命令、read命令 1. open命令 open()指令的作用是打开文件 标准的语法如下： open(file[, mode[, buffering[, encoding[, errors[, newline[, closefd=True]]]]]]) 指令的参数说明： file： 要打开的文件名，需加路径(除非是在当前目录)。唯一强制参数 mode： 文件打开的模式 buffering： 设置buffer（取值为0,1,&gt;1） encoding： 返回数据的编码（一般为UTF8或GBK） errors： 报错级别（一般为strict，ignore） newline： 用于区分换行符(只对文本模式有效，可以取的值有None,’\n’,’\r’,’’,’\r\n’) closefd： 传入的file参数类型（缺省为True） 常用的mode参数有哪些： ‘r’:以只读模式打开(缺省)，(必须保证文件存在) ‘w’:以只写模式打开。若文件存在，则会自动清空文件，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。 ‘a’:以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。 ‘+’:以读写模式打开。 各参数之间的关系：详见下图 参考的一些博客，讲的更加详细： 1 2 3 2. write命令 wite()指令可将任何字符串写入一个打开的文件。Python字符串可以是二进制数据，而不是仅仅是文字。 write()指令的标准语法如下： filename.write(string) 1234567# 打开一个文件fo=open('foo.txt','w') # 如果这么写： fo=open("foo.txt","w") 运行结果会有不同吗？fo.write('I like coding.\n')# 回想下 `\n` 的作用是什么？# 关闭文件并保存fo.close() 3. close命令、read命令 close()命令用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作， 否则会触发 ValueError 错误。 close()方法允许调用多次。用 close（）方法关闭文件是一个很好的习惯 close()指令的标准语法如下： fileObject.close() read()命令方法从一个打开的文件中读取一个字符串。Python字符串可以是二进制数据，而不是仅仅是文字。 read()指令的标准语法如下： flieObject.read([count]) 在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。 下面的代码接上面的代码： 1234fo=open('fo.txt','r+')str=foo.read(6)print "读取的字符是：",strfo.close() 运行看一看输出结果 输出结果为：I like 注意：空格也是一个字符 全文参考博客]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test7-读取文件和读写文件]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F21%2FTest7-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%92%8C%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ ex15 涉及两个文件：一个是ex15.py文件，一个是ex15_sample.txt文件。该文本文件的内容如下： This is stuff I typed into a file. It is really cool stuff. Lots and lots of fun to have in here. ex15.py 的作用就是用自己设计的脚本“打开”txt文件。 文章主要分为以下部分： [TOC] 原文—摘录至《笨方法学Python》第三版 &amp; 123456789101112131415161718192021222324252627282930313233343536# ex15.pyfrom sys import argvscript,filename=argvtxt=open(filename)print "Here's your file %r."%filenameprint txt.read()print "Type the filename again:"file_again=raw_input('&gt; ')txt_again=open(file_again)print txt_again.read()# ex16.pyfrom sys import argvscript,filename=argvprint "We're going to erase %r." %filenameprint "If you don't want that,hit CTRL-C(^C)."print "If you do want that,hit RETURN."raw_input("?")print "Opening the file..."target=open(filename,'w')print "Truncating the file. GoodBye!"target.truncate()print "Now I'm going to ask you for three lines."line1=raw_input("line 1: ")line2=raw_input("line 2: ")line3=raw_input("line 3: ")print "I'm going to write these to the file."target.write(line1)target.write("\n")target.write(line2)target.write("\n")target.write(line3)target.write("\n")print "And finally,we close it."target.close() 应该看到的结果 推荐使用windows下的Powershell（命令行） 12345678910&gt; python ex15.py ex15_sample.txtThis is stuff I typed into a file.It is really cool stuff.Lots and lots of fun to have in here.Type the filename again:&gt; ex15_sample.txtThis is stuff I typed into a file.It is really cool stuff.Lots and lots of fun to have in here. 1234567891011121314&gt; python ex16.py test.txtWe're going to erase test.txt.If you don't want that,hit CTRL-C(^C).If you do want that,hit RETURN.?Opening the file...Truncating the file. GoodBye!Now I'm going to ask you for three lines.I'm going to write these to the file.line1: Hello worldline2: Hello Pythonline3: let's go!!!I'm going to write these to the file.And finally,we close it. 附加练习 以下摘录自原文 每一行都写一下注释 利用pydoc 功能查一下read()命令、write()命令、close()命令等]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品问答第1期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2F%E4%BA%A7%E5%93%81%E9%97%AE%E7%AD%94%E7%AC%AC1%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[写在前面的话： 产品问答是一个从对产品的思考窗口，每个月更新一期，内容主要包括以下三部分： [TOC] 希望大家通过自问自答、他问我答、他问我答的方法，不断的思考、不停的复盘 逐渐形成自己产品方法论！！！ 自问自答 他问我答 互联网创业已经到了停滞阶段，未来几十年间有机会成为红海的领域是什么？ 互联网发展的第一阶段: 制造了一个机器，可以全球互联，被称为电脑 基于此，软件方面： 出现了操作系统，搜索引擎，电子商务，网络视频，社交平台，博客平台等等 主要是提高了你工作，办公的效率 互联网发展的第二阶段: 制造了一个机器，可以随时上网，可以打电话（当然伴随着通信技术的发展），称为手机 基于此，软件方面 出现了两大操作系统，打车平台，外卖平台，即时通信平台，社交平台大爆发，地图导航平台，短视频平台等等 这时互联网更多是一种娱乐消费沟通的工具 前两个阶段，无论电脑，还是手机都是你的工具，你用的时候，它才有用 个人认为，第三个阶段，互联网应该变被动为主动，也就是你不用的时候，它也有用 所以出现了车联网，智能家居，物联网等等 即使你人并没有在使用它，但这些机器依然可以工作，给你提供服务。 应该会在2020-2025年出现爆发 【每日一问】支付宝沾福卡的商业目的是？ 看了很多，大家都提到了社交 可我不这么认为 因为大家还是会通过微信沟通，不会用支付宝，摆脱不了支付工具的属性 无论有没有复制卡，只要交换福卡，都需要加好友，有了复制卡，提高了用户间的互动性，增加了用户停留在支付宝的时间，这很重要，停留在支付宝的时间越长，使用次数越多，支付宝广告营销的效果就越好。 所以你会发现支付宝的活动理解起来就有些困难，不简单，因为操作简单，用户停留的时间短。 综上: 提高广告效果 提高阿里支付宝运营，产品等团队的api 增加用户停留时间和打开次数 至于社交，个人认为，推出这么一个活动，为了社交，是不太可能的（历史证明，熟人社交，微信不可 动摇） 阿里应该站住钉钉这个位置，而不是发力熟人社交。 他问他答]]></content>
      <categories>
        <category>产品问答</category>
      </categories>
      <tags>
        <tag>产品问答</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTex:参考文献引用的方法]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FLaTex-%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[LaTex排版时，引入参考文献的方法 引入参考文献主要分为两种： 不使用BibTex 使用BibTex 这里我们主要介绍更为复杂的第二种：使用BibTex引入参考文献 利用BibTex的方法引入文献： 分为以下四步： 用LaTex编译写好的 .tex 文件，这是会生成一个 .aux文件，这是告诉BibTex将使用那些引用 用BibTex编译 .aux文件（有些仅编译 .bib文件，也可以） 再次用LaTex编译 .tex 文件，这是文档已经插入了参考文献，但是引用的编号不对 最后在用LaTex编译一次 .tex文件，这是会自动生成正确的引用顺序（引用顺序是与在文章中引用文献的先后顺序有关） 如果你采用的是TexStudio作为编译器，具体的操作方法如下： 按F6编译写好的 .tex 文件 按F8编译生成的 .aux 文件 按F6编译写好的 .tex 文件 按F6编译写好的 .tex 文件 以上就是使用LaTex排版时，遇到的引入参考文献的解决方法]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法基本编辑指南]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FMarkdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E6%9C%AC%E7%BC%96%E8%BE%91%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[Markdown语法基本编辑指南 Markdown语言侧重于内容编写，而不是排版，主要用于写 Blog 本指南所用Markdown编辑器软件:Typora 0.9.60 Typora 0.9.60 版本支持HTML和Markdown两种语言，但是两者不可交叉使用。 Markdown语法 突出显示 12==我是高亮== （默认为黄色)`我是标记` 字体修饰 1234**加粗***斜体*&lt;u&gt;下划线&lt;/u&gt;~~删除线~~ 自动编号 1[TOC] 硬换行符 123&lt;br/&gt;shift+enter双击space键，右侧会出现一个灰色的向下箭头 字体颜色、字号、大小 1234&lt;font color=red&gt;我是红色&lt;/font&gt;&lt;font face=黑体&gt;我是黑体&lt;/font&gt;&lt;font size=5&gt;我是5号字体&lt;/font&gt;&lt;font size=5 color=red face=黑体&gt;红色5号黑体字&lt;/font&gt; 上下标 12H^2^H~2~O 插入表情 1:happy: 引用 1&gt; 水平分割线 12---*** 数学表达式 12使用$$符号包裹的Tex命令右键&gt;插入&gt;公式 标注 12这是一个注释[^注释][^注释]： 这是一个注释 插入图片(默认为 居中) 12右键&gt;插入&gt;图像可以直接从“剪贴板”复制过来 调整图片尺寸 12&lt;img src='图片网址或者图片文件地址' style='width:300px;height:100 px'/&gt;&lt;img src='图片网址或者图片文件地址' style='zoom:50%'/&gt; 插入视频 1将视频文件拖放到Typora中，Typora会自动插入视频 HTML常用语法 居中 1&lt;center&gt;居中&lt;/center&gt; 高亮（默认为黄色） 1&lt;mark&gt;高亮&lt;/mark&gt; 字体修饰 1234&lt;b&gt;加粗&lt;/b&gt;&lt;i&gt;斜体&lt;/i&gt;&lt;u&gt;下划线&lt;/u&gt;&lt;s&gt;删除线&lt;/s&gt; 上下标 12&lt; SUP &gt; I’m feeling high. &lt;/ SUP &gt; &lt; SUB &gt; I’m feeling low. &lt;/ SUB &gt;]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown:从0到1入门]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FMarkdown-%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Markdown:从0到1入门 [TOC] 写在前面的话： 博主于2019年1月4号开始接触 Markdown语言，此前从未听说过；而且也非计算机背景。 所以本文非常适合新手==从0到1入门== 0.第零步 认识 Markdown 语言： 一篇详细的关于Markdown的介绍 Markdown语言侧重于内容编写，而不是排版，主要用于写 Blog 1.第一步 到这一步，我们知道Markdown是一种编译语言，算是HTML的一个子集，主要作用是让你专注于写作，“易读”、“易写”、“易记”。 ​ 既然是一种语言，那就需要能够编辑它和翻译它的工具—Markdown编辑器 ​ 我试了很多编辑器，如：小书匠、Bookpad、网易云笔记、简书，用来用去最后最爱的还是Typora。 ​ 不过Typora和前面介绍的这些不太一样，它不支持左右分屏预览，而是所写及所得(卖个关子，用了你就清楚啦)。我不建议新手从Typora入手学Markdown，它的预览模式对新手很不友好；建议新手从网易云笔记或者简书的编辑器(线上编辑器，不需要下载软件，学习成本低)入手学习。 到了这一步，你了解了Markdown语言，也知道需要编译工具， 但是这里我必须要告诉你一个事实:markdown 没有统一的规范，每家编辑器都想实现特殊语法让自己的产品更好用，所以不同编译平台会有一篇不兼容 一篇详细的介绍Markdown编辑器的帖子 2. 第二步 如果你看到这里，恭喜你，终于可以开始学Markdown语法了。 这里就先推荐我自己写的一篇Markdown语法基本入门的帖子 ​ 这里附上**#Typora编辑器基本编辑指南#**的md文件，供学习。 下载地址 种草几个不错的帖子： LaTex开源小屋 帖子2 网上有很多资源，自己取挖掘啦 3. 第三步 到了这一步，你应该已经用线上编译器做过一些练习和学习了，如果你还很兴趣，就可以下载一些编译器软件了，强烈推荐Typora Typora官网 但是每一款编译器都有其优缺点，下面是一个关于Typora不足的讨论，可以看一下。偷偷告诉你，这个知乎问答的提问者就是我啊，可以点一下关注 讨论的链接 加油！坚持就是胜利！]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTex:从0到1入门]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FLaTex-%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[写在前面的话： 博主于2019年1月2号开始接触 LaTex语言,也非计算机背景。 所以本文非常适合新手==从0到1入门== 第零步 认识 LaTex ： 一篇详细的关于LaTex的介绍 LaTex适合文章等的排版，让你专注于结构和内容 关于和 word对比，孰优孰劣的问题 word更易上手，是一种文档处理软件 LaTex上手更难，是一种排版工具 LaTex 和 word 优劣的讨论帖 第一步 到这一步，我们知道LaTex是一种电子排版系统，是公认的数学公式排得最好的系统，主要作用是让你专注于写作，得到高质量的排版输出。 ​ 学习LaTex，那就需要能够编辑它和翻译它的工具—LaTex编译器(小编自己起的名字😆 ) ​ 我试了很多编译器，如：Lyx、TeXworks、WinEdt，用来用去最后最爱的还是TexStudio。 ​ 我建议新手可以先从线上编辑器(如：Overleaf) 先学习。 一篇详细介绍LaTex编译器的帖子 第二步 如果你在线上试了试LaTex练习，还是想学，那么你在电脑上安装LaTex运行的环境，这里推荐下载Texlive。 一篇介绍LaTex软件下载的帖子 当你安装好Texlive后，电脑就有了LaTex的编译环境， ​ 这时，你需要一个好用的第三方编译器来帮助你编译 ​ 我自己最喜欢的LaTex编译器—TexStudio ​ 下载地址 种草几个LaTex学习社区： LaTex开源小屋 LaTeX 快速入门 网上有很多资源，自己取挖掘啦 第三步 我是因为要写毕业论文，需要排版，所以开始学习LaTex； ​ 参考我的学习经验，我建议是找一份模板，然后去研究这部分模板； ​ 我就是发现网上的论文模板和学校要求的有出入，然后自己就试着对模板 ​ 去修改，就是在这样的过程中，慢慢有了提高； ​ 现在也算是入门了。 推荐一些模板网站： ​ 网站1 ​ 网站2 最后祝你成功！！！]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习中需要了解的Python知识]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F19%2F%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84Python%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[在通过《笨方法学Python》学习Python的过程中，作者在每一节，提出了一些Python的知识，以让读者提前研习。 Pydoc命令 input() 和 raw_input() 命令的区别 import命令 1. Pydoc命令 pydoc — Documentation generator and online help system 帮你从代码和注释自动生成文档的工具 所以我们可以利用pydoc查询某些命令的用法 123# 比如我想查input命令的用法# 可以在命令行键入以下指令python -m pydoc input 2. input() 和 raw_input() 命令的区别 Python2.x 中 input() 相等于 eval(raw_input(prompt)) ，用来获取控制台的输入。 raw_input() 将所有输入作为字符串看待，返回字符串类型。 而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ int, float ）。 12345注意：input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。 参考资料 3. import命令 利用import语句来引入python中的模块(module) 语法如下： 123456import module1[, module2[,... moduleN]]# 示例# 想要导入模块 math.py，需要把命令放在脚本的顶端：import math# 一个模块只会被导入一次，不管你执行了多少次import。# 这样可以防止导入模块被一遍又一遍地执行 Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中 from…import 语句 ，语法如下： 1234from modname import name1[, name2[, ... nameN]]# 示例# 要导入模块 fib 的 fibonacci 函数from fib import fibonacci 参考资料]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test6_参数、变量]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest6-%E5%8F%82%E6%95%B0%E3%80%81%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 &amp; 1234567891011121314151617181920212223242526272829303132# ex13.pyfrom sys import argvscript, first, second, third=argvprint "The script is called:",scriptprint "Your first variable is:",firstprint "Your second variable is:",secondprint "Your third variable is:",third# ex14.pyfrom sys import argvscript, user_name =argvprompt='&gt; 'print "Hi %s, I'm the %s script."%(user_name,script)print "I'd like to ask you a few questions."print "Do you like me %s?"%user_namelikes=raw_input(prompt)print "Where do you live %s?"%user_namelives=raw_input('&gt; ')print "What kind of computer do you have?"computer=raw_input(prompt)print"""Alright, so you said %r about liking me.You live in %r. Not sure where that is.And you have a %r computer. Nice!""" %(likes,lives,computer) 应该看到的结果 原文作者不建议使用python的IDLE运行程序，推荐使用windows下的Powershell（命令行） 不清楚为什么不建议使用IDLE 12345&gt; python ex13.py 1st 2nd 3rdThe script is called:ex13.pyYour first variable is:1stYour second variable is:2ndYour third variable is:3rd 123456789101112131415&gt; python ex14.py darerHi darer, I'm the ex14.py script.I'd like to ask you a few questions.Do you like me darer?&gt; yesWhere do you live darer?&gt; chinaWhat kind of computer do you have?&gt; lenovoAlright, so you said 'yes' about liking me.You live in 'china'. Not sure where that is.And you have a 'lenovo' computer. Nice! 需要注意的几个地方 怎么在当前文件夹运行Powershell 利用命令行指令 cd 在当前文件夹 shift+鼠标右键 选择“打开powershell&quot; 注意ex14.py中，raw_input()的用法 为什么ex14.py 中，键入的字符没有单引号，但是输出的结果中却有单引号（’ '）呢？ 因为%r是调试专用，它输出的是“原始表示”出来的字符 而%s是为了给用户显示 附加练习 以下摘录自原文 是否可以用双引号定义prompt变量的值？ argv和raw_input()有什么不同？ 如果参数是在用户执行命令时就要输入的，那就是argv 如果是在脚本运行过程中需要用户输入，那就使用raw_input() argv就是所谓的”参数变量“（argument variable），这个变量保存着你运行Python脚本时传递给Python脚本的参数。 脚本中出现import语句，非常重要，它用于导入模块（module）]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test2_数字和数学计算]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest2-%E6%95%B0%E5%AD%97%E5%92%8C%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 附加练习 原文—摘录至《笨方法学Python》第三版 1234567891011121314151617print "I will now count my chickens:"print "Hens" , 25+30/6print "Roosters", 100-25*3%4print "Now, I will count the eggs:"print 3+2+1-5+4%2-1/4+6print "Is it true that 3+2&lt;5-7"print 3+2&lt;5-7print "What is 3+2?",3+2print "What is 5-7?",5-7print "Oh, that's why it's False."print "Is it greater?",5&gt;-2print "Is it greater or equal?",5&gt;=-2print "Is it less than or equal?",5&lt;=-2 遇到的问题 利用Python做四则运算非常简单，但是除法运算略有一些复杂 例如： 123print 5/2 # 输出结果是整数2# 对于整数除法来说，输出结果会自动(四舍五入)取整 为了解决以上除法运算时出现的问题，我们需要理解浮点数 1232.0 # 这是一个浮点数(float)print 11.0/4.0# 输出结果是2.75 可以使用小括号强制计算的先后顺序 布尔值也是基本数据类型 比较运算的结果直接输出布尔值（True or False） 12print 2&gt;4# 输出结果是False 附加练习 以下摘录自原文 每一行的代码用#写注释，说明一些这一行的作用 使用浮点数重新写一下ex3.py]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test1_第一个程序]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest1-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 1234567print "Hello world"print "Hello again"print "I like typing this"print "This is fun"print 'Yay! printing'print "I'd much rather you 'not'."print 'I "said" do not touch this.' 遇到的问题 如果用双引号” “ ，把字符串包起来，那么，句中不能用双引号，只能用单引号‘ ’ 如果用单引号‘ ’ ，把字符串包起来，那么，句中不能用单引号，只能用双引号&quot; &quot; 否则就会出现如下结果： 1234&gt;&gt;&gt; print " I"d much rather you "not"."SyntaxError: invalid syntax&gt;&gt;&gt; print ' I 'said' do not touch this.'SyntaxError: invalid syntax 解决办法 书写时，注意这个细节，按照规范书写即可 附加练习 以下摘录自原文 多打印一行脚本 让脚本只打印一行 如果在代码前加一个“#”，会出现什么效果呢？ 程序中注释是非常重要的，我们可以在一段代码的前面加上一个字符&quot;#&quot;，来把这段代码注释掉，而不被Python执行。 为什么 Print “Hi # there.” 里的#没被忽略掉呢？ 这行代码里的#处于字符串内部，所以它就是引号结束前的字符串中的一部分，这时它只是一个普通字符，而不是代表注释的意思。]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test3_变量和命名]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest3-%E5%8F%98%E9%87%8F%E5%92%8C%E5%91%BD%E5%90%8D%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 附加练习 原文—摘录至《笨方法学Python》第三版 &amp; 123456789101112131415161718192021222324252627282930313233343536# ex4.py#cars=100space_in_car=4.0drivers=30passengers=90cars_not_driven=cars-driverscars-driven=driverscarpool_capacity=cars-driven*space_in_a_caraverage_passengers_per_car=passengers/cars-drivenprint "There are",cars,"cars available."print "There are only ",drivers,"drivers available."print "Ther will be",cars_not_driven,"empty cars today."print "We can transport",carpool_capacity,"people today."print "We have",passengers,"to carpool today."print "We need to put about",average_passengers_per_car,"in each car."# ex5.py#my_name='Zed A. Shaw' # 《笨方法学Python》作者my_age=35my_height=74 #inchesmy_weight=180 #lbsmy_eyes='Blue'my_teeth='while'my_hair='Brown'print "Let's talk about %s." %my_nameprint "He's %d inches tall." %my_heightprint "He's %d ponds heavy." %my_weightprint "Actually that's not too heavy."print "He's got %s eyes and %s hair." % (my_eyes,my_hair)print "His teeth are usually %s depending on the coffee." %my_teethprint "If I add %d ,%d ,and %d I get %d. " %(my_age,my_height,my_weight,my_age+my_height+my_weight) 遇到的问题 一些关于字符串（string）的知识 12345# 使用“ 或 ‘ 来创建字符串print '这是一个字符串'print "这也是一个字符串"# 字符串也可以相加print "Hello" + ' world' 关于变量名的知识 1# 变量名设置的要求：使用下划线分割的小写字母 代码中 %s 、%d 和 %r 是起什么作用？ 12345# %s 、%d 和 ％ｒ 是一种”格式控制工具“，＃指令告诉Ｐｙｔｈｏｎ 把右边的变量带到字符串，并把变量的值放到％ｓ等所在的位置＃如果变量是字符串，使用％ｓ＃如果变量是数字，使用％ｄ＃无论变量是什么，都可以用％ｒ 附加练习 以下摘录自原文 单等号和双等号有什么不同？ 如何将浮点数四舍五入？ 使用ｒｏｕｎｄ（）函数]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test4_字符串练习]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 &amp; 1234567891011121314151617181920212223242526272829303132333435# ex6.pyx="There are %d types of people." %10binary="binary"do_not="don't"y="Those who know %s and those who %s." %(binary,do_not)print xprint yprint "I said: %r." % x print "I also said: '%s'." %y hilarious=Falsejoke_evaluation="Isn't that joke so funny?! %r " print joke_evaluation % hilariousw="This is the left side of ..."e="a sting with a right side."print w+e # ex8.pyfomatter="%r %r %r %r"print fomatter %(1,2,3,4)print fomatter %("one","two","three","four")print fomatter %(True,False,False,True)print fomatter %(fomatter,fomatter,fomatter,fomatter)print fomatter %( "I had this thing.", "That you could type up right." "But it didn't sing." "So I said goodnight." ) 遇到的问题 ex8.py 的代码中 %r打印出来的是单引号，但是实际上用的双引号 python会用最有效的方式打印出字符串，而不是完全按照你写的方式来打印。 True和False是Pyhthon的关键字，用来表示真和假的概念。如果加了引号，就变成了字符串，无法实现原来的功能。 %r的作用 %r是用来调试（debug）比较好，因为它会显示变量的原始数据，而%s、%d等符号是用来向用户显示输出的。 附加练习 以下摘录自原文 每一行加一段注释 最后一行输出既有单引号又有双引号，你觉得这背后的机制是什么？]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test5_更多字符串练习]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest5-%E6%9B%B4%E5%A4%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 、 &amp; 1234567891011121314151617181920212223242526272829303132333435363738# ex10.pytabby_cat="\t I'm tabbed in."persian_cat="I'm split \n on line. "backslash_cat="I'm \\ a \\ cat."fat_cat= """I'll do a list:\t * Cat foog\t * Fishies\t * Catnip \n \t *Grass"""print tabby_catprint persian_catprint backslash_catprint fat_cat# ex11.pyprint "How old are you?",age=raw_input()print "How tall are you?",height=raw_input()print "How much do you weigh?",weight=raw_input()print "So, you're %r old,%r tall and %r heavy."%(age,height,weight)#ex12.pyage=raw_input("How old are you? ")height=raw_input("How tall are you? ")weight=raw_input("How much do you weigh? ")print "So, you're %r old,%r tall and %r heavy."%(age,height,weight) 需要注意的几个地方 python中 \t 的效果，类似于在word写作中，tab键起到的作用； \n 的效果，类似于在word写作中，enter 键起到的作用； 在ex11.py 程序中，每行的print后面加了个逗号（，），这样print就不会输出换行符而结束这一行了。 python 中可以在一组三引号（&quot;&quot;&quot;）之间放入任意多行的文字。 附加练习 以下摘录自原文 下面是python支持的转义序列 12345678910\\ # 反斜杠（\）\' # 单引号\" # 双引号\a # ASCII 响铃符\b # ASCII 退格符\f # ASCII 进纸符\r # ASCII 回车符\uxxxx # 值为16位十六进制值xxxx的字符（仅适用于Unicode）\Uxxxxxxxx # 值为32位十六进制值xxxxxxxx的字符（仅适用于Unicode）\v # ASCII 垂直制表符 Python 的raw_input实现的是什么功能？以及其他用法 input()和raw_input()有何不同？]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我是如何利用不同的网盘管理文件的？]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F01%2F%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BD%91%E7%9B%98%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[之前，我和普通人一样，把文件上传到百度云，比如电影、软件、文档等等，但是在前几天，我在整理电脑时，当天从百度云下载了很多文件，利用 PanDownload (下载地址) 下载的，被百度识别到异常，给我限速了！！！很生气，我分享到云端的文件，我还被限速了！(确实，我利用破解软件下载，也有责任) 因此，我由此开始考虑，自己本地文件应该怎么样管理呢？放在一家网盘中，肯定是不行了，需要利用文件的特性，利用不同的网盘平台。 首先，我把文件做了以下分类： 绝对隐私文件：私密照片、视频；加密文档；等等 私人文件：照片、视频（非私密）；文档（活动策划、方案、论文等） 公共资源：电影、音乐、软件、教程、电子书、文档 等等 绝对隐私文件 没有绝对安全的网盘，这一类文件最好不要放在云端！！！ 建议：备份在私人硬盘 私人文件 我把私人文件分为两类： 长期保存 短期保存 需长期保存的文件 建议：可先暂存云端，定期备份到本地 以我为例： 照片类：我的主要是旅游、活动合影、留念这些；需要存储空间大，方便手机上传，可随时下载本地 我利用的是谷歌相册，主要是看中两点： 谷歌相册无限空间 谷歌家更放心些（建议关闭所有共享功能） 当然使用谷歌相册，你需要梯子 才能用 视频类、文档类：我是压缩后，保存到百度云盘 仅短期保存的文件 一般我都是压缩后，保存到百度云盘 但是对一些文件，我们想在电脑、PC、笔记本之间快速共享，仅利用网盘的共享功能，而不把文件存储起来，这里我推荐两种方法： 对于小文件（Word、PPT、表格、照片等），我推荐坚果云 ，非常良心，免费版每30天，有1G的上传流量和3G的下载流量，上传、下载都是满速，无广告！！！ 小文件，基本够用的！！ 对于一些大文件（设计稿、视频处理等等），我推荐GoodSync , 介绍说明 ，可以实现不同终端之间数据的同步共享，就是一神器。 这里下载神器 公共资源 公共资源主要有：好用的软件、电子书、电影、教程、模板等等 建议： 电子书、软件等分享价值的、较为稀缺、难搞的文件，放在城通网盘 城通网盘有400G空间、分享给别人还会有收益奖励，下载速度也还可以， 所以为什么不把自己手里的资源再共享的同时还可以赚钱呢？！ 电影、视频类，建议百度云 因为你去搜电影资源多是百度云分享，此时把电影等下载到本地在传到别的网盘是费时费力的，不如留在百度云盘，毕竟还有在线播放功能。 以上，就是我利用不同网盘管理文件的方法 如果你有更好的想法，可以下方留言讨论，欢迎转发分享！]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件教程</category>
      </categories>
      <tags>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F01%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客框架下，模板的选择与主题优化]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F01%2F30%2FHexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E4%B8%8B%EF%BC%8C%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%80%89%E6%8B%A9%E4%B8%8E%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[折腾了两三天，零基础的我，终于找到一个喜欢的模板，并做好了优化 编译环境：（Windows 10 操作系统） Git version：2.20.1 Node version：10.15.0 模板Next version：5.1.4 Markdown编辑器 version：0.9.64 关于利用GithubPages和Hexo搭建个人独立博客，和下载Hexo主题模板的教程，可以查阅 ，有非常简单易懂的教程 Next模板主题优化 选择Scheme Next模板内置四种不同的主题，可以自定义开启，参考文档： 选择Scheme 设置语言 参考文档：设置语言 如果你想设置多种语言，可以参考以下指令： 1234language: - zh-Hans - en - zh-hk .yml 文件修改是需要注意：每一个值的冒号后面都有一个半角空格！ 未生效的写法：title:Darer‘Blog 能生效的写法：title:[空格]Darer‘Blog 设置菜单 参考文档：设置菜单 补充说明： 123456789menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive about: /about/ || user #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 以上设置 菜单栏 的指令 也决定了 菜单栏各项菜单的顺序，以上面的指令为例，顺序依次为：主页、标签、目录、归档、关于 设置侧栏 参考文档：设置侧栏 补充说明： 123456789101112# Sidebar offset from top menubar in pixels (only for Pisces | Gemini).###侧栏与顶部菜单栏的 空隙距离 offset: 12 # Back to top in sidebar.(only for Pisces | Gemini). ### 侧边栏加入一个 回到顶部 按钮 b2t: false # Scroll percent label in b2t button. ## 侧边栏加入一个 阅读进度 按钮 scrollpercent: true # Enable sidebar on narrow view (only for Muse | Mist). ##适配 小窗口 onmobile: false 设置头像 参考文档：设置头像 设置作者昵称 参考文档：设置作者昵称 博客描述 参考文档：博客描述 设置字体 参考文档：设置字体 设置代码高亮 参考文档：设置代码高亮 侧边栏 社交链接 参考文档：社交链接 友情链接 参考文档：友情链接 打赏功能设置 参考文档：打赏功能设置 提醒：注意图片的格式（是.jpg还是.png） 站点建立时间 参考文档：站点建立时间 微信公众号订阅 参考文档：微信公众号订阅 提醒：此特性在版本 5.0.1 中引入 引入三方服务以优化模板 添加文章评分功能 参考文档：添加文章评分功能 我还没试过，感兴趣可以参考以上文档说明 添加文章分享功能 参考文档：文章分享 更多功能 如果你还还想添加更多功能，比如： 增加版权信息 在线联系 点击出现小爱心 自定义鼠标加载方式 等等 可以参考以下博客： nMask’s Blog Hexo-Next-主题优化 [hexo搭建个人博客–NexT主题优化] 如果你在使用时，遇到了一些“稀奇古怪”的问题，可以查看下这些博客： nMask’s Blog 「Hexo On Win10」新手搭建博客过程 最后，祝你顺利，过程很枯燥，也不会一帆风顺，但是，相信自己可以战胜困难。 如果，你有任何问题，都可以和我联系，这是传送门 ,随时联系]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next模板</tag>
      </tags>
  </entry>
</search>
