<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[应届生：为何你的工资会比老员工高？]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F16%2F%E5%BA%94%E5%B1%8A%E7%94%9F%EF%BC%9A%E4%B8%BA%E4%BD%95%E4%BD%A0%E7%9A%84%E5%B7%A5%E8%B5%84%E4%BC%9A%E6%AF%94%E8%80%81%E5%91%98%E5%B7%A5%E9%AB%98%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[在应届生市场上，**“倒挂”**是一个蛮普遍的现象(至少我身边的朋友多如此) 受到一位朋友的启发，在思考 为什么企业给应届生的工资会比去年入职的老员工高呢？ 最近看到这篇文章，很受启发 文章中的老员工指的是刚入职1-2年的员工 企业在雇佣员工时，就已经把未来增值的那部分钱提前包含在薪酬里了。 企业在招人时，不光要考虑应聘者是否可以满足目前的需求，还要考虑是否能满足未来一段时间的需求。不然当员工跟不上企业发展时，再重新换人损失的成本就会更大（这部分成本可不仅仅是钱这么简单，还有时间成本、机会成本、内部磨合成本、培训成本等等）。 这就意味着企业为应聘者开出的薪资待遇，有一部分是用来购买应聘者现在尚未具备（但未来可能会）的能力。 所以我们可以将应届生薪资分成两部分： 确定的部分：经验、个人能力、自身资源等 不确定的部分：未来的潜力（应届生的主要卖点） 确定的部分会遵循当时的市场价，一分钱一分货 而对于不确定的部分，则需要企业进行评估 这时，就会出现应届生薪资高于老员工的情况。 但需要注意的是，公司此时正在回收老员工身上的投资——在老员工身上所投入的购买潜力的成本。 而应届生的投资回收，才刚刚开始。 对于老员工来说，薪资没有时刻跟随市场价增加，是不是就亏了？ 不是的。 第一、企业帮员工抵御了市场价格波动风险——人才市场上的价格不会永远上升，也会有年景不好薪资下降的情况，但大多数企业只要盈利尚可，都不太可能出现降薪的情况。 第二、员工在工作过程中，经验和能力都在持续增加，当他再次在市场上询价时，也会得到更高的待遇报酬。 所以，我们身边常见的情况，就是新员工入职后，可能两三年收入没有大幅度上涨，但跳槽之后，薪水一下子就翻倍了。 即使是收入停滞的阶段，个人的经验、能力也在持续上涨 这种交易模式，在过去是较为公平合理的，因为大多数行业的薪资短期（1-3年）内不会有特别大的变动。 但现在情况开始变得不太一样，一方面是通货膨胀的影响，另一方面是很多行业开始进入产业升级，市场竞争激烈，相关从业者的待遇在短时间内出现大幅度增长。(互联网公司就是一个典型) 可能今年你入职的时候价格是10K，到了明年应届生的价格就是15K，这就出现了倒挂的情况，属于市场竞争导致的结果（这种情况会造成部分的市场价值溢价）。 于是人才市场上出现了微妙的平衡：员工将已有的工作经验拿到市场上去变现，从而达到增加收入的目的；企业为了控制成本，也不会频繁调整员工的薪资。 很受启发，其实这也是一种投资 这种情况在现阶段是较为合理且公平的方式：增加人才流动性，这样最终企业和个人都会在人才市场上，达到更好的供需平衡。 不过面对这样的情况，很多大企业还是进行薪资结构的调整（这类公司愿意为优秀人才付出更多成本），比如将薪资结构改为基础工资+绩效，保证「付出与回报对等」。每年进行全员薪资普调，避免人才流失。 （但是，请记住，公司的调薪政策都是基于你入职时的薪资来决定的，且都是小幅调薪，不可能出现大幅度薪水猛涨的情况，因为从公司层面上讲，进行大幅度调薪政策所付出的管理成本远高于小范围人员流失。） 最后再用几句话做个总结 理论上，能力相同的老员工和应届生收入相差不会太大，但因为企业为应届生未来的潜力也买了单，导致应届生收入比老员工要多不少。 企业为员工的潜力先行买单，在员工之后一段时间内，会优先收回之前的投资成本（除非此人特别优秀，能为公司带来更大价值）。 员工的收入增长可以分成两个阶段，变现期与积累期。变现期就是刚入职的那会，已有的经验能力和潜力一起打包变现；积累期则是变现之后收入没有明显增长的时期，新老员工收入相差很大，就是因为新员工正处于变现期，而老员工则在积累期。（如下图） 新老员工在某一时间点处于不同阶段所造成的收入差 对个人的启示(值得思考的四条职场建议) 跳槽是增加收入的好办法，要谨慎把握机会。这一步没走好，会带来很多损失。 多关注市场行情，了解自己的身价，比起薪资成长空间更为重要，积累资本，才能在下一次变现期获得更多回报。 公司对你的期望，会在给你的待遇上直接体现出来，你拿到手多少钱，就说明你在公司眼里值多少钱。 老员工值钱的原因还是经验与能力的提升，如果工作时间长但能力没有上升，依然在市场上卖不出好价钱。 应届生薪资公式 应届生薪资=实际价值+市场溢价+潜力价值+学校品牌价值+学历价值 实际价值：应聘岗位的市场价值 市场溢价：由于人才竞争等导致的薪酬提高，当然增加的薪资是符合市场规律的，但是如果过高，就如同房价一样，有泡沫了 潜力价值：面试表现，个人能力，思维等会提高自己的潜力价值，就是offer有sp、ssp的嘛 学校品牌价值：985和211的应届生薪资略有不同 学历价值：专科、本科、硕士薪资也不同 真的非常感谢作者的这篇文章，很受启发]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人脸识别取厕纸的意义是啥？|产品问答|第2期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F15%2F%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%8E%BB%E5%8E%95%E7%BA%B8%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E5%95%A5%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[产品人只有不断思考、复盘，逐步形成自己方法论，才能形成有效的护城河 俗话说：“三人行，必有我师” 产品人应该多看看同行对事情的理解和分析角度 以下内容来自产品相关社区，如有侵权，请联系删除 [TOC] Q1:在杭州火车站发现站内厕所有个人脸识别取手纸的终端一体机，不知道人脸识别取手纸的意义是啥？ 主要功能：厕所入口处有个人脸识别取手纸的终端机，每10秒钟可以人脸识别取一次。不知道这样做有什么意义，虽然确实用上了黑科技。但是目的呢？统计多少个人用完一卷纸吗？感觉没有意义啊，顶多有个用完手纸通知打扫阿姨来补充纸就行了啊，难道是人脸识别一下让人有个危险意识已经录下你了不能浪费纸吗？（这个可以有，但是感觉用纸多少这个不用那么太在意吧）不过站内厕所外边有个男女厕所位使用状况实时统计展示显示大屏，这个倒是觉得还蛮好的，可以看到挤不挤，要不要进去之类的。你们觉得呢？ author:泽度 @人人都是产品经理社区 Answer 无利不起早，企业做一个产品总有某些利益，无论是个体还是组织 无金钱利益：单纯的理想，想做一件事(这种情况太少，而且缺乏目标性也往往难成)； 直接金钱利益：产品直接变现 间接金钱利益：政府补贴、资本投资、跨界合作等； 原始积累：商业探索、数据收集、运营积累等； 根据你所提到的人脸识别取手指，成本不会低，这种很大程度是组织制作； 人脸数据库是在公安，在国家手里，那么多少也有国家支持； 产品很难直接商业变现，从目前市场分布来看还是在初期体验阶段； 由此，该产品更大可能是 1. 政府背后支持； 2. 智能科技产品技术、应用探索，以及技术、数据、运营积累； 3. 可能存在的数据商业交易行为。 注：某一事物对我们而言也许看起来没有太大价值，但存在即是合理，他或许对某些事物推动有所帮助，亦或者增加公职人员政绩这般。 比较认可是政府推动，我觉得更多是弥补天网漏洞，对追踪疑犯很有帮助 Q2：微信公众号的“点赞”到“好看”到“在看”，你觉得哪个更契合场景？ 微信再次悄悄进行功能改动，即微信公众号文章右下角的“好看”换成了“在看”；同时，第一个点击文章“在看”的读者，在看一看中会有一个爱心图标，即：首个“在看”用户才会拥有爱心图标，其他用户可以为这个用户点赞，来作为感谢他分享的方式。 可是“在看”这个词非常有机械感，有种为什么要人来确认的感觉？ author:迷宫小巷 @人人都是产品经理社区 Answer 估计是为了充实[看一看]栏目的内容，[看一看]里每天的文章屈指可数（可能是好友太少？）希望[看一看]能发挥一个以好友推荐为机制的内容分发渠道的作用。 如果用[好看]，文章质量通常要好到让用户发出wow~（8分以上吧） 才会驱使用户点下，让别人知道这才是我的品位 ，我觉得好看的文章都是精品（￣_,￣ ） 如果用[在看]，文章达到“哎呦还不错哦”的水准（≥6分吧）就足以让我点下了，“我在看这个耶，没有特别好但也值得一看，你要不要也看看？” 提问的作者真的很仔细，没看到这个答案，自己还真的没有注意到这个细节，给提问者点赞 关于这个问题，自己很不理解，吃不透背后的心理逻辑 Q3:为什么百度问答没有发展成知乎？ 百度问答很早就有了，且最开始做的不错。 后来就被知乎掀翻了。 最开始知乎很专业，讨论比较小众 但是现在讨论的东西，和百度知道也差不多了 author:连长 @人人都是产品经理社区 百度的入口是个问题，搜索本身面向的用户太宽泛，知道最开始也是通过搜索问答引入的，没有独立，这就很难界定内容的属性，大家搜的问题信息量大，面很广，也不够具体。另一点百度知道早期做的时候，互联网没现在这么复杂，而且很好的满足了大家的普遍的提问需求，当然了时间久了，流量稳定后，大部分用户开始借助这一渠道做推广，而知道的杂乱很难营造类似知乎这样的社区氛围，这个时候再想挽回也就很难了 百度对知道的定位和维护是最大的问题吧 知道是百度的一个小产品，而知乎全部身家就是知识问答社区 公司对产品的重视自然不一样，资源倾斜也不同 此外，百度知道做大之后，维护跟不上，东西良秀不齐，会慢慢被营销充斥，这样贡献精品回答的少数人会渐生反感，逐渐被主打差异化的知乎、豆瓣的等挖走了，百度贴吧的没落也是如此 还有没有搭上移动互联网时代的大环境 Q3:瑞幸、每日优鲜经常发券我理解，货拉拉为啥也要发券？ 前段时间搬家所以下载了货拉拉，结果发现这段时间他每隔几天就给我推送“XX元门槛优惠券已入账，用卷下单更优惠哦~~~”频率堪比瑞幸咖啡给我送券。可是这不是个拉货的APP吗！就算是便宜了，我没货也不可能变出来货啊！！那发优惠券是为了干嘛？促活的话感觉也达不到啊 author:魏雅 @人人都是产品经理社区 我认为是可以促活的，大多数人运货频率不会很高，属于临时刚性需求。其实说刚性都勉强了因为一方面竞品多另一方面有的时候将就将就货也能拉回去没必要叫货拉拉。 所以这时候不断的推送优惠券一方面加深对品牌的印象，另一方面在用户心理种草“我很优惠”“用我划算”。 这样用户要用的时候，第一时间就想起来，我要用拉货软件，并且我要用货拉拉！ 首先，下载了app的用户，自然是存在需求的潜在用户 利用人的趋利心理，当你再次想拉货时，你第一回答、反应就是我要用货啦啦，占据用户的心智 敢肯定货啦啦一定会出分享好友会免单等营销行为]]></content>
      <categories>
        <category>产品问答</category>
      </categories>
      <tags>
        <tag>产品问答</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test22-Python中字典、模块等的知识入门]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F13%2FTest22-Python%E4%B8%AD%E5%AD%97%E5%85%B8%E3%80%81%E6%A8%A1%E5%9D%97%E7%AD%89%E7%9A%84%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 上一期，我们学期了字典(dictionary)这个知识 因为后面要学习面向对象的编程：OOP，为了更好的学习和理解OOP的知识 这一期，先学习下字典和模块的知识 [TOC] 字典(dictionary) 字典是一种可变容器模型，且可存储任意类型对象。 字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示： 1d = &#123;key1 : value1, key2 : value2 &#125; 键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一 键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行 12345&gt;&gt;&gt;dict = &#123;'a': 1, 'b': 2, 'b': '3'&#125;&gt;&gt;&gt; dict['b']'3'&gt;&gt;&gt; dict&#123;'a': 1, 'b': '3'&#125; 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组 谈一下我的理解，不一定正确 上面所说的键，也就是key。要求其是唯一的，不可重复 很想软件注册时的用户名，要求不能和他人重复，且一般只能用数字、字母和下划线注册 这样理解虽然不准确，可能会易懂一些 示例 12345678dict = &#123;'Name': 'Zara', 'Age': 7, 'Class': 'First'&#125; print "dict['Name']: ", dict['Name']print "dict['Age']: ", dict['Age']###输出结果dict['Name']: Zaradict['Age']: 7 修改字典的内容 向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对 示例 1234567891011dict = &#123;'Name': 'Zara', 'Age': 7, 'Class': 'First'&#125; dict['Age'] = 8 # 更新dict['School'] = "RUNOOB" # 添加 print "dict['Age']: ", dict['Age']print "dict['School']: ", dict['School']###输出结果dict['Age']: 8dict['School']: RUNOOB 删除字典元素 能删单一的元素也能清空字典，清空只需一项操作 示例 12345678dict = &#123;'Name': 'Zara', 'Age': 7, 'Class': 'First'&#125; del dict['Name'] # 删除键是'Name'的条目dict.clear() # 清空词典所有条目del dict # 删除词典 print "dict['Age']: ", dict['Age'] print "dict['School']: ", dict['School'] 模块 Python 模块(Module)，是一个 Python 文件，以 .py结尾，包含了 Python 对象定义和Python语句。 模块让你能够有逻辑地组织你的 Python 代码段。 把相关的代码分配到一个模块里能让你的代码更好用，更易懂。 模块能定义函数，类和变量，模块里也能包含可执行的代码。 模块的引入用import语句 1import module1[, module2[,... moduleN]] 比如要引用模块 math，就可以在文件最开始的地方用 import math 来引入。在调用 math 模块中的函数时，必须这样引用： 1模块名.函数名 这是**《笨方法学Python》**的第二十二篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《运营之光》：据说每一位运营喵都看过|产品书单|第二期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F13%2F%E3%80%8A%E8%BF%90%E8%90%A5%E4%B9%8B%E5%85%89%E3%80%8B%EF%BC%9A%E6%8D%AE%E8%AF%B4%E6%AF%8F%E4%B8%80%E4%BD%8D%E8%BF%90%E8%90%A5%E5%96%B5%E9%83%BD%E7%9C%8B%E8%BF%87-%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95-%E7%AC%AC%E4%BA%8C%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[每一位产品人都应该多看书、看好书 只有这样才能不断进步 形成自己的方法论 本期推荐一本书《运营之光》 据说每一位运营小伙伴都要看这本书 [TOC] 《运营之光》 author:黄有璨 简介 在互联网行业内，“运营”这个职能发展到一定阶段后，往往更需要有成熟的知识体系和工作方法来给予行业从业者们以指引。 《运营之光：我的互联网运营方法论与自白》尤其难得之处在于：它既对“什么是运营”这样的概念认知类问题进行了解读，又带有大量实际的工作技巧、工作思维和工作方法，还包含了很多对于运营的思考、宏观分析和建议，可谓内容完整而全面，同时书中加入了作者亲历的大量真实案例，让全书读起来深入浅出、耐人寻味。 从内容的受众来说，它既有面向初入互联网行业的运营从业者们的具体工作方法讲解和建议，又有适合3～5年运营从业者们阅读的一些案例解析、思考方法分享，也有更适合创业者、互联网公司高管阅读的一些运营体系搭建、不同类型产品所适合的运营方法等更为宏观的问题的解读。 作者介绍 黄有璨 互联网运营从业近10年，曾先后就职于美国About.com、第九课堂、新浪微米、周伯通招聘等互联网公司，历任运营经理、COO助理、COO等职。 现任互联网人在线学习社区三节课（sanjieke.cn）联合创始人。 同时为36氪、百度百家等专栏作家，多篇关于运营的文章被疯转，仅2016年上半年，个人所著文章线上浏览量已近千万。小饭桌创业课堂创业导师。 目录 下载地址 微信搜索产品汪darer，关注公众号 后台回复运营之光，即可获得下载链接 如果你想要《运营之光》目录的思维导图，可以在后台留言我想要《运营之光》目录的思维导图 彩蛋时刻 不要走开，这是一个彩蛋 百度公司最近在公司全面推行OKR工作法 那什么是OKR工作法呢？ OKR是指南针，KPI是秒表 下面这本书做了非常详细的介绍 只要点下右下角的好看 并分享本文到朋友圈(不可设置分组可见哦) 或者分享到微信群(最好是百人群) 然后截图(以上二选一即可)发到微信公众号后台 就可以啦，非常简单]]></content>
      <categories>
        <category>产品书单</category>
      </categories>
      <tags>
        <tag>产品书单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows系统最好用的文件预览工具|产品软件|5th]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F12%2FWindows%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88%E5%B7%A5%E5%85%B7-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6-5th%2F</url>
    <content type="text"><![CDATA[Windows系统最好用的文件预览工具|产品软件|5th 预览功能是 mac系统中 非常好用的一个功能，只需要选中文件，点击空格，在无需打开对应程序的情况下直接预览文件内容，非常省时省力，在查阅文件内容时非常方便，不少文件打开是非常吃内存和比较耗时间的。 今天推荐的这一款软件就是 windows系统中 最好用的一款 QuickLook QuickLook支持以下文件格式： 图片: .png, .jpg, .bmp and .gif 压缩包： .zip, .rar, .7z PDF 文件 文本文件 Microsoft Word (.doc, .docx), Excel (.xls, .xlsx) and PowerPoint (.ppt, .pptx) files (需要安装 Office) 视频文件 (.mp4, .mkv, .m2ts 等) HTML 文件 (.htm, .html) Markdown 文件 (.md) 其他文件和文件夹会显示一个信息框 演示： 预览图片 预览markdown文件 预览PDF文件 总之，用起来非常方便，大大提高工作的效率和逼格 搜索微信号：darerpm，关注公众号 公众号后台回复QuickLook，即刻获得下载链接]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件资源</category>
      </categories>
      <tags>
        <tag>软件资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test21-做一个字典]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F11%2FTest21-%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节学一个新概念—字典(dictionary) Python将其成为“字典”，有的语言里它的名称是“散列”。 [TOC] 先了解的知识 我们可以用列表做这些事 123456789&gt;&gt;&gt; things=['a','b','c','d']&gt;&gt;&gt; print things[1]b&gt;&gt;&gt; things[1]='z'&gt;&gt;&gt; print things[1]z&gt;&gt;&gt; print things['a','b','c','d']&gt;&gt;&gt; 你可以使用数字作为列表的索引，也就是利用数找到列表中的元素。 而字典所做的是，让你通过任何东西(不只是数字)找到元素。 字典可以将一个物件和另外一个东西关联，不管它们的类型是什么？ 1234567891011&gt;&gt;&gt; stuff=&#123;'name':'zed','age':36,'height':6*12+2&#125;&gt;&gt;&gt; print stuff['name']zed&gt;&gt;&gt; print stuff['age']36&gt;&gt;&gt; print stuff['height']74&gt;&gt;&gt; stuff['city']="San Francisco"&gt;&gt;&gt; print stuff['city']San Francisco&gt;&gt;&gt; 你将看到除了通过数字之外，还可以用字符串来从字典中获取stuff，我们还可以用字符串来往字典中添加元素。 123456789&gt;&gt;&gt; stuff[1]="WOW"&gt;&gt;&gt; stuff[2]="Neato"&gt;&gt;&gt; print stuff[1]WOW&gt;&gt;&gt; print stuff[2]Neato&gt;&gt;&gt; print stuff&#123;'city':'San Francisco',2:'Neato','name':'zed',1:'WOW','age':36,'height':74&#125;&gt;&gt;&gt; 只能放东西进去的字典是没啥意思的，所以我们还要有删除物件的方法，也就是使用del这个关键字： 123456&gt;&gt;&gt; del stuff['city']&gt;&gt;&gt; del stuff[1]&gt;&gt;&gt; del stuff[2]&gt;&gt;&gt; stuff&#123;'name':'zed','age':36,'height':6*12+2&#125;&gt;&gt;&gt; 源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# ex39.pystates=&#123; 'Oregon':'OR', 'Florida':'FL', 'California':'CA', 'New York':'NY', 'Michigan':'MI'&#125;cities=&#123; 'CA':'San Francisco', 'MI':'Detroit', 'FL':'Jacksonville'&#125;cities['NY']='New York'cities['OR']='Portland'print '-'*10print "NY State has: ",cities['NY']print "OR State has: ",cities['OR']print '-'*10print "Michigan's abbreviation is: ",states['Michigan']print "Florida's abbreviation is: ",states['Florida']print '-'*10for state,abbrev in states.items(): print "%s is abbreviation %s"%(state,abbrev) print '-'*10for abbrev,city in cities.items(): print "%s has the city %s"%(abbrev,city) print '-'*10for state,abbrev in states.items(): print "%s state is abbreviated %s and has city %s"%( state,abbrev,cities[abbrev]) print '-'*10state=states.get('Texas',None)if not state: print 'Sorry, no Texas.' city=cities.get('TX','Does Not Exist')print "The city for the state 'TX' is: %s"%city 应该看到的结果 这是**《笨方法学Python》**的第二十一篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[雷军：关于互联网的两次长考|大佬的思考|方法论]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F10%2F%E9%9B%B7%E5%86%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E4%B8%A4%E6%AC%A1%E9%95%BF%E8%80%83-%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%80%9D%E8%80%83-%E6%96%B9%E6%B3%95%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[温故而知新 产品新人们回过头来看看大佬当年的想法 也是蛮有启发的 今天这一期我们分享的是雷军在2008-12-22发表在新浪博客上的一篇文章 感兴趣的小伙伴，百度“雷军 新浪博客” 就可以找到了 关于互联网的两次长考—雷军 2008年4月，李彦宏说，“五年后不再有互联网公司，因为所有公司都在用互联网”。这句话引起了很大轰动。我非常赞同他的观点。未来不再有所谓的互联网公司，我曾为这个问题在1999年就思考了半年时间，至于是不是五年时间，现在还不好说。 虽然我早在1993年就开始用互联网，1996年是发烧级的BBS站友，但关于互联网是什么这么简单的一个问题，我曾思考过两次很长时间，一次是1999年创办卓越网之前，一次是2004年出售卓越网之后，每次都长达半年时间。两次长考的结论也很简单： 互联网首先是工具，未来不存在所谓的互联网公司。 互联网是一次观念的革命，只有改变观念，才能跟上互联网时代。 一、1999年最困扰的问题：互联网公司是什么？ 那是一个疯狂的年代。 美国互联网热潮从1995年Netscape上市开始拉开序幕，AOL, Yahoo, Amazon, eBay等公司陆续登场，NASDAQ指数1000点涨到创纪录的5132点。 2000年4月互联网泡沫破灭终止了这次热潮，接着大批 .com 公司关门，NASDAQ指数跌回1000多点。 这种疯狂是1998年传到中国的，到1999年达到巅峰。处在躁动中心的北京，每个人都有点慌乱。只要是互联网，无论做什么，不管是否能赚钱，都有VC的巨额美元投资。 我明白在这样的潮流面前，不能做时代的看客。但十年商业经验让我想不明白：**这些公司靠什么挣钱？什么时候能挣回烧掉的钱？**实在有太多想不通的问题，我决定先跳进去，边做边想。 1999年初，我在金山内部种了一块试验田，建立了一个专门的事业部，招了十多个人，做软件下载站，取名叫卓越网。很快我们做到了第一名。但接着问题出来了，做下载需要很多服务器和带宽，而当时服务器和带宽都非常贵，用户又不愿意付钱。没有任何收入，同时需要消耗大量的费用，这个业务如何支撑下去呢？软件下载业务每天着消耗的大量现金，我当时非常痛苦，内心有很多问题没有答案：互联网公司是什么样的公司？互联网公司靠什么挣钱？做什么样的互联网公司有前途？ 想了半年多时间，一直到1999年10月。有一天，我突然明白了： 不存在所谓的互联网公司。 互联网只是一个工具，未来每个公司都变成互联网公司。 做电子商务最有前途。 因为互联网是一个先进的生产工具，传统公司应用互联网最快的方式就是电子商务，这就是所谓的“水泥＋鼠标”。当然，电子商务也是过度性名词，因为未来所有公司都会是电子商务公司。 当时我们做的软件下载不 下功夫做，因为软件下载投入太高，而想象空间有限。 就这样，我痛下决心，放弃软件下载业务，转型做电子商务，做图书音像的网上零售。 为了把这件事情做大，1999年底，我说服了金山董事会把卓越分拆出来，单独运作。当时我非常自信，觉得已经想透了，一定能成功。我力主不融VC的钱，而是金山股东自己投资。后来，金山主要股东投资了1600万，因为联想是金山的大股东，也投资了几百万元。 那个时代，大家都是烧VC的钱。而卓越网，从一开始，我就坚信一定会成功，这种信心是用我们自己投入的1600万来表达的。 二、2004年卖了卓越后整整想了半年时间：互联网到底是什么？ 2004年9月，我在出售卓越网的协议上正式签字了，亚马逊以7500万美元全资收购了卓越网。卓越网从2000年5月正式创办到出售，仅四年四个月时间。 对于创业者来说，卖掉亲手创办的企业，一定是件非常痛苦的事情。我为了尽快从痛苦的情绪中走出来，决定尽量不上卓越网，决定尽量不见卓越网老同事，把主要精力用来总结卓越网四五年的成与败，琢磨未来的发展机会。这个过程想了半年多， 后来主要在想：什么是互联网？为什么互联网公司毛利率高增长快？未来的发展趋势是什么？ 得出了如下的结论，今天回想起来也非常有意思： 开放和合作是互联网公司成功的关键。 互联网首先是一张无边无际的网，每个人都是节点，互联是互联网成功最关键的要素。任何封闭式的业务模式都会遇到很大挑战，今天Yahoo（一站式门户）困境也折射了我当年的想法。 互联网公司最厉害是靠机器赚钱。一旦产品研发完成，用户量到了一定的规模，只要服务器开着就可以赚钱了。到了这个阶段，产品研发推广的边际成本为零，服务器带宽成本逐年下降，毛利率自然就上来了，业务增长速度也比较快。而且，机器是7X24小时工作的，当然运维人员要全天候确保运营质量。 口碑营销和网盟是互联网公司营销核心。互联网公司直接面对所有用户，好产品仅靠口口相传就能成功。和拥有用户的其他互联网公司结盟推广，也是最有效的推广模式。 互联网公司管理相对容易。首先是业务、内部运作系统高度IT化，这点和传统公司非常不同；其次，很容易推动量化管理；还有，对人的依赖并不高，很容易做知识管理，系统自动记录了大部分人的工作，人员流动对企业影响比较小。 互联网公司靠提供服务来挣钱，而软件公司靠卖产品挣钱，这种模式就决定了软件公司的业务不容易持续稳定增长。一定要从卖产品模式走到卖服务的模式。 互联网的关键就是快。互联网产品的模式就是研发人员和用户一起开发产品，有阶段性成果就先推出去，听用户反馈，按用户意见去修改。 未来十年的热点是移动互联网，手机上网是一种趋势。 我把这些全部总结成一条：互联网是一次观念革命，是“深度互联，全天候快速反应”的观念。 这里面有几个关键词，互联、全天候、快速。 因为是互联网，所以联盟非常关键，联盟是互联网业务必须考虑的最关键的因素，就是说如何整合上下流，如何整合更多的推广资源； 全天候，传统的业务是 5X8，而互联网必须是 7X24，必须确保任何时候业务都能正常运行； 快速，更是互联网的精粹，必须快速开发、快速推广、业务快速成长等，反应速度一定要比传统业务反应快十倍，才有更大的发展机会。 就是想清楚了这些，我做了两件事情： 从2005年初开始我在金山内部发布了全面转型互联网的动员令，现在金山业务几乎全部来自互联网。 2006年初我毫不犹豫投身了移动互联网行业，比如投资了乐讯（移动互联网最大的社区）和UCWEB等。最近出任UCWEB董事长，为移动互联网行业摇旗呐喊，也是我深思后的决定。 在一些重大产业变革的时候，认真思考，的确可以帮助自己把握机会。 关于文章开头提高的未来的公司都是互联网公司的论述，我在36氪推荐的一篇文章也看到类似的描述。 2018年，全球科技企业股票缩水，这篇文章讲到，当所有的公司都是科技公司，那么科技公司的高估值就会下跌，就会挤科技泡沫。 大家有任何想法，可以在评论区留言讨论]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>大佬思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test20-列表的操作]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F06%2FTest20-%E5%88%97%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节我们来学习Python是怎么对列表实行操作的 [TOC] 示例： 当你看到mystuff.append('hello')这样的代码时，它已经在Python内部激发了一个连锁反应。以下是它的工作原理。 Python看到你用到mystuff，于是就去找这个变量。也许它需要倒着检查看你有没有在哪里用=创建过这个变量，或者检查它是不是一个函数参数，或者看它是不是一个全局变量。不管哪种方式，它得先找到mystuff这个变量才行。 一旦它找到了mystuff，就轮到处理句点(.)这个操作符，而且开始查看mystuff内部的一些变量了。由于mystuff是一个列表，Python知道mystuff支持一些函数。 接下来轮到处理append。Python会将append和mystuff支持的所有函数的名称一一对比，如果确实有一个叫append的函数，那么Python就会去使用这个函数。 接下来Python看到了括号(并意识到：“奥，原来这应该是一个函数。”到了这里，它就正常调用这个函数了，不过这里的函数还要多一个参数才行。 这个额外的参数其实就是mystuff。很奇怪是不是？不过这就是Python的工作原理，所以请记住这一点，就当它是正常的好了。真正发生的事情其实是appeng(mystuff,'hello')，不过写法是mystuff.append('hello')。 源代码 123456789101112131415161718ten_things="apples oranges crows telephone light sugar"print "wait there's not 10 things in that list,let's fix that."stuff=ten_things.split(' ')more_stuff=["day","night","song","frisbee","corn","banana","gril","boy"]while len(stuff)!=10: next_one=more_stuff.pop() print "adding: ",next_one stuff.append(next_one) print "there's %d items now."%len(stuff) print "there we go: ",stuffprint "Let's do some things with stuff."print stuff[1]print stuff[-1]print stuff.pop()print ' '.join(stuff)print '#'.join(stuff[3:5]) 应该看到的结果 本节需要学习的知识 把每一个被调用的函数翻译成Python实际执行的动作 ‘ ’.join(things)其实就是join(' ',things)。 ‘ ’.join(things)可以翻译成“用‘ ’连接things”，而join(' ',things)意思是“为‘ ’和things调用join函数”。 len()函数 len() 方法返回对象（字符、列表、元组等）长度或项目个数。 语法 1len( s ) 示例 123456&gt;&gt;&gt;str = "runoob"&gt;&gt;&gt; len(str) # 字符串长度6&gt;&gt;&gt; l = [1,2,3,4,5]&gt;&gt;&gt; len(l) # 列表元素个数5 stuff[3:5]的作用 它会从stuff列表的第3个元素开始取值，知道第5个元素，注意这里并不包含第5个元素。 这是**《笨方法学Python》**的第二十篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《我的互联网方法论》|好的产品就是让用户离不开你|产品方法论]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F06%2F%E3%80%8A%E6%88%91%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E6%96%B9%E6%B3%95%E8%AE%BA%E3%80%8B%E5%A5%BD%E7%9A%84%E4%BA%A7%E5%93%81%E5%B0%B1%E6%98%AF%E8%AE%A9%E7%94%A8%E6%88%B7%E7%A6%BB%E4%B8%8D%E5%BC%80%E4%BD%A0-%E4%BA%A7%E5%93%81%E6%96%B9%E6%B3%95%E8%AE%BA1st%2F</url>
    <content type="text"><![CDATA[大家好，我是Darer 近期看了周鸿祎的书《我的互联网方法论》 整理了下看书时做的标注 并附上一些自己的理解 周鸿祎自述: 我的互联网方法论 周鸿祎 互联网革命是什么？那就是，消费者拥有了更多的知情权和选择权。 互联网在给予消费者更多知情权和选择权的同时 也在减少消费者的知情权 什么是商业模式？其实，商业模式不是赚钱模式。 它至少包含了四方面内容：产品模式、用户模式、推广模式，最后才是收入模式，也就是怎么去赚钱。一句话，商业模式就是你能提供什么样的产品，给什么样的用户创造什么样的价值，在创造用户价值的过程中，用什么样的方法获得商业价值。 我的理解是商业模式不能只是做一锤子买卖，而是要从头到尾做一个赚钱的产线，源源不断。 判断是不是真正的推广，最简单的标准是把推广资源一撤，不再砸钱，看产品的用户量是不是往下掉。如果用户量一下子掉下来了，说明产品肯定存在问题。这个时候如果不对产品进行调整，你和团队将面临非常大的挑战。真正的推广是对产品的不断完善和提升。在推广的过程中，你要研究市场，跟目标用户打交道，了解用户真正的需求，了解用户使用产品时遇到的困惑和问题，再反馈到产品上进行改进，由此不断调整和完善。这样，即使推广没有取得理想的结果，但是通过推广，你发现了产品的问题，了解到真正的用户需求，发现了新的用户群，这些收获也远比单纯的产品安装量要有价值得多。 看到一篇介绍趣头条的文章，2018年第四季度的营收虽然在增加，但是亏损仍在扩大，已接近4亿。 趣头条的一个营销套路就是为了吸引用户，对用户进行金钱补贴 这是在来品品这句话，还是挺有意思的 但是国内的环境是遍地撒钱，有时候，你不想上这个船，也没办法 商业的本质就是让人性得到释放，颠覆式创新也不例外，归根结底就是怎样满足人性。 反思是360的文化，反思不是一件负面的事情，并不是做错事情了才需要反思。每个人每天都需要反思，经验是过去的，要敢于不断否定自己。 产品人或者说每一位职业人都需要学会反思，学会复盘吧 可是敢于否认自己的错误，敢于改正自己坏习惯 也是挺难的 在360，我们提倡“三个凡是”：凡是用户提的问题，一定要追根述源，找到问题的原因，从用户的角度想解决的方案；凡是负面的信息，即使是对手的枪稿，也要找到可以改进产品的启发点；凡是竞争对手的产品，都必然有学习借鉴的优点。 用户至上、用户至上、用户至上 你可能经常刷微博，但是在微博上你是得不到智慧的，大家还是要看书才行。微博上是像方便面一样的东西，各种心灵鸡汤，140个字的总结如果能让你顿悟，那你算是高人。但是，那些心灵鸡汤其实都是正确的废话。所以，我还是提倡大家要看书。 听大佬的话，快去看书、看书、看书 要找到自己的定位，找准自己的定位，然后像一把锥子一样，先在人们脑子中占据一个位置，而不是先去扩大市场份额。 关于定位，有本书《定位》真的不可错过 在这一点，拼多多做的真不多 听到拼多多的BGM 你就会想起拼多多 如果你只会生产硬件、卖硬件，一旦你的价值链被人免费，对不起，你最后只能沦为代工，挣点微薄的利润。要想生存下去，你需要建立一种新的商业模式，要创造新的价值链。所以，“硬件免费”必须要创造新的价值链来支撑，这也是传统企业转型互联网时必须要考虑的问题。 这句话我不理解 说不清楚，总觉得哪里不对 如果你有想法，可以在评论区评论 在我看来，包括智能手机、平板电脑在内，硬件的互联网化分为以下“四化”。 商业模式互联网化。 产品体验互联网化。 市场推广的互联网化。 产品销售的互联网化。 太深奥，还无法理解 如果你有想法，可以在评论区评论 超出预期的体验，不一定是给用户1万块钱，而是超出用户的期望，才能获得更高的用户满意度。 雷军也提到过：为用户提供超出预期的产品 小米手机一直以来的营销也在贯彻这个思路 记得雷总在小米9的发布会上，印象最深的就是 这个价钱能买到这些、那些还有这些 先创造用户价值，然后再产生商业价值 用户至上、用户至上、用户至上 虽然我们做产品时候，应该全方位系统性思考，应该考虑得面面俱到，但思考完了，要在众多的功能中找到一个点作为突破口。再大的市场也需要一个针尖一样的点做切入，所有成功的产品都要找到一个点，把有限的资源聚焦到一个点上，才能形成压强。 互联网的标准思维：快速启动、MVP 有两点很关键：第一从小处着眼，贴近用户需求心理；第二要小步快跑，快速出击，不断试错。我把这两点称为互联网上的“微创新”规律。 关于产品，我提两个数字概念。第一，产品刚出来的时候最不重要，哪怕第一天有1 000个用户，第二天有2 000个用户，第三天有3 000个用户，第四天有5 000个用户，这就是一条健康的曲线。但是如果我们花了很多钱做推广，结果第一天有1万个用户，第二天还是1万个用户，接着第三天8 000，第四天5 000。大家会更加喜欢哪条曲线？肯定是第一条增长曲线。所以，做产品不要在乎绝对数，而是要关注相对的增长趋势。 第二个数字，就是产品有很多环节，如果满分是1分，但每个环节我们都只做到0.8。你以为产品出来就是0.8分？错了，是0.8乘以0.8乘以0.8，总分是0.51。功能越多，数字就越小，产品失败得就越快。所以，功能更贵精，不贵多，要在每一个点上做到极致。 只要在增长就说明攻略方向是对的，只要进一步提高攻略效率 但是增长不断衰减，说明方向是错的，前期跑到再快，如果这时 不做出反应，就很快泯然众人 有句话叫啥：先胖不算胖，后胖压倒炕 用户使用你的产品，只关心你做的是什么东西，能解决什么问题，根本不听你背后的理念。 非常对！！！ 说的天花乱坠，不好使，也没人用 互联网产品有几个容易被忽视的特点： 互联网产品要有一个灵魂，要符合相关领域的游戏规则，能打动用户的心。 产品的定位和Slogan 互联网产品需要不断运营、持续打磨。好产品是运营出来的，不是开发出来的。 好产品需要不断迭代，需要宣传、推广 好酒也怕巷子深 大家都说产品要做到专注和极致。在产品方向上，一定要先学会做减法，而不是做加法。要先找对一个点做到极致，否则你什么功能都做，最后都不突出，没有鲜明的卖点。 还是定位，围绕自己的核心功能画圆，不要画多个圆 究竟什么是好的产品？怎么做好的产品？在这里有一个衡量标准，就是让用户离不开你。 就是让用户上瘾 怎样才能找到用户的需要？我经常说，一线的客服、运营员工才是创新的动力。只有不断地接触用户，不放过每一个小抱怨，才能找到真正的点 在寻找用户点的时候，我们要抛弃一个专业人士的思维方式，把自己当成一个小白用户，否则你永远不知道用户真正需要什么。 找到用户的需要，下一步就要把这个点做到极致，给他好的体验。如果这个体验能够从微观入手，超出用户预期，你很容易就能做出好的东西。 我的观点是，不论产品名称还是功能名称，最好的就是一目了然，让人一眼能看明白到底解决了什么问题，不用动脑子。 产品请名字越来越难了 马桶都出来了 强需求产品可以自我发展成强大的渠道，而弱需求产品独立做很难，必须有一个强大的渠道。 互联网领域最强的需求：就是搜索、社交和网购吧 移动互联网时代新增的需求：吃、行和娱乐 有太多做产品的人有三个假设：第一是假设某个功能用户一定需要；第二是假设用户一定知道某个功能的存在；第三是假设用户一定会按照自己设计的方式使用。比如有一家公司找我来谈合作，说做了一个软件，功能是类似到邻居家串门，看到邻居的鞋很好看，一拍就可以在网上买了。我说不用那么麻烦，直接问他在哪儿买的不就可以了，所以这样的产品连第一关都过不了。 比尔 · 盖茨曾经说过，初出茅庐的时候你要自尊干什么？那自尊是假的，当你做出真正的好产品的时候，当你成功的时候，大家都会尊重你。 等你成功的时候，你就可以给别人鸡汤喝了 乔布斯还说过一句经典的话“Stay hungry, stay foolish” 放低姿态，保持饥饿感 以上是在看《我的互联网方法论》时做的一些标注 如果你觉得还不错，可以看一看 搜索微信号：darerpm，关注公众号 公众号后台回复我的互联网方法论，即刻下载]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>阅读体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test19-用循环语句、if语句和函数做一个小游戏]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F05%2FTest19-%E7%94%A8%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E3%80%81if%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%87%BD%E6%95%B0%E5%81%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 这一节我们用前面学习过的if语句、for语句、while语句和def定义函数等来做一个小游戏 [TOC] 源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# ex35.pyfrom sys import exitdef gold_room(): print "this room is full of gold.How much do you take?" next=raw_input("&gt; ") if "0" in next or "1" in next: how_much=int(next) else: dead("man,learn to type a number.") if how_much&lt;50: print "Nice,you're not greedy,you win!" exit(0) else: dead("You greedy bastard!") def bear_room(): print "there is a bear here." print "The bear has a bunch of honey." print "the fat bear is in front of another door." print "How are you going to move the bear?" bear_moved=False while True: next=raw_input("&gt; ") if next=="take honey": dead("the bear looks at you then slaps your face off.") elif next=="taunt bear" and not bear_moved: print "The bear has moved from the door.You can go through it now." bear_moved=True elif next=="taunt bear" and bear_moved: dead("the bear gets pissed off and chews your leg off.") elif next=="open door" and bear_moved: gold_room() else: print "I got no idea what that means." def cthulhu_room(): print "here you see the great evil Cthulhu." print "He,it,whatever stares at you and you go insane." print "Do you flee for your life or eat your head?" next=raw_input("&gt; ") if "flee" in next: start() elif "head" in next: dead("well that was tasty!") else: cthulhu_room() def dead(why): print why,"Good job!" exit(0)def start(): print "You are in a dark room." print "there is a door to your right and left." print "which one do you take?" next=raw_input("&gt; ") if next=="left": bear_room() elif next=="right": cthulhu_room() else: dead("you stumble around the room until you starve.")start() 这是一个选择的小游戏，每次不同的选择都会有不同的结果 建议仔细看这个代码，搞清楚逻辑关系 你可以看到的结果 本节需要注意的知识 exit()语句 exit()可以中断某个程序，而其中的数字参数则用来表示程序是否遇到错误而中断。 exit(0)表示程序是正常退出的 exit(1)表示发生了错误，可以用不一样的数字代表不同的错误结果。 比如，你可以用exit(100)来表示另一种和exit(2)或exit(1)不同的错误 int()指令 int() 函数用于将一个字符串或数字转换为整型。 语法 1class int(x, base=10) 参数 x – 字符串或数字。 base – 进制数，默认十进制。 示例 123456789101112&gt;&gt;&gt;int() # 不传入参数时，得到结果00&gt;&gt;&gt; int(3)3&gt;&gt;&gt; int(3.6)3&gt;&gt;&gt; int('12',16) # 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制18&gt;&gt;&gt; int('0xa',16) 10 &gt;&gt;&gt; int('10',8) 8 为什么写while True？ 这样可以创建一个无限循环 这是**《笨方法学Python》**的第十九篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test18-while循环]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F04%2FTest18-while%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ while循环：while循环会一直执行它下面的代码块，直到它对应的布尔表达式为False时才会停下来 while循环有一个问题，那就是有时它会永远不结束 为了避免这样的问题，你需要遵循下面的规定 尽量少用while循环，大部分时候for循环是更好的选择 重复检查你的while语句，确定你测试的布尔表达式最终会变成False 如果不确定，就在while循环的结果打印出你要测试的值，看看它的变化 [TOC] 源代码 12345678910111213141516# ex33.pyi=0numbers=[]while i&lt;6: print "at the top i is %d"%i numbers.append(i) i=i+1 print "numbers now: ",numbers print "at the bottom i is %d"%iprint "The numbers: "for num in numbers: print num 应该看到的结果 附加练习 把这个while循环改成一个函数 1234567891011i=0numbers=[]def while_1(n): global i #global定义全局变量 while i&lt;n: numbers.append(i) i=i+1 return numbers new_number=while_1(6)print "The numbers: ",new_number 这是**《笨方法学Python》**的第十八篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test17-for循环]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F04%2FTest17-for%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节主要学习for循环语句和如何创建一个列表 [TOC] 源代码 12345678910111213141516171819202122232425262728293031# ex32.pythe_count=[1,2,3,4,5]fruits=['apples','oranges','pears','apricots']change=[1,'pennies',2,'dimes',3,'quarters']#this first kind of for-loop goes through a listfor number in the_count: print "this is count %d"%number #same as abovefor fruit in fruits: print "A fruit of type: %s"%fruit #also we can go through mixed lists too#notice we have to use %r since we don't know what's in itfor i in change: print "I got %r"%i #we can also build lists,first start with an empty oneelements=[]#then use the range function to do 0 to 5 countsfor i in range(0,6): print "adding %d to the list."%i #append is a function that lists understand elements.append(i) #now we can print them out toofor i in elements: print "element was:%d"%i 应该看的结果 这里需要注意的一点： 注意%r和%s输出结果的不同 这个知识点，前面有介绍过 本节需要学习的知识 range()指令 range() 函数可创建一个整数列表，一般用在 for 循环中 标准语法 1range(start, stop[, step]) 参数说明 start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0,5）; stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5 step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1) 示例 1234567891011121314&gt;&gt;&gt;range(10) # 从 0 开始到 10[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&gt;&gt;&gt; range(1, 11) # 从 1 开始到 11[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&gt;&gt;&gt; range(0, 30, 5) # 步长为 5[0, 5, 10, 15, 20, 25]&gt;&gt;&gt; range(0, 10, 3) # 步长为 3[0, 3, 6, 9]&gt;&gt;&gt; range(0, -10, -1) # 负数[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]&gt;&gt;&gt; range(0)[]&gt;&gt;&gt; range(1, 0)[] append()指令 append() 方法用于在列表末尾添加新的对象。 标准语法 1list.append(obj) 参数说明 obj – 添加到列表末尾的对象。 如何创建二维列表 就是在列表中包含列表，如[[1,2,3],[4,5,6]] 这是**《笨方法学Python》**的第十七篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown写作必用软件|产品软件|4th]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F04%2FMarkdown%E5%86%99%E4%BD%9C%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6-4th%2F</url>
    <content type="text"><![CDATA[本文适合正在使用Markdown写作和准备学习Markdown写作的产品人 本期主要介绍在使用Markdown写作时，有哪些软件是必不可少的，一定会用得到的 一篇文章主要包括三个要素： 文字 图片 排版 与此对应的，我们需要一款Markdown编辑器、一款截图软件和一款图床工具 [TOC] Markdown编辑器 Markdown编辑器有很多，随便在知乎一搜，markdown编辑器推荐，就可以找到很多介绍的文章，这里我就不重复造轮子了。 我主要推荐一款Markdown编辑器–Typora Typora 演示.demo Typora设计的核心理念是：所见即所得 软件的颜值非常高，而且完全免费 不过Markdown新手需要一些时间去适应，开始用的时候会非常不习惯 搜索微信号：darerpm，关注公众号 公众号后台回复typora，即刻获得下载链接 截图软件 Snipaste 我认为这一款是windows系统中最好用的截图工具，简单、好用 演示.demo 核心功能是截图 特色功能是贴图 都支持自定义快捷键，用起来非常方便 搜索微信号：darerpm，关注公众号 公众号后台回复snipaste，即刻获得下载链接 ScreentoGif 除了图片之外，越来越多人喜欢用gif图，来演示 ScreentoGif录制简单，编辑功能强大 把需要制作的gif的部分，放在框里，录制即可 支持导出gif、mp4等格式 搜索微信号：darerpm，关注公众号 公众号后台回复screentogif，即刻获得下载链接 图床工具 Picgo 关于图床工具，我前面出过一期非常详细的介绍，这里是详细完备的图床工具介绍 演示.demo 搜索微信号：darerpm，关注公众号 公众号后台回复picgo，即刻获得下载链接 Markdown写作是有一定学习成本的，希望你可以坚持下去 最后会感受到Markdown写作的便捷之处 这是产品人必用软件系列的第四期 此系列逢五更新 也就是每月的5号、15号和25号更新]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《浪潮之巅》|产品书单|第一期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F03%2F%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B-%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95-%E7%AC%AC%E4%B8%80%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[每一位产品人都应该多看书、看好书 只有这样才能不断进步 形成自己的方法论 这期推荐三本好书： 《浪潮之巅》 《谷歌是怎么运营的》 《我的互联网方法论》 [TOC] 浪潮之巅 author:吴军 简介： 近一百多年来，总有一些公司很幸运地、有意识或无意识地站在技术革命的浪尖之上。在这十几年间，它们代表着科技的浪潮，直到下一波浪潮的来临。 从一百年前算起，AT&amp;T 公司、IBM 公司、苹果公司、英特尔公司、微软公司、思科公司、雅虎公司和Google公司都先后被幸运地推到了浪尖。虽然，它们来自不同的领域，中间有些已经衰落或正在衰落，但是它们都极度辉煌过。本书系统地介绍了这些公司成功的本质原因及科技工业一百多年的发展。 在极度商业化的今天，科技的进步和商机是分不开的。因此，本书也系统地介绍了影响到科技浪潮的风险投资公司，诸如 KPCB 和红杉资本，以及百年来为科技捧场的投资银行，例如高盛公司，等等。 在这些公司兴衰的背后，有着它必然的规律。本书不仅讲述科技工业的历史，更重在揭示它的规律性。 作者简介： 吴军博士，毕业于清华大学计算机系（本科）、电子工程系（硕士）和美国约翰 · 霍普金斯大学计算机科学系（博士）。在清华大学和约翰 · 霍普金斯大学期间，吴军博士致力于语音识别、自然语言处理，特别是统计语言模型的研究。他曾获得1995年全国人机语音智能接口会议的最佳论文奖和2000年Eurospeech的最佳论文奖。 吴军博士于2002年加入Google公司。在Google，他和Amit Singhal（Google院士，世界著名搜索专家）、Matt Cutts（Google反作弊官方发言人）等三位同事一起开创了网络搜索反作弊的研究领域，并因此获得Google工程奖。2003年，他和Google全球架构的总工程师朱会灿博士等共同成立了中日韩文搜索部门。吴军博士是当前Google中日韩文搜索算法的主要设计者。在Google其间，他还领导了许多研发项目，包括许多与中文相关的产品和自然语言处理的项目，并得到了当时公司首席执行官埃里克 · 施密特和创始人谢尔盖 · 布林的高度评价。此外，他还在谷歌黑板报上发表了《数学之美》系列博客。 目录： 豆瓣评分： 读完这本书 对互联网的发展历程有了更好的理解 非常推荐读一读 书读起来很有趣，一点都不枯燥 搜索微信号：darerpm，关注公众号 公众号后台回复浪潮之巅，即刻获得电子书 谷歌是怎么运营的 author:埃里克.施密特 简介： 《重新定义公司：谷歌是如何运营的》作者是谷歌前CEO埃里克•施密特和前高级副总裁乔纳森•罗森伯格，他们亲自分享十余年来帮助谷歌成长所领悟到的管理启示：科技正在改变商业的方方面面，这种改变速度空前，而且仍在加速，公司若想在互联网时代站稳脚跟，就要制定新的商业规则。 《重新定义公司》披露了谷歌如何颠覆传统的MBA模式，建立独树一帜的管理哲学，作者分享了外界普遍好奇的企业文化、战略、人才、决策、沟通以及创新之道。埃里克•施密特和乔纳森•罗森伯格列举了谷歌历史上众多只有内部人员才知道的实例，其中许多事件更是第一次为广大读者公布。他们旨在将谷歌的管理秘密转化为人人皆可用的经验，帮助我们迎接变化世界中的巨大挑战。 作者简介： 埃里克•施密特（Eric Schmidt） 2001-2011年担任谷歌的首席执行官。在他的协助下，这家成立不久的硅谷公司成长为科技行业的全球领航者。他不仅负责建立合作关系和拓展商业人脉等对外事宜，还负责安排政府对话及建立适于高科技企业的领导方式。现任谷歌执行董事长。 乔纳森•罗森伯格（Jonathan Rosenberg） 2002年加入谷歌。乔纳森•罗森伯格第一次见到拉里•佩奇和谢尔盖•布林是在2000年，两年后，两人第三次提出邀请时，乔纳森才接受了这个工作机会。2011年4月之前，担任高级副总裁以及产品团队的管理人，负责谷歌消费者、广告商以及合作伙伴的产品设计、研发、升级工作，包括安卓系统、谷歌Search、Ads、Gmail、Apps、以及Chrome。他协力完善了谷歌的人才招聘制度与营销流程。 目录： 豆瓣评分： 这本书给我印象最深的有两个： 不作恶 TGIF 如果百度也能遵守“不作恶”的原则，也就不会被黑了 搜索微信号：darerpm，关注公众号 公众号后台回复谷歌是怎么运营的，即刻获得电子书 我的互联网方法论 author:周鸿祎 简介： 在很多方面，周鸿祎都是互联网领域的颠覆者。他重新定义了“微创新”，提出从细微之处着手，通过聚焦战略，以持续的创新，最终改变市场格局、为客户创造全新价值。他第一个提出了互联网免费安全的理念，也由此让奇虎360拥有了超过4亿的用户。 在《周鸿祎自述：我的互联网方法论》中，周鸿祎首次讲述了自己的互联网观、产品观和管理思想，厘清了互联网产品的本质特征和互联网时代的新趋势，列举了颠覆式创新在现实中的实践和应用。《周鸿祎自述：我的互联网方法论》首次解密360的产品秘籍和盈利模式，同时，针对目前传统企业的互联网转型焦虑，也提出了一套系统解决方案。 作者简介： 周鸿祎，中国互联网安全之父，奇虎360公司董事长，互联网新格局的缔造者，颠覆式创新家、知名天使投资人。曾供职于方正集团，后历任3721公司创始人、雅虎中国总裁等职务。周鸿袆带领奇虎360公司于2011年3月30日在美国纽交所上市，成为互联网安全、移动互联网行业的领导者和先行者。 目录： 豆瓣评分： 虽然360公司近来发展不顺利 360管家也是不受用户欢迎 不过周鸿祎对于互联网的理解、思考 真的很适合产品人去学习、体会 搜索微信号：darerpm，关注公众号 公众号后台回复我的互联网方法论，即刻获得电子书 这是产品人必读书单系列的第一期 此系列逢九更新 也就是每月的9号、19号和29号更新]]></content>
      <categories>
        <category>产品书单</category>
      </categories>
      <tags>
        <tag>产品书单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test16-用if、else语句做一个小游戏]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F03%2FTest16-%E7%94%A8if%E3%80%81else%E8%AF%AD%E5%8F%A5%E5%81%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节我们利用前面学过的if、else和elif语言知识，做一个小游戏，比较简单，很好理解 [TOC] 源代码 12345678910111213141516171819202122232425262728293031# ex31.pyprint """you enter a dark room with two doors.Do you go through door #1 or door #2?"""door=raw_input("&gt; ")if door=="1": print "There's a giant bear here eating a cheese cake. What do you do?" print "1. Take the cake." print "2. Scream at the bear." bear=raw_input("&gt; ") if bear=="1": print "The bear eats your face off.Good job!" elif bear=="2": print "The bear eats your legs off.Good job!" else: print "Well,doing %s is probably better.Bear runs away." %bearelif door=="2": print "You stare into the endless abyss at Cthulhu's retina." print "1. Blueberries." print "2. Yellow jacket clothespins." print "3. Understanding revolvers yelling melodies." insanity=raw_input("&gt; ") if insanity=="1" or insanity=="2": print "Your body survives powered by a mind of jello.Good job!" else: print "The insanity rots your eyes into a pool of muck.Good job!"else: print "You stumble around and fall on a knife and die.Good job!" 需要注意的几点： if语句必须以else语句结尾，中间elif语句的数量没有限制 if语句、else语句和elif语句中间可以任意插入if语句、else语句和elif语句 你应该看到的结果 这是**《笨方法学Python》**的第十六篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test15-if和else语言]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F02%2FTest15-if%E5%92%8Celse%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节主要学习程序学习中都会学习的if和else语言，运用和理解起来也是非常简单 [TOC] 源代码 12345678910111213141516171819202122# ex30.pypeople=30cars=40buses=15if cars&gt;people: print "we should take the cars."elif cars&lt;people: print "we should not take the cars."else: print "we can't decide."if buses&gt;cars: print "that's we could take the buses."elif buses&lt;cars: print "maybe we could take the buses."else: print "we still can't decide."if people&gt;buses: print "alright,let's just take the buses."else: print "fine,let's stay home then." 应该看到的结果 本节需要注意的事 如果多个elif块都是True，Python会如何处理？ Python只会运行它遇到的是True的第一个块，所以只有第一个为True的块会运行。 if和elif的区别 如果程序中判断事件很多，全部用if的话，会遍历整个程序，用elif 程序运行时，只要if或后续某一个elif之一满足逻辑值为True，则程序执行完对应输出语句后自动结束该轮if-elif（即不会再去冗余地执行后续的elif或else） 示例如下： 123456789101112131415161718192021#encoding=utf-8a=88if a&gt;= 90: print u"优秀"if a == 88: print u"正好88"if a &gt;= 80: print u"良好"else: print u"都不合格" print "* * "*10 if a&gt;= 90: print u"优秀"elif a == 88: print u"正好88"elif a &gt;= 80: print u"良好"else: print u"都不合格" 以上指令的执行结果如下： 1234正好88良好* * * * * * * * * * * * * * * * * * * * 正好88 if、elif和else语句注意一下两点： else、elif为子块，不能独立使用 一个if语句中可以包含多个elif语句，但是结尾只能有一个else语句 这是**《笨方法学Python》**的第十五篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test14-布尔表达式练习]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F02%2FTest14-%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 这节我们主要做“布尔逻辑表达式”（boolean logic expression）的练习 [TOC] 源代码 1234567891011121314151617181920212223# ex28.py##逻辑语句True and FalseFalse and False1==1 and 2==1"test" == "test"1==1 or 2!=1True and 1==1False and 0!=0True or 1==1"test" == "testing""test"==11!=0 and 2==1"test" == "testing""test" == 1not (True and False)not (1==1 and 0 !=1)not (10==1 or 1000==1000)not (1!=10 or 3==4)not ("testing"=="testing" and "zed"=="cool guy")1==1 and not ("testing" ==1 or 1==0)"chunky"=="bacon" and not (3==4 or 3==3)3==3 and not ("testing"=="testing" or "Python"=="Fun") 应该看到的结果 这里我只摘抄了以上部分布尔表达式，每一种表达式写法都类似 这一块的知识，在高中时应该学过这里的逻辑问题 这里只列出最简单的逻辑关系 常见问题 为什么“test” and “test”返回“test”, 1 and 1返回1， 而不是返回True呢？ Python 和许多语言一样，都是返回两个被操作对象中的一个，而非它们的布尔表达式True或False。这意味着，如果你写了False and 1，得到的第一个操作数（False），而非第二个操作数（1）。 这是**《笨方法学Python》**的第十四篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品人必用的下载工具|产品软件|3rd]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F02%2F%E4%BA%A7%E5%93%81%E4%BA%BA%E5%BF%85%E7%94%A8%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6-3rd%2F</url>
    <content type="text"><![CDATA[资源来自互联网 如有侵权，请联系删除 [TOC] 迅雷X无广告版 每一位产品人都会触发以下“彩蛋” 平时下载都会用到迅雷， 可以这“流氓”软件 真的是广告不断，时不时来个弹窗 真的烦 如果你和我一样，讨厌无处不在的广告、讨厌弹窗 那这个迅雷X-破解版-无广告一定合你胃口 我们来做下对比： 迅雷X 放眼望去，全是和下载无关的推广 迅雷X-破解版-无广告 小窗口： 大窗口： 没有任何和下载无关的事情 大窗口有点丑，不过默认打开小窗口 破解版的特点： -本地SVIP 10会员(已开通VIP会员的正常显示)，移除下载区文字链接广告，默认竖屏只显示下载区 -移除迅雷主页和影评，移除影评弹窗 -移除多余菜单 -移除顶栏搜索框，消息管理器 -移除皮肤中心文字链接”开通会员”，移除非会员开通会员按钮 -禁止更新版本 搜索微信号：darerpm，关注公众号 公众号后台回复迅雷X，即刻获得下载链接 冰点文库下载器无广告版 每一位产品人都会遇到以下“彩蛋” 想从百度文库下载些资料 可是还需要付费 可自己又是偶尔使用 不要着急，文档资料下载神器–冰点文库下载器，满足你的需求 它不仅支持百度文库，还支持支持豆丁、丁香、畅享、MBALib、HP009、MAX、Book118、金字塔医学、大桔灯等文库文档。 基本上国内主流，它都支持。 下载的文档为PDF格式 这里提供了一款无广告版的冰点文库下载器 演示demo： 操作很简单： 找到所需文档的链接，复制到下载冰点下载器，即可下载 搜索微信号：darerpm，关注公众号 公众号后台回复冰点下载器，即刻获得下载链接 Pandownload 每一位产品人都会遇到以下“需求” 坑爹的百度云下载限速！！！ 这一款是现在非常常用的破解百度云下载速度限制的软件 应该很多人都知道 这里就不具体演示了 提醒一句： 如果你在较短的时间内，利用Pandownload从百度云盘下载大量大文件 即使是从你自己的百度云盘下载也不行 即使这些大文件是你上传的也不行 百度云盘检测到这种行为，认为是可疑下载 把你的账号列为异常，强制对账号下载限速 这时，Pandownload也无能为例 需要过一段时间才可以回复正常 搜索微信号：darerpm，关注公众号 公众号后台回复pandownload，即刻获得下载链接 这是产品人必用软件系列的第三期 此系列逢五更新 也就是每月的5号、15号和25号更新]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件资源</category>
      </categories>
      <tags>
        <tag>软件资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test13-用函数写一个简单的模块]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F01%2FTest13-%E7%94%A8%E5%87%BD%E6%95%B0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节我们利用前面学习的Python函数(def)知识，做一个简单的模块(module)，然后我们从外部调用这个模块的函数。 [TOC] 源代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# ex25.pydef break_words(stuff): """ This function will break up words for us. """ words=stuff.split(' ') return words def sort_words(words): """ sorts the words. """ return sorted (words) def print_first_word(words): """ prints the first word after popping it off. """ word=words.pop(0) print worddef print_last_word(words): """ prints the last word after popping it off. """ word=words.pop(-1) print word def sort_sentence(sentence): """ takes in a full sentence and returns the sorted words. """ words=break_words(sentence) return sort_words(words) def print_first_and_last(sentence): """ prints the first and last words of the sentence. """ words=break_words(sentence) print_first_word(words) print_last_word(words) def print_first_and_last_sorted(sentence): """ sorts the words then prints the first and last one. """ words=sort_sentence(sentence) print_first_word(words) print_last_word(words) 我们来分析下以上代码中，每一个函数的作用 把句子中的字母分离，然后返回到words中 把words中的字母重新排序，然后返回到sorted_words中 输出words中存储的第一个字母 输出words中存储的最后一个字母 把重新的排序的字母组成一个句子，然后返回到sorted_words中 输出words的第一个和最后一个字母 输出sorted_words的第一个和最后一个字母 你应该看到的结果 注意：我对上面这个代码文件的命名是test13.py 我们来分析下编译时每一句的作用是什么？ 在第5行，将test13.py执行了import,和我们前面介绍的import作用是一样的。在import的时候是不需要加.py后缀的。把test13.py当成一个模块module来使用，在这个模块里定义的函数是可以直接调用的。 第6行创建了一个语句 第7行使用test13调用第一个函数test13.break_words。其中的.符号可以告诉Python：“我要运行test13模块里那个叫break_words的函数。” 第8行只是输入words，而Python会在第9行打印出words这个变量里的内容，输出的结果是一个列表，后面小节会讲到的 第10~11行使用test13.sort_words来得到一个排序过的句子 第13~16行使用test13.print_first_word和test13.print_last_word将第一个词和最后一个词打印出来 第17行和第8行的作用是一样的，输出words这个变量里的内容 第19行和第21行的作用同上，是打印出第一个词和最后一个词 第23行和第8行的作用类似 第25行调用函数test13.sort_sentence 剩下几行的作用都和前面的作用都类似了 本节要掌握的知识 pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。 标准写法： 1list.pop(obj=list[-1]) 参数： 123obj -- 可选参数，要移除列表元素的对象。默认参数为-1，是最后一个元素参数0，是第一个元素 示例： 123456789aList = [123, 'xyz', 'zara', 'abc']print "A List : ", aList.pop(-1)# 参数 -1 指向的是 abcprint "B List : ", aList.pop(0)# 参数 0 指向的是 123print "C List : ", aList.pop(1)# 参数 1 指向的是 xyzprint "D List : ", aList.pop(2)# 参数 2 指向的是 zara 这是**《笨方法学Python》**的第十三篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图床工具选择哪个好？|产品软件|2rd]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F03%2F01%2F%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9%E5%93%AA%E4%B8%AA%E5%A5%BD%EF%BC%9F-%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6-2rd%2F</url>
    <content type="text"><![CDATA[在上一期我们介绍了Markdown写作必须知道的图床知识这是传送们，点击查看上期内容 这一期，我们会介绍图片上传图床时，非常好用的工具，大大提高你的写作效率 假如不利用图床工具，我们插入图片时，需要几步呢？ 以SM.MS图床为例演示 演示demo 假如，我们不使用图床工具，那我们就需要从本地上传到图床，然后复制其生成的Markdown指令， 将指令复制到编辑器，即可使用。 但很多情况下，我们会有如下需求： 图片上传到图床后，自动把Markdown指令复制到粘贴板 复制图片到剪贴板，然后工具可以自动上传到图床，并实现上一条的功能 很棒的需求，确实有一些能够满足以上需求的工具 [TOC] Mpic 这一款图床工具仅仅支持七牛云 如果你不用七牛云 可以跳过这趴了 软件图标，右键，之后会看到下图 这款软件，既支持本地上传，也会识别粘贴板上的图片，自动上传 图片上传后，会自动生成Markdown指令到粘贴板 不过，需要你提前设置好七牛云的账号 操作很简单，上手超级容易 搜索微信号：darerpm，关注公众号 公众号后台回复mpic，即刻获得下载链接 Fu 这一款支持的图床有：SM.MS和路过图床 如果你使用七牛云、阿里云、腾讯云、又拍云、微博等，可以跳过这一趴 除了图床之外，这款还支持： sftp和ftp 设置 这一款同第一款一样，这款软件，既支持本地上传，也会识别粘贴板上的图片，自动上传 图片上传后，会自动生成Markdown指令到粘贴板 只要提前设置好即可 搜索微信号：darerpm，关注公众号 公众号后台回复fu，即刻获得下载链接 Picgo 这三款中，颜值最高的图床工具 支持平台最多的图床工具 支持的平台有： 勾选即可使用，但是需要设置和选择一个作为默认图床 设置demo 不过，这款不支持剪贴板自动上传到图床，需要设置快捷键，才可以支持剪贴板自动上传到图床 我快捷键设置为ctrl+tab 搜索微信号：darerpm，关注公众号 公众号后台回复picgo，即刻获得下载链接 经过实践发现，以上所有对gif动图的支持都不好，不能很好的支持自动上传，需要选择本地导入的方式。 总之： 如果你仅仅使用七牛云，选择Mpic 如果你想使用sftp和ftp,必须选择Fu 如果你想要一款高颜值，支持平台多的，选择Picgo]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件资源</category>
      </categories>
      <tags>
        <tag>软件资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test12-函数可以返回某些结果]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F28%2FTest12-%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E8%BF%94%E5%9B%9E%E6%9F%90%E4%BA%9B%E7%BB%93%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节主要学习return()的用法：将变量设置为“一个函数的值” [TOC] 源代码 12345678910111213141516171819202122232425262728293031# ex21.pydef add(a,b): print "adding %d+%d"%(a,b) return a+b def subtract(a,b): print "subtracting %d-%d"%(a,b) return a-b def multifly(a,b): print "multiflying %d*%d"%(a,b) return a*b def divide(a,b): print "dividing %d/%d"%(a,b) return a/b print "let's do some math with just function."age=add(30,5)height=subtract(78,4)weight=multifly(90,2)iq=divide(100,2)print "age:%d,height:%d,weight:%d,iq:%d."%(age,height,weight,iq)print "Here is a puzzle."what=add(age,subtract(height,multifly(weight,divide(iq,2))))print "that become: ",what,"can you do it by hand?" 需要注意的地方 代码用用到的add()，是自定义的函数，而不是python支持的add()指令的用法 你应该看到的结果 本节学到的知识点 return()指令 return 语句是Python语言中函数返回的一个值，每个函数都应该有一个返回值； 其中，return返回值可以是一个数值，一个字符串，一个布尔值或者一个列表。 Python 函数返回值return ，函数中一定要有return 返回值才是完整的函数， 如果你没有定义Python 函数返回值，那么得到一个结果是None对象， 而None表示没有任何值 示例，转载地址 注意最后一行print输出句的写法 最后一句的写法挺有意思的 这是**《笨方法学Python》**的第十二篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown写作必须知道的图床知识]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F28%2FMarkdown%E5%86%99%E4%BD%9C%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%9B%BE%E5%BA%8A%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[如果你喜欢用Markdown写文章，又或者刚入了Markdown的坑 那么你一定会遇到一个绕不开的问题： 图片的插入 Markdown插入图片很简单，不少markdown编辑器都支持本地图片插入、图片直接拖入 但是除非你导出为pdf或者word格式。 否则，只要改动了图片在本地的位置，这个图就会挂掉。 为了解决这个问题，一般需要图床来解决 图床简单理解就是一个存放你图片的云盘 图片上传到云端后，图床会给你生成一个url，在markdown编辑器插入这个url，就可以插 入图片了。 所以，如果你喜欢Markdown写作的爽感，就需要了解下图床知识 重要图片不适合使用图床，云端再好用，都不如本地安全 [TOC] 收费图床 1. 七牛云 利用其对象存储的服务，可以用作个人图床 注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快， 七牛云是国内专业CDN服务商，插件支持比较多，有免费ssl证书，但https流量收费 注意：七牛云30天后会回收测试域名，因此你必须要绑定自己的已经备案的域名 如果你没有备案域名、不做个人网站，平时就是写写文章的话，不建议使用 因为域名回收后，图床就无法使用了 如果你还是想体验下，可以使用我的邀请链接注册： https://portal.qiniu.com/signup?code=3lnfyf7u5m5hu 因为我也可以得到一些奖励 2. 又拍云 和前面提到的七牛云一样，两家的业务也类似，服务也类似 注册认证后有10G永久免费空间，每月15G的HTTP和HTTPS流量，提供两款可以免费续期的SSL证书，不过用户需要加入又拍云联盟（即在网站底部添加又拍云logo及官网链接） 目前还不清楚又拍云提供的域名是否会回收，没有查到相关讯息 3. 腾讯云 可以使用六个月的免费存储容量、免费请求和免费流量 4. 阿里云 收费情况： 总之，对于企业级的图床服务，想长期免费是不可能的 如果你只是用来写写文章，建议实用下面介绍的免费图床 如果你想建站，可以考虑以上收费图床 不过一般都会要求你绑定已备案的域名 免费图床 1. 微博图床 微博图床的特点是免费，没有容量限制，全网 CDN 加速，支持 HTTPS，到哪里都很快。但是免费的服务也有不足的地方，上传的图片会被转成 jpg，图片中可能加上了肉眼难以识别的水印，另外微博的图片鉴别服务也可能会随时删除你的图片。 大陆最好用的免费图床了 需要注册微博账号 使用微博图床，一般需要一些图床上传工具， 关于图床上传工具，后面会介绍 2. SM.MS图床 服务器搭建在香港，免费使用，官网链接 3. 路过图床(imgchr) 服务器在海外，感觉随时有可能被墙额。。。 免费图床有很多，最常用的就是这三个了 微博图床应该算是最稳定的了 还是那句话： 重要的图片不要用图床，云端在方便，也不如本地安全 一般图床上传都需要一些辅助工具，来减少工作量，改天会介绍图床工具的选择]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test11-函数和文件]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F27%2FTest11-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节是利用Python的函数做文件的IO处理 [TOC] 源代码 12345678910111213141516171819202122232425262728#ex20.pyfrom sys import argvscript,input_file=argvdef print_all(f): print f.read()def rewind(f): f.seek(0)def print_a_line(line_count,f): print line_count,f.readline()current_file=open(input_file)print "First let's print the whole file:\n"print_all(current_file)print "Now let's rewind, kind of like a tape."rewind(current_file)print "Let's print three lines:"current_line=1print_a_line(current_line,current_file)current_line=current_line+1print_a_line(current_line,current_file)current_line=current_line+1print_a_line(current_line,current_file) 这里需要注意，在编译前需要创建一个txt文件 1234# 文件命名为11.txtthis is line 1this is line 2this is line 3 应该看到的编译结果 需要注意的知识点 复习下，我们前面学过的文件I/O的知识 复习传送门：知乎传送门 CSDN传送门 这里就简单复习下read()的知识 read()命令方法从一个打开的文件中读取一个字符串。Python字符串可以是二进制数据，而不是仅仅是文字。 read()指令的标准语法如下： flieObject.read([count]) 代码中用到了readline()指令 readline()会扫面文件中的每一个字节，知道找到一个\n为止，然后它会停止读取文件，并且 作为字符串返回此前的文件内容。文件f会记录每次调用readline()后的读取位置，这样它就可 以在下次被调用时读取接下来的一行了。 代码中用到的seek()指令 seek()方法用于移动文件读取指针到指定位置 标准写法： 1fileObject.seek(offset[, whence]) 参数： offset： 开始的偏移量，也就是代表需要移动偏移的字节数 **whence：**可选，默认值为 0。给offset参数一个定义，表示要从哪个位置开始偏移； 0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。 所以seek(0)的意思是从文件开头开始算起 这是**《笨方法学Python》**的第十一篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test10-变量与函数]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F26%2FTest10-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 本节主要学习函数的多种参数传递方式 我们可以直接给函数传递数字，也可以传递变量，还可以传递给它数学公式，甚至也可以把数学公式和变量合起来用。 [TOC] 源代码 12345678910111213141516171819# ex19.pydef cheese_and_crackers(cheese_count,boxes_of_crackers): print "You have %d cheeses!"%cheese_count print "You have %d boxes of crackers!"%boxes_of_crackers print "Get a blanket.\n" print "We can just give that function numbers directly:"cheese_and_crackers(20,30)print "Or,we can use variables from our script:"amount_of_cheese=10amount_of_crackers=50cheese_and_crackers(amount_of_cheese,amount_of_crackers)print "We can even do much inside too:"cheese_and_crackers(10+20,5+6)print "And we can combine the two, variables and math:"cheese_and_crackers(amount_of_cheese+100,amount_of_crackers+1000) 这个函数脚本思路很简单，主要以下几个点需要注意： def()指令后，记得加: 回想下前面学过的%d、%r、%s之间的区别 \n的作用 应该看到的结果 常见问题 对每一行代码添加#注释 第11行和12行创建的变量会不会改变函数中的变量 不会。这些变量是在函数之外的，当它们被传递到函数中以后，函数会为这些变量创建一些临时的版本，当函数运行结束后，这些临时变量就被丢弃了。 函数的参数个数有限制吗？ 取决于Python的版本和所用的操作系统，不过就算有限制，限值也是很大的。 一个问题 作者在文中提出了一个问题： 如果让用户给函数传递变量呢？应该怎么写？比如：让用户输入cracker和cheese的数量 我写的指令如下： 1234print "Or,we can use variables from user:"amount_of_cheese=raw_input("Enter your numbers: ")amount_of_crackers=raw_input("Enter your numbers: ")cheese_and_crackers(amount_of_cheese,amount_of_crackers) 但是在运行时，一直报错 希望大佬可以帮忙解释写这个非常简单的基础问题 这是**《笨方法学Python》**的第十篇文章 希望自己可以坚持下去 希望你也可以坚持下去]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test8-变量、函数]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F25%2FTest8-%E5%8F%98%E9%87%8F%E3%80%81%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 这一节我们会学习到“函数”，函数可以做到以下三件事： 它可以给代码段命名，就跟“变量”给字符串命名一样 它可以接收参数，就想前面的脚本接收argv一样 使用上面第一条和第二条，可以创建**“小命令”** 文章主要分为以下部分： [TOC] 源代码 我们使用def指令建立函数 12345678910111213141516171819# ex18.py# this one is like your scripts with argvdef print_two(*args): arg1,arg2=args print "arg1:%r,arg2:%r"%(arg1,arg2)#ok,that *args is actually pointless,we can just do thisdef print_two_again(arg1,arg2): print "arg1:%r,arg2:%r"%(arg1,arg2)#this just takes one argumentdef print_one(arg1): print "arg1:%r"%arg1#this one takes no argumentsdef print_none(): print "I got nothing." print_two("darer","d")print_two_again("darer","d")print_one("First!")print_none() 应该看到的结果 对源代码的解释 首先我们告诉Python使用def命令创建一个函数，也就是define(定义)意思 紧挨这def命令的是函数的名字。本例子中，它的名字是print_two，但是名字可以随便取，比如叫darerpm，但是最好可以体现这个函数的功能 然后告诉函数，我们需要*args(asterisk argv),这和脚本的argv非常相似，参数必须圆括号()中才能执行 接着用冒号:结束本行，然后开始下一行缩进(可使用tab键缩进) 以print_two函数为例，其中第一行的作用是将参数解包，这个脚本参数解包的原理类似 为了演示它的工作原理，我们把解包后的每一个参数都print出来 函数print_two存在一些问题：它并不是创建函数最简单的方法，在Python函数中，可以跳过整个参数解包 的过程，直接使用()里边的名称作为变量名，这就是print_two_again实验的功能。 接下来的例子是print_one，它演示了函数如何接收单个参数 最后一个例子是print_none，它演示了函数可以不接收任何参数 常见问题 函数命名有什么规则？ 和变量名一样，只要以字母、数字和下划线组成，而且不是数字开始，就可以了 *args里的*是什么意思？ 它的功能是告诉Python把函数的所有参数都接收进来，然后放到名叫args的列表中去。和前面在用的argv差不多，只不过前者用在函数上。 这是**《笨方法学Python》**的第八篇文章 希望自己可以继续坚持下去 希望你也可以坚持下去 ​]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于手机厂商竞相推出折叠屏手机的思考]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F25%2F%E5%85%B3%E4%BA%8E%E5%8E%82%E5%95%86%E6%8E%A8%E5%87%BA%E6%8A%98%E5%8F%A0%E5%B1%8F%E6%89%8B%E6%9C%BA%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[前几年全面屏手机逐渐占领市场，手机屏幕逐渐向着拥有更好视觉体验的方向进发。 去年，柔宇科技发布第一款折叠屏手机(个人觉得设计挺丑的)，全球各大手机厂商均被爆出即将推出自家折叠屏手机。在MWC2019大会前夕，三星、华为先后发布自己折叠屏手机Hold和MateX。 [TOC] 1. 为什么厂商要竞相发布折叠屏手机？ 尽快的占领用户心智 现在手机同质化太严重，去除Logo后，很难辨别这是谁家的“娃”。所以，厂商犹如军备竞赛一般竞相发布自己的新形态手机。 全面屏手机，小米拔得头筹 折叠屏手机，三星、华为不遑多让 在公司营销的配合下，赚足了消费者的眼球，更快的占领用户的心智。 折叠屏是手机形态发展的下一个阶段，也有可能是终点 手机在经历全面屏的过渡期后，不可避免的要进入折叠屏 手机需要兼具通讯+上网两大功能 通讯需要手机具有更好的携带型和握感；上网需要手机有更好的视觉感官体验 折叠屏即可大屏看视频、打游戏；又可小屏放兜里 对手机的复杂使用场景有着更好的兼容性 2. 2019年，折叠屏手机会占据主流市场？ 2019年，折叠屏手机应该还不会占据主流手机市场，不会是普罗大众的选择，还是土豪们的“玩物” 主要有以下几个原因： 成本 电量 重量 成本 折叠屏采用的是OLED柔性屏幕，屏幕生产的良率低，成本高，现在手机均在一万三左右， 高昂的售价会导致其出货量低，产能低，成本下降的空间小。 去年，苹果手机售价也达到一万元，结果大家都知道，市场给苹果浇了一盆冷水。 而且最近几年，经济形势不好，消费者更会捂紧钱袋子 电量 消费者买折叠屏手机当然是为了享受到其大屏的爽感 我们知道，屏幕越大、电量的消耗也是极高 目前，电池技术的发展已到瓶颈，还没有突破性技术出现 虽然厂商推出了快充技术，但是电量仍然是会制约折叠屏手机发展的一个重要因素 重量 为了解决电量问题，目前方案多采用两款电池 但是两块电池又会带来手机重量的增加 前面我们提到，手机要求有较高的便携性，重量大的手机显然不会有好的体验 3. 折叠屏手机会带来机遇吗？ 折叠屏手机一定会进入主流市场，顺利的话可能需要三年左右的时间 折叠屏会带来与普通手机完全不同的交互体验 对于软件开发者来说，这里会潜藏这巨大的机会 我理想中的折叠屏手机]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品人必用的大幅提高办公效率的工具|产品软件更新|1st]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F24%2F%E4%BA%A7%E5%93%81%E4%BA%BA%E5%BF%85%E7%94%A8%E7%9A%84%E5%A4%A7%E5%B9%85%E6%8F%90%E9%AB%98%E5%8A%9E%E5%85%AC%E6%95%88%E7%8E%87%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BA%A7%E5%93%81%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B01st%2F</url>
    <content type="text"><![CDATA[[TOC] Groupy 每一位产品经理都会触发一下“彩蛋”： 办公时会打开多个软件，需要在不同软件之间切换，查看 有时会被搞的眼花缭乱 你肯定会有以下需求： 希望把所有的软件整合在一起 软件切换和查看可以非常方便 既然有需求，那就一定有解决需求的办法： 有这么一款软件，它可以把所有软件整合在一起，就像浏览器的标签页一样，点击不同的标签页即可实现软件之间的切换。 Groupy可以帮助把Windows桌面上的多个软件整合到一个窗口，就如同浏览器的标签页一样。 只需要把一个窗口拖到另外一个已经打开的窗口上，窗口就会自动整合到一起，每个窗口都会自动转换为标签页，只需要在标签页点击不同的标签，即可切换程序。 你的工作桌面(without Groupy) 经过Groupy整理后的桌面 Groupy操作界面 演示demo: 更多好玩的功能，可以下载后探索 在微信公众号后台回复：groupy，即刻免费下载 Listary 每一位产品人都会触发以下“彩蛋” 电脑里文件太多了，每次领导要材料我就头疼 找文件简直龟速 你肯定有如下需求： 文件检索定位迅速、高效 操作简单，不费事 既然有需求，就一定有解决需求的办法 Listary是一款可以帮你迅速定位到文件位置的软件，默认双击ctrl键即刻调用 Listary的界面非常简单 界面演示： 默认开机启动，检索时双击ctrl即刻调出检索窗口 演示demo： 有一个问题需要注意 安装完Listary，它默认在桌面的空白区域双击出现 快捷菜单 如图： 如果你不喜欢，可以去设置关掉 演示demo： 这时，你在桌面空白处，双击就不会出现快捷菜单了 更多好玩的功能，可以下载后探索 在微信公众号后台回复：listary，即刻免费下载 Ditto 每一位产品人都会遇到这样的“彩蛋” windows系统自带的剪贴板太烂了 每次只能粘贴上一次复制的东西 不能粘贴前面几次复制的东西 大大降低了工作效率 有这样的需求，就一定会有解决办法滴 Ditto就是这样一款剪贴板增强神器 它可以保存你剪贴板内容，而且支持检索功能，你可以轻松找到之前复制的内容，不仅支持文字，还支持图片等 界面演示： 默认开机启动，默认快捷键ctrl+·打开 演示demo： 更多好玩的功能，可以下载后探索 在微信公众号后台回复：ditto，即刻免费下载]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件资源</category>
      </categories>
      <tags>
        <tag>软件资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo框架下，实现图片一键式上传到七牛云]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F23%2Fhexo%E6%A1%86%E6%9E%B6%E4%B8%8B%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%80%E9%94%AE%E5%BC%8F%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91%2F</url>
    <content type="text"><![CDATA[在使用hexo框架驱动个人博客时，图片的插入是一个比较费心的事情 以我为例，我使用hexo+Github搭建个人独立博客 但是Github仓库提供的存储空间是有限的，如果把图片保存到本地(对应的是Github仓库)，那么不多久就会占满整个空间。 最好的解决办法，就是把图片上传到图床，目前主流采用的是七牛云(可以通过我的链接注册：https://portal.qiniu.com/signup?code=3lnfyf7u5m5hu ，而且七牛云平台还会送你优惠券)存储图片。 但是hexo在搭建博客的过程中，对图片上传到七牛云的工作并不友好。 下面，就扒一扒，为了便于把图片上传到七牛云，我都采用了哪些方法？ 第一种方法 安装hexo-qiniu-sync插件 1npm install hexo-qiniu-sync --save hexo-qiniu-sync安装教程，可以参考这个博客 假设，我们安装好了hexo-qiniu-sync插件，我们数一数在写博客时，上传图片到图床需要几步？ 通过截图、复制等方式找到需要插入的图片demo.jpg 把图片放在**&gt;cdn&gt;images文件夹下** 在博客编辑器(我用的是Typora)，插入这个图片，需要一个这样的指令 这是在生成站点时，就会被同步上传到图床，并在博客网站上引用这个图片 但是这里有一个问题：Typora插入一个这样的指令，并不能同时预览这张图片 为了介绍空间，把放置在&gt;cdn&gt;images文件夹下的图片删除 以上方法存在两个不满意的地方： 图片还是先放在Github的本地仓库中，为了节省空间，需要定期删除 (如果我可以从本地的任意位置导入图片，并自动上传图床就太棒了) 在Typora中插入指令不能在预览到图片 (如果可以直接在Typora中预览到插入图片的效果，就太棒了) 第二种方法 安装hexo-admin插件，使用博客后端管理工具 1npm install hexo-admin --save 这个使用过程，我不太有发言权 我一直没有安装成功，原因目前还没有找到 hexo-admin插件使用教程，可以参考这篇博客 使用hexo-admin有两个好处 非常方便的管理后台的博客 可以实现将本地任意文件夹的图片上传到图床 解决第一种方法的第一个问题 但是我还是不满意，因为我已经用习惯了编辑器-Typora，就想用Typora编写自己博客，那这时hexo-admin就帮不了你了，怎么办呢？ 第三种方法 使用Mpic第三方软件，帮你一键上传到七牛云 如图所示，图片在上传到七牛云后，会生成一个链接，并自动复制到了剪贴板，此时你只要复制到Typora的文档中，就会自动生成图片了。 可以同步预览图片效果，非常方便。 需要”设置账号“和你的七牛云绑定 免费下载传送门 官网点这里 参考资料 所以利用Typora+Mpic 两个软件合作，可以非常方便的实现图片上传到图床，且还可以实现： 使用Typora编辑器编写博客 图片可以在任意本地文件夹中上传到七牛云 在编写博客时，可以同步预览效果 以上]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora+七牛云，高效写Markdown|产品必用软件|第1期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F22%2FTypora-%E4%B8%83%E7%89%9B%E4%BA%91%EF%BC%8C%E9%AB%98%E6%95%88%E5%86%99Markdown-%E4%BA%A7%E5%93%81%E5%BF%85%E7%94%A8%E8%BD%AF%E4%BB%B6-%E7%AC%AC1%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[作为一名产品经理，日常免不了要和大量的文档打交道，比如：需求文档、竞品分析、MRD、PRD等等 而且产品人日常还要写写文章什么的。 如果用传统的word去写文档，真的是： 写作两分钟，格式两小时 而不甘心的你，在学习了Markdown之后，不在为格式发愁了，大大提高了输出效率 进门右转，Markdown入门 一篇文章主要有文字、链接、图片以及格式等组成 利用Markdown写作基本帮我们解决了格式排版的问题(如果对格式要求非常高，可以出门左转，学些Latex排版) 但是所有的Markdown编辑器都不能很好的解决图片的问题，图片多为本地保存，既占空间，还不能移动到其他文件夹，所以想，如果可以上传到图床就好了。 最好可以一键式操作。 下面就是见证奇迹的时刻！ 首先给大家推荐一篇博客，本文借鉴了这篇文章的内容。 1. Markdown编辑器–Typora Typora是windows系统最好看的编辑器(个人认为：颜值最高)，但是对新手不是太友好，需要适应其“所见即所得”的理念。 这是操作界面，干净、简约 免费下载传送门 Typora官网 2. 图片–最好用的截图工具–Snipaste windowns系统最好用 核心功能有截图、贴图两个 截图 贴图 免费下载传送门 官网点这里 参考资料 3. 图床—用于存储写作用到的图片 推荐 七牛云 为什么是七牛云： 提供稳定的存储服务， 是免费的 大家都在用 七牛云图床使用指南 4. 一款帮助你摆脱本地图片路径困扰，一键上传到七牛云的工具 MPic windows系统少有的可以方便上传到图床的工具(且只支持七牛云) 如图所示，图片在上传到七牛云后，会自动生成一个链接，并自动复制到了剪贴板，此时你只要复制到Typora的文档中，就会自动生成图片了。 而且你随时的分享，都不会受到影响！ 需要”设置账号“和你的七牛云绑定 免费下载传送门 官网点这里 参考资料 更多有趣的使用技巧，需要你自己去探索了！]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件教程</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python_文件IO_知识]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F22%2FPython_%E6%96%87%E4%BB%B6IO_%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[在通过《笨方法学Python》学习利用Python读取、读写文件的过程中，需要掌握一些基础知识。 [TOC] open命令 write命令 close命令、read命令 1. open命令 open()指令的作用是打开文件 标准的语法如下： open(file[, mode[, buffering[, encoding[, errors[, newline[, closefd=True]]]]]]) 指令的参数说明： file： 要打开的文件名，需加路径(除非是在当前目录)。唯一强制参数 mode： 文件打开的模式 buffering： 设置buffer（取值为0,1,&gt;1） encoding： 返回数据的编码（一般为UTF8或GBK） errors： 报错级别（一般为strict，ignore） newline： 用于区分换行符(只对文本模式有效，可以取的值有None,’\n’,’\r’,’’,’\r\n’) closefd： 传入的file参数类型（缺省为True） 常用的mode参数有哪些： ‘r’:以只读模式打开(缺省)，(必须保证文件存在) ‘w’:以只写模式打开。若文件存在，则会自动清空文件，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。 ‘a’:以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。 ‘+’:以读写模式打开。 各参数之间的关系：详见下图 参考的一些博客，讲的更加详细： 1 2 3 2. write命令 wite()指令可将任何字符串写入一个打开的文件。Python字符串可以是二进制数据，而不是仅仅是文字。 write()指令的标准语法如下： filename.write(string) 1234567# 打开一个文件fo=open('foo.txt','w') # 如果这么写： fo=open("foo.txt","w") 运行结果会有不同吗？fo.write('I like coding.\n')# 回想下 `\n` 的作用是什么？# 关闭文件并保存fo.close() 3. close命令、read命令 close()命令用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作， 否则会触发 ValueError 错误。 close()方法允许调用多次。用 close（）方法关闭文件是一个很好的习惯 close()指令的标准语法如下： fileObject.close() read()命令方法从一个打开的文件中读取一个字符串。Python字符串可以是二进制数据，而不是仅仅是文字。 read()指令的标准语法如下： flieObject.read([count]) 在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。 下面的代码接上面的代码： 1234fo=open('fo.txt','r+')str=foo.read(6)print "读取的字符是：",strfo.close() 运行看一看输出结果 输出结果为：I like 注意：空格也是一个字符 全文参考博客]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test7-读取文件和读写文件]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F21%2FTest7-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%92%8C%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ ex15 涉及两个文件：一个是ex15.py文件，一个是ex15_sample.txt文件。该文本文件的内容如下： This is stuff I typed into a file. It is really cool stuff. Lots and lots of fun to have in here. ex15.py 的作用就是用自己设计的脚本“打开”txt文件。 文章主要分为以下部分： [TOC] 原文—摘录至《笨方法学Python》第三版 &amp; 123456789101112131415161718192021222324252627282930313233343536# ex15.pyfrom sys import argvscript,filename=argvtxt=open(filename)print "Here's your file %r."%filenameprint txt.read()print "Type the filename again:"file_again=raw_input('&gt; ')txt_again=open(file_again)print txt_again.read()# ex16.pyfrom sys import argvscript,filename=argvprint "We're going to erase %r." %filenameprint "If you don't want that,hit CTRL-C(^C)."print "If you do want that,hit RETURN."raw_input("?")print "Opening the file..."target=open(filename,'w')print "Truncating the file. GoodBye!"target.truncate()print "Now I'm going to ask you for three lines."line1=raw_input("line 1: ")line2=raw_input("line 2: ")line3=raw_input("line 3: ")print "I'm going to write these to the file."target.write(line1)target.write("\n")target.write(line2)target.write("\n")target.write(line3)target.write("\n")print "And finally,we close it."target.close() 应该看到的结果 推荐使用windows下的Powershell（命令行） 12345678910&gt; python ex15.py ex15_sample.txtThis is stuff I typed into a file.It is really cool stuff.Lots and lots of fun to have in here.Type the filename again:&gt; ex15_sample.txtThis is stuff I typed into a file.It is really cool stuff.Lots and lots of fun to have in here. 1234567891011121314&gt; python ex16.py test.txtWe're going to erase test.txt.If you don't want that,hit CTRL-C(^C).If you do want that,hit RETURN.?Opening the file...Truncating the file. GoodBye!Now I'm going to ask you for three lines.I'm going to write these to the file.line1: Hello worldline2: Hello Pythonline3: let's go!!!I'm going to write these to the file.And finally,we close it. 附加练习 以下摘录自原文 每一行都写一下注释 利用pydoc 功能查一下read()命令、write()命令、close()命令等]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[看看产品人都在关注些啥？|产品问答|第1期]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2F%E7%9C%8B%E7%9C%8B%E4%BA%A7%E5%93%81%E4%BA%BA%E9%83%BD%E5%9C%A8%E5%85%B3%E6%B3%A8%E4%BA%9B%E5%95%A5%EF%BC%9F%E4%BA%A7%E5%93%81%E9%97%AE%E7%AD%94%E7%AC%AC1%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[产品人只有不断思考、复盘，逐步形成自己方法论，才能形成有效的护城河 俗话说：“三人行，必有我师” 产品人应该多看看同行对事情的理解和分析角度 以下内容来自产品相关社区，如有侵权，请联系删除 [TOC] Q1：新产品战胜老产品，你觉得最重要的原因是什么？ 常言道，“长江后浪推前浪，前浪拍死在沙滩上。”此句对于产品圈的新旧交替同样适用。 在同一个赛道里面，一款扬名于江湖的产品却跑不过刚出世不久的新产品，这是为什么呢？ author:向日葵诗人kevin @人人都是产品经理社区 Answer： 我认为新产品是非常能难战胜老产品，因为老产品在某个领域满足了用户的需求，且已经获得了绝大部分的用户，并且在想办法建立自己的壁垒。 新产品在某个领域进行细分，挖掘新的用户需求才是明智的选择。 例如：A已经是数学领域中微积分的的老大，B用户可以在数学领域中的积分方程发力，成为这个领域的老大。 这才是最优解。 新产品在细分领域成功有2个重要因素，它们分别是：用户需求、替换成本。 用户需求 产品要获取用户，肯定要满足用户的需求，许多产品的用户一直呈现增长状态，并不一定是这款产品满足了用户的需求，而是用户没有找到更加合适的产品。 例如：如今做社交和电商，许多人都会想如何面临微信和淘宝这两座大山， 微信在社交领域是老大，它满足了用户即时通讯的需求，如果现在一款新产品去做即时通讯领域，投资人会看好吗？陌陌、soul这样的产品就是在社交领域中耕耘陌生人社交的领域，这块领域是微信没有涉及的。 用户的需求也会随着时间的流失、技术的变革不断变化。这才有新公司不断冒出，并且成为巨头。 替换成本 用户的替换成本包括几个方面，分别为：品牌、用户体验、沉没成本。 品牌 品牌代表一个企业的形象，代表用户对产品的第一印象，信任度等等。例如：你把钱放在支付宝很放心，你不必担心支付宝明天跑路，因为它的背后是阿里巴巴。 用户体验 用户体验非常重要，就不细说了，只有把每一个细节做到极致，能够获得更多用户的青睐。 沉没成本 用户在使用产品的过程中，与产品进行交互，用户在产品中获得更多的认同感，如果用户更换产品，用户的认同感瞬间就会丢失。 其实这个问题，每一个人都有自己的解读，莫衷一是 这里我推荐两本书《创新者的解答》和《创新者的窘境》 这两本主要将商业巨头为什么会陨落，新巨头为什么会诞生 Q2：用户为什么会决定关闭你的APP通知？ author:李小玉 @人人都是产品经理社区 Answer： 主要从两方面考虑：用户使用产品的场景和产品推送的目的 首先，用户使用场景，决定了用户对产品的定位和期待方向。 比如微信，我把它定义为必不可少的通讯工具，那么它的通知推送我就不会关掉，甚至会通知、条幅、标记、声音四连开启，如果有些人或者群经常产生无效信息，我会开启消息免通知，以保证有效信息能及时获取。 再比如支付宝，会反应我的资金变动，同样需要打开通知。 那么例如淘宝等购物软件、王者荣耀等游戏、还有社交社区类、工具类、视频类软件，我对它们的需求只是娱乐，只在特定场景下有目的的去使用，并且在我不使用的时候，是对其没有任何目的和预期的，那么它们推送的通知就很难吸引我、打动我，并且使我反感。 其次，再来说说为什么上面说到的那些类型产品通知很难吸引我，这就要说到产品本身的目的了。 推送最直白的目的，是引诱用户使用产品，对象是老用户，也就是要增长转化率和留存率，增加日活。 有些软件还有更深层的目的，比如刺激消费、比如软广硬广的推荐等等。也就是说，产品本身的目的，与我们大多数用户的目的完全没有关联，甚至对立（因为我们不喜欢看广告，不需要更多的冲动消费等）。因此，这些推送对于用户来说，大部分是“无效”的。 在错误的时间、错误的场合，说了错误的话，所以我们只能跟通知说“拜拜”了。 经常有大佬说，互联网产品做的是“人性”，如果软件通知更多关注人性心理的话，说不定就能不被残忍拒绝了吧。 APP的推送就和互联网时代的邮件“轰炸”是类似的目的 利用大数据建立更准确的人物画像，在营销、商业和用户体验之间找到最完美的支点 可能才是解决之道吧 Q3：抖音推新品“抖店”，想要导流线下。你觉得可行么？ 2月27日，抖音宣布新推“抖店”产品。这是一款针对本地门店推出的区域化营销工具。 抖音方给出了一个案例：北京密云区的古北水镇春节期间利用“抖店”，POI页面的独立访客环比增540%，相关视频播放播放量环比增260%，新增粉丝数环比活动前增长了55倍（时间为活动前20天至截止）。古北小镇在春节发起的“新年有你年在一起”话题，参与量超 3.6万人次，总互动量超1300万，播放量达 4.1 亿。 author:当大哥就是好 @人人都是产品经理社区 Answer: 抖音这是在靠近大众点评的业务…… 抖音即使不缺乏用户增长的基因，也很难让用户在线上“种草”后老老实实走到线下。 比如，描述中的“古北水镇”，视频总共获得3.7w赞，按抖音的数据，用户参与的各项参数都很亮眼，不过被标记为“来过”的数量也仅仅7k。这种观看量和到店量不对等的情况，在抖音中并不是少数。 抖音宣布新推抖店产品。这是一款针对本地门店推出的区域化营销工具。门店通过认领当地POI，可对专属页面进行编辑装饰。用户在上传抖音的时候，可以附上选择相应的POI点。继而，门店可结合后续的发卡券等活动盘活线上流量，而门店及周边门店的“二维码贴纸”，让用户可通过拍视频领返券，帮助形成闭环和聚合视频。 下面贴一张抖店的逻辑图 Q4：往返医院太折腾，“网约护士”能放心约吗？ 摘要：“滴滴打针”来了。近日，国家卫健委发布《关于开展“互联网+护理服务”试点工作的通知》及试点方案，确定今年2月至12月在北京市、天津市、上海市、江苏省、浙江省、广东省6地试点“互联网+护理服务”。从护理服务提供的范围来看，这项试点工作主要针对我国的失能和半失能老人。 author:蕊胖胖 @人人都是产品经理社区 Answer: 我国60岁以上老年人口达2.4亿人，需要长期护理的失能、半失能老人达4000万。网约护士在保障安全和服务质量的前提下能解决很大一部分老人的护理问题，还有利于释放部分医院床位，以提高医院紧缺的床位资源利用率。 “网约护士”从设想走向现实可能遇到的问题： 1、资格认证与医患信息管理，包括护理资格认证、所属医疗机构认证、病人身份认证及服务记录存档。 2、考虑到上门护理可使用的医疗工具有限，需界定服务范围。 3、保证服务质量的连贯性，尤其对于一些需要持续观察的病患。 4、医患双方人身安全，各项意外保险措施。 5、护士资源缺乏。 6、病人约护士还是医疗机构约护士？ 网约护士最大的问题是医患安全和服务质量。在资格认证上，比如现有规定上门护士必须具备5年及以上临床护理经验等。安全上，护士手机配有追踪定位系统，可一键报警，购买各种相关保险等。服务质量上，先由医生进行评估再派护士上门，并保存所有诊断护理记录。人力资源上，个人猜想可吸纳散布在各街道的私人门诊、各组织具备救护实操经验的人员加入上门护理团队中，由专业医疗机构培训考核，并由医疗机构监控护理过程。 设想是好的，不过风险也是很大的 最后很有可能发展成支持网上预约的社区医院 抛出一个问题： 相比微信支付，支付宝经常会不定时推出各种营销活动，近日，支付宝又推出了“组战队，抢九亿”的活动。 在支付领域，支付宝已经是绝对的老大，用户习惯已经养成，那为什么支付宝要频繁推出营销活动呢？这样做的动机是什么呢？ 回答可以回复在评论区，好答案会被置顶哦]]></content>
      <categories>
        <category>产品问答</category>
      </categories>
      <tags>
        <tag>产品问答</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTex:参考文献引用的方法]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FLaTex-%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E5%BC%95%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[LaTex排版时，引入参考文献的方法 引入参考文献主要分为两种： 不使用BibTex 使用BibTex 这里我们主要介绍更为复杂的第二种：使用BibTex引入参考文献 利用BibTex的方法引入文献： 分为以下四步： 用LaTex编译写好的 .tex 文件，这是会生成一个 .aux文件，这是告诉BibTex将使用那些引用 用BibTex编译 .aux文件（有些仅编译 .bib文件，也可以） 再次用LaTex编译 .tex 文件，这是文档已经插入了参考文献，但是引用的编号不对 最后在用LaTex编译一次 .tex文件，这是会自动生成正确的引用顺序（引用顺序是与在文章中引用文献的先后顺序有关） 如果你采用的是TexStudio作为编译器，具体的操作方法如下： 按F6编译写好的 .tex 文件 按F8编译生成的 .aux 文件 按F6编译写好的 .tex 文件 按F6编译写好的 .tex 文件 以上就是使用LaTex排版时，遇到的引入参考文献的解决方法]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法基本编辑指南]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FMarkdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E6%9C%AC%E7%BC%96%E8%BE%91%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[Markdown语法基本编辑指南 Markdown语言侧重于内容编写，而不是排版，主要用于写 Blog 本指南所用Markdown编辑器软件:Typora 0.9.60 Typora 0.9.60 版本支持HTML和Markdown两种语言，但是两者不可交叉使用。 Markdown语法 突出显示 12==我是高亮== （默认为黄色)`我是标记` 字体修饰 1234**加粗***斜体*&lt;u&gt;下划线&lt;/u&gt;~~删除线~~ 自动编号 1[TOC] 硬换行符 123&lt;br/&gt;shift+enter双击space键，右侧会出现一个灰色的向下箭头 字体颜色、字号、大小 1234&lt;font color=red&gt;我是红色&lt;/font&gt;&lt;font face=黑体&gt;我是黑体&lt;/font&gt;&lt;font size=5&gt;我是5号字体&lt;/font&gt;&lt;font size=5 color=red face=黑体&gt;红色5号黑体字&lt;/font&gt; 上下标 12H^2^H~2~O 插入表情 1:happy: 引用 1&gt; 水平分割线 12---*** 数学表达式 12使用$$符号包裹的Tex命令右键&gt;插入&gt;公式 标注 12这是一个注释[^注释][^注释]： 这是一个注释 插入图片(默认为 居中) 12右键&gt;插入&gt;图像可以直接从“剪贴板”复制过来 调整图片尺寸 12&lt;img src='图片网址或者图片文件地址' style='width:300px;height:100 px'/&gt;&lt;img src='图片网址或者图片文件地址' style='zoom:50%'/&gt; 插入视频 1将视频文件拖放到Typora中，Typora会自动插入视频 HTML常用语法 居中 1&lt;center&gt;居中&lt;/center&gt; 高亮（默认为黄色） 1&lt;mark&gt;高亮&lt;/mark&gt; 字体修饰 1234&lt;b&gt;加粗&lt;/b&gt;&lt;i&gt;斜体&lt;/i&gt;&lt;u&gt;下划线&lt;/u&gt;&lt;s&gt;删除线&lt;/s&gt; 上下标 12&lt; SUP &gt; I’m feeling high. &lt;/ SUP &gt; &lt; SUB &gt; I’m feeling low. &lt;/ SUB &gt;]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown:从0到1入门]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FMarkdown-%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Markdown:从0到1入门 [TOC] 写在前面的话： 博主于2019年1月4号开始接触 Markdown语言，此前从未听说过；而且也非计算机背景。 所以本文非常适合新手==从0到1入门== 0.第零步 认识 Markdown 语言： 一篇详细的关于Markdown的介绍 Markdown语言侧重于内容编写，而不是排版，主要用于写 Blog 1.第一步 到这一步，我们知道Markdown是一种编译语言，算是HTML的一个子集，主要作用是让你专注于写作，“易读”、“易写”、“易记”。 ​ 既然是一种语言，那就需要能够编辑它和翻译它的工具—Markdown编辑器 ​ 我试了很多编辑器，如：小书匠、Bookpad、网易云笔记、简书，用来用去最后最爱的还是Typora。 ​ 不过Typora和前面介绍的这些不太一样，它不支持左右分屏预览，而是所写及所得(卖个关子，用了你就清楚啦)。我不建议新手从Typora入手学Markdown，它的预览模式对新手很不友好；建议新手从网易云笔记或者简书的编辑器(线上编辑器，不需要下载软件，学习成本低)入手学习。 到了这一步，你了解了Markdown语言，也知道需要编译工具， 但是这里我必须要告诉你一个事实:markdown 没有统一的规范，每家编辑器都想实现特殊语法让自己的产品更好用，所以不同编译平台会有一篇不兼容 一篇详细的介绍Markdown编辑器的帖子 2. 第二步 如果你看到这里，恭喜你，终于可以开始学Markdown语法了。 这里就先推荐我自己写的一篇Markdown语法基本入门的帖子 ​ 这里附上**#Typora编辑器基本编辑指南#**的md文件，供学习。 下载地址 种草几个不错的帖子： LaTex开源小屋 帖子2 网上有很多资源，自己取挖掘啦 3. 第三步 到了这一步，你应该已经用线上编译器做过一些练习和学习了，如果你还很兴趣，就可以下载一些编译器软件了，强烈推荐Typora Typora官网 但是每一款编译器都有其优缺点，下面是一个关于Typora不足的讨论，可以看一下。偷偷告诉你，这个知乎问答的提问者就是我啊，可以点一下关注 讨论的链接 加油！坚持就是胜利！]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTex:从0到1入门]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F20%2FLaTex-%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[写在前面的话： 博主于2019年1月2号开始接触 LaTex语言,也非计算机背景。 所以本文非常适合新手==从0到1入门== 第零步 认识 LaTex ： 一篇详细的关于LaTex的介绍 LaTex适合文章等的排版，让你专注于结构和内容 关于和 word对比，孰优孰劣的问题 word更易上手，是一种文档处理软件 LaTex上手更难，是一种排版工具 LaTex 和 word 优劣的讨论帖 第一步 到这一步，我们知道LaTex是一种电子排版系统，是公认的数学公式排得最好的系统，主要作用是让你专注于写作，得到高质量的排版输出。 ​ 学习LaTex，那就需要能够编辑它和翻译它的工具—LaTex编译器(小编自己起的名字😆 ) ​ 我试了很多编译器，如：Lyx、TeXworks、WinEdt，用来用去最后最爱的还是TexStudio。 ​ 我建议新手可以先从线上编辑器(如：Overleaf) 先学习。 一篇详细介绍LaTex编译器的帖子 第二步 如果你在线上试了试LaTex练习，还是想学，那么你在电脑上安装LaTex运行的环境，这里推荐下载Texlive。 一篇介绍LaTex软件下载的帖子 当你安装好Texlive后，电脑就有了LaTex的编译环境， ​ 这时，你需要一个好用的第三方编译器来帮助你编译 ​ 我自己最喜欢的LaTex编译器—TexStudio ​ 下载地址 种草几个LaTex学习社区： LaTex开源小屋 LaTeX 快速入门 网上有很多资源，自己取挖掘啦 第三步 我是因为要写毕业论文，需要排版，所以开始学习LaTex； ​ 参考我的学习经验，我建议是找一份模板，然后去研究这部分模板； ​ 我就是发现网上的论文模板和学校要求的有出入，然后自己就试着对模板 ​ 去修改，就是在这样的过程中，慢慢有了提高； ​ 现在也算是入门了。 推荐一些模板网站： ​ 网站1 ​ 网站2 最后祝你成功！！！]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习中需要了解的Python知识]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F19%2F%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84Python%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[在通过《笨方法学Python》学习Python的过程中，作者在每一节，提出了一些Python的知识，以让读者提前研习。 Pydoc命令 input() 和 raw_input() 命令的区别 import命令 1. Pydoc命令 pydoc — Documentation generator and online help system 帮你从代码和注释自动生成文档的工具 所以我们可以利用pydoc查询某些命令的用法 123# 比如我想查input命令的用法# 可以在命令行键入以下指令python -m pydoc input 2. input() 和 raw_input() 命令的区别 Python2.x 中 input() 相等于 eval(raw_input(prompt)) ，用来获取控制台的输入。 raw_input() 将所有输入作为字符串看待，返回字符串类型。 而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ int, float ）。 12345注意：input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。 参考资料 3. import命令 利用import语句来引入python中的模块(module) 语法如下： 123456import module1[, module2[,... moduleN]]# 示例# 想要导入模块 math.py，需要把命令放在脚本的顶端：import math# 一个模块只会被导入一次，不管你执行了多少次import。# 这样可以防止导入模块被一遍又一遍地执行 Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中 from…import 语句 ，语法如下： 1234from modname import name1[, name2[, ... nameN]]# 示例# 要导入模块 fib 的 fibonacci 函数from fib import fibonacci 参考资料]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test5_更多字符串练习]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest5-%E6%9B%B4%E5%A4%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 、 &amp; 1234567891011121314151617181920212223242526272829303132333435363738# ex10.pytabby_cat="\t I'm tabbed in."persian_cat="I'm split \n on line. "backslash_cat="I'm \\ a \\ cat."fat_cat= """I'll do a list:\t * Cat foog\t * Fishies\t * Catnip \n \t *Grass"""print tabby_catprint persian_catprint backslash_catprint fat_cat# ex11.pyprint "How old are you?",age=raw_input()print "How tall are you?",height=raw_input()print "How much do you weigh?",weight=raw_input()print "So, you're %r old,%r tall and %r heavy."%(age,height,weight)#ex12.pyage=raw_input("How old are you? ")height=raw_input("How tall are you? ")weight=raw_input("How much do you weigh? ")print "So, you're %r old,%r tall and %r heavy."%(age,height,weight) 需要注意的几个地方 python中 \t 的效果，类似于在word写作中，tab键起到的作用； \n 的效果，类似于在word写作中，enter 键起到的作用； 在ex11.py 程序中，每行的print后面加了个逗号（，），这样print就不会输出换行符而结束这一行了。 python 中可以在一组三引号（&quot;&quot;&quot;）之间放入任意多行的文字。 附加练习 以下摘录自原文 下面是python支持的转义序列 12345678910\\ # 反斜杠（\）\' # 单引号\" # 双引号\a # ASCII 响铃符\b # ASCII 退格符\f # ASCII 进纸符\r # ASCII 回车符\uxxxx # 值为16位十六进制值xxxx的字符（仅适用于Unicode）\Uxxxxxxxx # 值为32位十六进制值xxxxxxxx的字符（仅适用于Unicode）\v # ASCII 垂直制表符 Python 的raw_input实现的是什么功能？以及其他用法 input()和raw_input()有何不同？]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test4_字符串练习]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 &amp; 1234567891011121314151617181920212223242526272829303132333435# ex6.pyx="There are %d types of people." %10binary="binary"do_not="don't"y="Those who know %s and those who %s." %(binary,do_not)print xprint yprint "I said: %r." % x print "I also said: '%s'." %y hilarious=Falsejoke_evaluation="Isn't that joke so funny?! %r " print joke_evaluation % hilariousw="This is the left side of ..."e="a sting with a right side."print w+e # ex8.pyfomatter="%r %r %r %r"print fomatter %(1,2,3,4)print fomatter %("one","two","three","four")print fomatter %(True,False,False,True)print fomatter %(fomatter,fomatter,fomatter,fomatter)print fomatter %( "I had this thing.", "That you could type up right." "But it didn't sing." "So I said goodnight." ) 遇到的问题 ex8.py 的代码中 %r打印出来的是单引号，但是实际上用的双引号 python会用最有效的方式打印出字符串，而不是完全按照你写的方式来打印。 True和False是Pyhthon的关键字，用来表示真和假的概念。如果加了引号，就变成了字符串，无法实现原来的功能。 %r的作用 %r是用来调试（debug）比较好，因为它会显示变量的原始数据，而%s、%d等符号是用来向用户显示输出的。 附加练习 以下摘录自原文 每一行加一段注释 最后一行输出既有单引号又有双引号，你觉得这背后的机制是什么？]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test6_参数、变量]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest6-%E5%8F%82%E6%95%B0%E3%80%81%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 &amp; 1234567891011121314151617181920212223242526272829303132# ex13.pyfrom sys import argvscript, first, second, third=argvprint "The script is called:",scriptprint "Your first variable is:",firstprint "Your second variable is:",secondprint "Your third variable is:",third# ex14.pyfrom sys import argvscript, user_name =argvprompt='&gt; 'print "Hi %s, I'm the %s script."%(user_name,script)print "I'd like to ask you a few questions."print "Do you like me %s?"%user_namelikes=raw_input(prompt)print "Where do you live %s?"%user_namelives=raw_input('&gt; ')print "What kind of computer do you have?"computer=raw_input(prompt)print"""Alright, so you said %r about liking me.You live in %r. Not sure where that is.And you have a %r computer. Nice!""" %(likes,lives,computer) 应该看到的结果 原文作者不建议使用python的IDLE运行程序，推荐使用windows下的Powershell（命令行） 不清楚为什么不建议使用IDLE 12345&gt; python ex13.py 1st 2nd 3rdThe script is called:ex13.pyYour first variable is:1stYour second variable is:2ndYour third variable is:3rd 123456789101112131415&gt; python ex14.py darerHi darer, I'm the ex14.py script.I'd like to ask you a few questions.Do you like me darer?&gt; yesWhere do you live darer?&gt; chinaWhat kind of computer do you have?&gt; lenovoAlright, so you said 'yes' about liking me.You live in 'china'. Not sure where that is.And you have a 'lenovo' computer. Nice! 需要注意的几个地方 怎么在当前文件夹运行Powershell 利用命令行指令 cd 在当前文件夹 shift+鼠标右键 选择“打开powershell&quot; 注意ex14.py中，raw_input()的用法 为什么ex14.py 中，键入的字符没有单引号，但是输出的结果中却有单引号（’ '）呢？ 因为%r是调试专用，它输出的是“原始表示”出来的字符 而%s是为了给用户显示 附加练习 以下摘录自原文 是否可以用双引号定义prompt变量的值？ argv和raw_input()有什么不同？ 如果参数是在用户执行命令时就要输入的，那就是argv 如果是在脚本运行过程中需要用户输入，那就使用raw_input() argv就是所谓的”参数变量“（argument variable），这个变量保存着你运行Python脚本时传递给Python脚本的参数。 脚本中出现import语句，非常重要，它用于导入模块（module）]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test2_数字和数学计算]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest2-%E6%95%B0%E5%AD%97%E5%92%8C%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 附加练习 原文—摘录至《笨方法学Python》第三版 1234567891011121314151617print "I will now count my chickens:"print "Hens" , 25+30/6print "Roosters", 100-25*3%4print "Now, I will count the eggs:"print 3+2+1-5+4%2-1/4+6print "Is it true that 3+2&lt;5-7"print 3+2&lt;5-7print "What is 3+2?",3+2print "What is 5-7?",5-7print "Oh, that's why it's False."print "Is it greater?",5&gt;-2print "Is it greater or equal?",5&gt;=-2print "Is it less than or equal?",5&lt;=-2 遇到的问题 利用Python做四则运算非常简单，但是除法运算略有一些复杂 例如： 123print 5/2 # 输出结果是整数2# 对于整数除法来说，输出结果会自动(四舍五入)取整 为了解决以上除法运算时出现的问题，我们需要理解浮点数 1232.0 # 这是一个浮点数(float)print 11.0/4.0# 输出结果是2.75 可以使用小括号强制计算的先后顺序 布尔值也是基本数据类型 比较运算的结果直接输出布尔值（True or False） 12print 2&gt;4# 输出结果是False 附加练习 以下摘录自原文 每一行的代码用#写注释，说明一些这一行的作用 使用浮点数重新写一下ex3.py]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test1_第一个程序]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest1-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 问题的解决方法 附加练习 原文—摘录至《笨方法学Python》第三版 1234567print "Hello world"print "Hello again"print "I like typing this"print "This is fun"print 'Yay! printing'print "I'd much rather you 'not'."print 'I "said" do not touch this.' 遇到的问题 如果用双引号” “ ，把字符串包起来，那么，句中不能用双引号，只能用单引号‘ ’ 如果用单引号‘ ’ ，把字符串包起来，那么，句中不能用单引号，只能用双引号&quot; &quot; 否则就会出现如下结果： 1234&gt;&gt;&gt; print " I"d much rather you "not"."SyntaxError: invalid syntax&gt;&gt;&gt; print ' I 'said' do not touch this.'SyntaxError: invalid syntax 解决办法 书写时，注意这个细节，按照规范书写即可 附加练习 以下摘录自原文 多打印一行脚本 让脚本只打印一行 如果在代码前加一个“#”，会出现什么效果呢？ 程序中注释是非常重要的，我们可以在一段代码的前面加上一个字符&quot;#&quot;，来把这段代码注释掉，而不被Python执行。 为什么 Print “Hi # there.” 里的#没被忽略掉呢？ 这行代码里的#处于字符串内部，所以它就是引号结束前的字符串中的一部分，这时它只是一个普通字符，而不是代表注释的意思。]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Test3_变量和命名]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F03%2FTest3-%E5%8F%98%E9%87%8F%E5%92%8C%E5%91%BD%E5%90%8D%2F</url>
    <content type="text"><![CDATA[Python系列之笨方法学Python是我学习《笨方法学Python》—Zed A. Show著 的学习思路和理解，如有不如之处，望指出！！！ 文章主要分为三个部分： 原文—摘录至《笨方法学Python》第三版 学习中遇到的问题 附加练习 原文—摘录至《笨方法学Python》第三版 &amp; 123456789101112131415161718192021222324252627282930313233343536# ex4.py#cars=100space_in_car=4.0drivers=30passengers=90cars_not_driven=cars-driverscars-driven=driverscarpool_capacity=cars-driven*space_in_a_caraverage_passengers_per_car=passengers/cars-drivenprint "There are",cars,"cars available."print "There are only ",drivers,"drivers available."print "Ther will be",cars_not_driven,"empty cars today."print "We can transport",carpool_capacity,"people today."print "We have",passengers,"to carpool today."print "We need to put about",average_passengers_per_car,"in each car."# ex5.py#my_name='Zed A. Shaw' # 《笨方法学Python》作者my_age=35my_height=74 #inchesmy_weight=180 #lbsmy_eyes='Blue'my_teeth='while'my_hair='Brown'print "Let's talk about %s." %my_nameprint "He's %d inches tall." %my_heightprint "He's %d ponds heavy." %my_weightprint "Actually that's not too heavy."print "He's got %s eyes and %s hair." % (my_eyes,my_hair)print "His teeth are usually %s depending on the coffee." %my_teethprint "If I add %d ,%d ,and %d I get %d. " %(my_age,my_height,my_weight,my_age+my_height+my_weight) 遇到的问题 一些关于字符串（string）的知识 12345# 使用“ 或 ‘ 来创建字符串print '这是一个字符串'print "这也是一个字符串"# 字符串也可以相加print "Hello" + ' world' 关于变量名的知识 1# 变量名设置的要求：使用下划线分割的小写字母 代码中 %s 、%d 和 %r 是起什么作用？ 12345# %s 、%d 和 ％ｒ 是一种”格式控制工具“，＃指令告诉Ｐｙｔｈｏｎ 把右边的变量带到字符串，并把变量的值放到％ｓ等所在的位置＃如果变量是字符串，使用％ｓ＃如果变量是数字，使用％ｄ＃无论变量是什么，都可以用％ｒ 附加练习 以下摘录自原文 单等号和双等号有什么不同？ 如何将浮点数四舍五入？ 使用ｒｏｕｎｄ（）函数]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笨方法学Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我是如何利用不同的网盘管理文件的？]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F02%2F01%2F%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BD%91%E7%9B%98%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[之前，我和普通人一样，把文件上传到百度云，比如电影、软件、文档等等，但是在前几天，我在整理电脑时，当天从百度云下载了很多文件，利用 PanDownload (下载地址) 下载的，被百度识别到异常，给我限速了！！！很生气，我分享到云端的文件，我还被限速了！(确实，我利用破解软件下载，也有责任) 因此，我由此开始考虑，自己本地文件应该怎么样管理呢？放在一家网盘中，肯定是不行了，需要利用文件的特性，利用不同的网盘平台。 首先，我把文件做了以下分类： 绝对隐私文件：私密照片、视频；加密文档；等等 私人文件：照片、视频（非私密）；文档（活动策划、方案、论文等） 公共资源：电影、音乐、软件、教程、电子书、文档 等等 绝对隐私文件 没有绝对安全的网盘，这一类文件最好不要放在云端！！！ 建议：备份在私人硬盘 私人文件 我把私人文件分为两类： 长期保存 短期保存 需长期保存的文件 建议：可先暂存云端，定期备份到本地 以我为例： 照片类：我的主要是旅游、活动合影、留念这些；需要存储空间大，方便手机上传，可随时下载本地 我利用的是谷歌相册，主要是看中两点： 谷歌相册无限空间 谷歌家更放心些（建议关闭所有共享功能） 当然使用谷歌相册，你需要梯子 才能用 视频类、文档类：我是压缩后，保存到百度云盘 仅短期保存的文件 一般我都是压缩后，保存到百度云盘 但是对一些文件，我们想在电脑、PC、笔记本之间快速共享，仅利用网盘的共享功能，而不把文件存储起来，这里我推荐两种方法： 对于小文件（Word、PPT、表格、照片等），我推荐坚果云 ，非常良心，免费版每30天，有1G的上传流量和3G的下载流量，上传、下载都是满速，无广告！！！ 小文件，基本够用的！！ 对于一些大文件（设计稿、视频处理等等），我推荐GoodSync , 介绍说明 ，可以实现不同终端之间数据的同步共享，就是一神器。 这里下载神器 公共资源 公共资源主要有：好用的软件、电子书、电影、教程、模板等等 建议： 电子书、软件等分享价值的、较为稀缺、难搞的文件，放在城通网盘 城通网盘有400G空间、分享给别人还会有收益奖励，下载速度也还可以， 所以为什么不把自己手里的资源再共享的同时还可以赚钱呢？！ 电影、视频类，建议百度云 因为你去搜电影资源多是百度云分享，此时把电影等下载到本地在传到别的网盘是费时费力的，不如留在百度云盘，毕竟还有在线播放功能。 以上，就是我利用不同网盘管理文件的方法 如果你有更好的想法，可以下方留言讨论，欢迎转发分享！]]></content>
      <categories>
        <category>产品必用软件</category>
        <category>软件教程</category>
      </categories>
      <tags>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F01%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客框架下，模板的选择与主题优化]]></title>
    <url>%2Fdarerd.github.io%2F2019%2F01%2F30%2FHexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E4%B8%8B%EF%BC%8C%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%80%89%E6%8B%A9%E4%B8%8E%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[折腾了两三天，零基础的我，终于找到一个喜欢的模板，并做好了优化 编译环境：（Windows 10 操作系统） Git version：2.20.1 Node version：10.15.0 模板Next version：5.1.4 Markdown编辑器 version：0.9.64 关于利用GithubPages和Hexo搭建个人独立博客，和下载Hexo主题模板的教程，可以查阅 ，有非常简单易懂的教程 Next模板主题优化 选择Scheme Next模板内置四种不同的主题，可以自定义开启，参考文档： 选择Scheme 设置语言 参考文档：设置语言 如果你想设置多种语言，可以参考以下指令： 1234language: - zh-Hans - en - zh-hk .yml 文件修改是需要注意：每一个值的冒号后面都有一个半角空格！ 未生效的写法：title:Darer‘Blog 能生效的写法：title:[空格]Darer‘Blog 设置菜单 参考文档：设置菜单 补充说明： 123456789menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive about: /about/ || user #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 以上设置 菜单栏 的指令 也决定了 菜单栏各项菜单的顺序，以上面的指令为例，顺序依次为：主页、标签、目录、归档、关于 设置侧栏 参考文档：设置侧栏 补充说明： 123456789101112# Sidebar offset from top menubar in pixels (only for Pisces | Gemini).###侧栏与顶部菜单栏的 空隙距离 offset: 12 # Back to top in sidebar.(only for Pisces | Gemini). ### 侧边栏加入一个 回到顶部 按钮 b2t: false # Scroll percent label in b2t button. ## 侧边栏加入一个 阅读进度 按钮 scrollpercent: true # Enable sidebar on narrow view (only for Muse | Mist). ##适配 小窗口 onmobile: false 设置头像 参考文档：设置头像 设置作者昵称 参考文档：设置作者昵称 博客描述 参考文档：博客描述 设置字体 参考文档：设置字体 设置代码高亮 参考文档：设置代码高亮 侧边栏 社交链接 参考文档：社交链接 友情链接 参考文档：友情链接 打赏功能设置 参考文档：打赏功能设置 提醒：注意图片的格式（是.jpg还是.png） 站点建立时间 参考文档：站点建立时间 微信公众号订阅 参考文档：微信公众号订阅 提醒：此特性在版本 5.0.1 中引入 引入三方服务以优化模板 添加文章评分功能 参考文档：添加文章评分功能 我还没试过，感兴趣可以参考以上文档说明 添加文章分享功能 参考文档：文章分享 更多功能 如果你还还想添加更多功能，比如： 增加版权信息 在线联系 点击出现小爱心 自定义鼠标加载方式 等等 可以参考以下博客： nMask’s Blog Hexo-Next-主题优化 [hexo搭建个人博客–NexT主题优化] 如果你在使用时，遇到了一些“稀奇古怪”的问题，可以查看下这些博客： nMask’s Blog 「Hexo On Win10」新手搭建博客过程 最后，祝你顺利，过程很枯燥，也不会一帆风顺，但是，相信自己可以战胜困难。 如果，你有任何问题，都可以和我联系，这是传送门 ,随时联系]]></content>
      <categories>
        <category>产品经理学技术</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next模板</tag>
      </tags>
  </entry>
</search>
